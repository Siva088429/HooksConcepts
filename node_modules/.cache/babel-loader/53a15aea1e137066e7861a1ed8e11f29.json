{"ast":null,"code":"import { serializeFetchParameter } from './serializeFetchParameter.js';\nfunction rewriteURIForGET(chosenURI, body) {\n  var queryParams = [];\n  var addQueryParam = function (key, value) {\n    queryParams.push(key + \"=\" + encodeURIComponent(value));\n  };\n  if ('query' in body) {\n    addQueryParam('query', body.query);\n  }\n  if (body.operationName) {\n    addQueryParam('operationName', body.operationName);\n  }\n  if (body.variables) {\n    var serializedVariables = void 0;\n    try {\n      serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n    addQueryParam('variables', serializedVariables);\n  }\n  if (body.extensions) {\n    var serializedExtensions = void 0;\n    try {\n      serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n    } catch (parseError) {\n      return {\n        parseError: parseError\n      };\n    }\n    addQueryParam('extensions', serializedExtensions);\n  }\n  var fragment = '',\n    preFragment = chosenURI;\n  var fragmentStart = chosenURI.indexOf('#');\n  if (fragmentStart !== -1) {\n    fragment = chosenURI.substr(fragmentStart);\n    preFragment = chosenURI.substr(0, fragmentStart);\n  }\n  var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n  var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n  return {\n    newURI: newURI\n  };\n}\nexport { rewriteURIForGET };","map":{"version":3,"mappings":";AACO,SAASA,gBAAgB,CAACC,SAAS,EAAEC,IAAI,EAAE;EAC9C,IAAIC,WAAW,GAAG,EAAE;EACpB,IAAIC,aAAa,GAAG,UAAUC,GAAG,EAAEC,KAAK,EAAE;IACtCH,WAAW,CAACI,IAAI,CAACF,GAAG,GAAG,GAAG,GAAGG,kBAAkB,CAACF,KAAK,CAAC,CAAC;EAC/D,CAAK;EACD,IAAI,OAAO,IAAIJ,IAAI,EAAE;IACjBE,aAAa,CAAC,OAAO,EAAEF,IAAI,CAACO,KAAK,CAAC;EAC1C;EACI,IAAIP,IAAI,CAACQ,aAAa,EAAE;IACpBN,aAAa,CAAC,eAAe,EAAEF,IAAI,CAACQ,aAAa,CAAC;EAC1D;EACI,IAAIR,IAAI,CAACS,SAAS,EAAE;IAChB,IAAIC,mBAAmB,GAAG,KAAK,CAAC;IAChC,IAAI;MACAA,mBAAmB,GAAGC,uBAAuB,CAACX,IAAI,CAACS,SAAS,EAAE,eAAe,CAAC;IAC1F,CAAS,CACD,OAAOG,UAAU,EAAE;MACf,OAAO;QAAEA,UAAU,EAAEA;MAAU,CAAE;IAC7C;IACQV,aAAa,CAAC,WAAW,EAAEQ,mBAAmB,CAAC;EACvD;EACI,IAAIV,IAAI,CAACa,UAAU,EAAE;IACjB,IAAIC,oBAAoB,GAAG,KAAK,CAAC;IACjC,IAAI;MACAA,oBAAoB,GAAGH,uBAAuB,CAACX,IAAI,CAACa,UAAU,EAAE,gBAAgB,CAAC;IAC7F,CAAS,CACD,OAAOD,UAAU,EAAE;MACf,OAAO;QAAEA,UAAU,EAAEA;MAAU,CAAE;IAC7C;IACQV,aAAa,CAAC,YAAY,EAAEY,oBAAoB,CAAC;EACzD;EACI,IAAIC,QAAQ,GAAG,EAAE;IAAEC,WAAW,GAAGjB,SAAS;EAC1C,IAAIkB,aAAa,GAAGlB,SAAS,CAACmB,OAAO,CAAC,GAAG,CAAC;EAC1C,IAAID,aAAa,KAAK,CAAC,CAAC,EAAE;IACtBF,QAAQ,GAAGhB,SAAS,CAACoB,MAAM,CAACF,aAAa,CAAC;IAC1CD,WAAW,GAAGjB,SAAS,CAACoB,MAAM,CAAC,CAAC,EAAEF,aAAa,CAAC;EACxD;EACI,IAAIG,iBAAiB,GAAGJ,WAAW,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG;EACnE,IAAIG,MAAM,GAAGL,WAAW,GAAGI,iBAAiB,GAAGnB,WAAW,CAACqB,IAAI,CAAC,GAAG,CAAC,GAAGP,QAAQ;EAC/E,OAAO;IAAEM,MAAM,EAAEA;EAAM,CAAE;AAC7B","names":["rewriteURIForGET","chosenURI","body","queryParams","addQueryParam","key","value","push","encodeURIComponent","query","operationName","variables","serializedVariables","serializeFetchParameter","parseError","extensions","serializedExtensions","fragment","preFragment","fragmentStart","indexOf","substr","queryParamsPrefix","newURI","join"],"sources":["rewriteURIForGET.js"],"sourcesContent":["import { serializeFetchParameter } from './serializeFetchParameter';\nexport function rewriteURIForGET(chosenURI, body) {\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(key + \"=\" + encodeURIComponent(value));\n    };\n    if ('query' in body) {\n        addQueryParam('query', body.query);\n    }\n    if (body.operationName) {\n        addQueryParam('operationName', body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('variables', serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('extensions', serializedExtensions);\n    }\n    var fragment = '', preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf('#');\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n    var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n    return { newURI: newURI };\n}\n//# sourceMappingURL=rewriteURIForGET.js.map"]},"metadata":{},"sourceType":"module"}