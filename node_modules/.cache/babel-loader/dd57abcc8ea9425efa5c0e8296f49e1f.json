{"ast":null,"code":"import { __extends, __assign } from 'tslib';\nimport { addTypenameToDocument } from '../../utilities/graphql/transform.js';\nimport { wrap, dep } from 'optimism';\nimport { ApolloCache } from '../core/cache.js';\nimport { hasOwn } from './helpers.js';\nimport { supportsResultCaching, EntityStore } from './entityStore.js';\nimport { StoreReader } from './readFromStore.js';\nimport { StoreWriter } from './writeToStore.js';\nimport { Policies, defaultDataIdFromObject } from './policies.js';\nvar defaultConfig = {\n  dataIdFromObject: defaultDataIdFromObject,\n  addTypename: true,\n  resultCaching: true,\n  typePolicies: {}\n};\nvar InMemoryCache = function (_super) {\n  __extends(InMemoryCache, _super);\n  function InMemoryCache(config) {\n    if (config === void 0) {\n      config = {};\n    }\n    var _this = _super.call(this) || this;\n    _this.watches = new Set();\n    _this.typenameDocumentCache = new Map();\n    _this.txCount = 0;\n    _this.maybeBroadcastWatch = wrap(function (c) {\n      return _this.broadcastWatch.call(_this, c);\n    }, {\n      makeCacheKey: function (c) {\n        var store = c.optimistic ? _this.optimisticData : _this.data;\n        if (supportsResultCaching(store)) {\n          var optimistic = c.optimistic,\n            rootId = c.rootId,\n            variables = c.variables;\n          return store.makeCacheKey(c.query, c.callback, JSON.stringify({\n            optimistic: optimistic,\n            rootId: rootId,\n            variables: variables\n          }));\n        }\n      }\n    });\n    _this.watchDep = dep();\n    _this.varDep = dep();\n    _this.config = __assign(__assign({}, defaultConfig), config);\n    _this.addTypename = !!_this.config.addTypename;\n    _this.policies = new Policies({\n      cache: _this,\n      dataIdFromObject: _this.config.dataIdFromObject,\n      possibleTypes: _this.config.possibleTypes,\n      typePolicies: _this.config.typePolicies\n    });\n    _this.data = new EntityStore.Root({\n      policies: _this.policies,\n      resultCaching: _this.config.resultCaching\n    });\n    _this.optimisticData = _this.data;\n    _this.storeWriter = new StoreWriter(_this, _this.storeReader = new StoreReader({\n      cache: _this,\n      addTypename: _this.addTypename\n    }));\n    return _this;\n  }\n  InMemoryCache.prototype.restore = function (data) {\n    if (data) this.data.replace(data);\n    return this;\n  };\n  InMemoryCache.prototype.extract = function (optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return (optimistic ? this.optimisticData : this.data).toObject();\n  };\n  InMemoryCache.prototype.read = function (options) {\n    var store = options.optimistic ? this.optimisticData : this.data;\n    if (typeof options.rootId === 'string' && !store.has(options.rootId)) {\n      return null;\n    }\n    return this.storeReader.readQueryFromStore({\n      store: store,\n      query: options.query,\n      variables: options.variables,\n      rootId: options.rootId,\n      config: this.config\n    }) || null;\n  };\n  InMemoryCache.prototype.write = function (options) {\n    try {\n      ++this.txCount;\n      return this.storeWriter.writeToStore({\n        store: this.data,\n        query: options.query,\n        result: options.result,\n        dataId: options.dataId,\n        variables: options.variables\n      });\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n  InMemoryCache.prototype.modify = function (options) {\n    if (hasOwn.call(options, \"id\") && !options.id) {\n      return false;\n    }\n    var store = options.optimistic ? this.optimisticData : this.data;\n    try {\n      ++this.txCount;\n      return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n  InMemoryCache.prototype.diff = function (options) {\n    return this.storeReader.diffQueryAgainstStore({\n      store: options.optimistic ? this.optimisticData : this.data,\n      rootId: options.id || \"ROOT_QUERY\",\n      query: options.query,\n      variables: options.variables,\n      returnPartialData: options.returnPartialData,\n      config: this.config\n    });\n  };\n  InMemoryCache.prototype.watch = function (watch) {\n    var _this = this;\n    this.watches.add(watch);\n    if (watch.immediate) {\n      this.maybeBroadcastWatch(watch);\n    }\n    return function () {\n      _this.watches.delete(watch);\n    };\n  };\n  InMemoryCache.prototype.gc = function () {\n    return this.optimisticData.gc();\n  };\n  InMemoryCache.prototype.retain = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).retain(rootId);\n  };\n  InMemoryCache.prototype.release = function (rootId, optimistic) {\n    return (optimistic ? this.optimisticData : this.data).release(rootId);\n  };\n  InMemoryCache.prototype.identify = function (object) {\n    return this.policies.identify(object)[0];\n  };\n  InMemoryCache.prototype.evict = function (options) {\n    if (!options.id) {\n      if (hasOwn.call(options, \"id\")) {\n        return false;\n      }\n      options = __assign(__assign({}, options), {\n        id: \"ROOT_QUERY\"\n      });\n    }\n    try {\n      ++this.txCount;\n      return this.optimisticData.evict(options);\n    } finally {\n      if (! --this.txCount && options.broadcast !== false) {\n        this.broadcastWatches();\n      }\n    }\n  };\n  InMemoryCache.prototype.reset = function () {\n    this.data.clear();\n    this.optimisticData = this.data;\n    this.broadcastWatches();\n    return Promise.resolve();\n  };\n  InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n    var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n    if (newOptimisticData !== this.optimisticData) {\n      this.optimisticData = newOptimisticData;\n      this.broadcastWatches();\n    }\n  };\n  InMemoryCache.prototype.performTransaction = function (transaction, optimisticId) {\n    var _this = this;\n    var perform = function (layer) {\n      var _a = _this,\n        data = _a.data,\n        optimisticData = _a.optimisticData;\n      ++_this.txCount;\n      if (layer) {\n        _this.data = _this.optimisticData = layer;\n      }\n      try {\n        transaction(_this);\n      } finally {\n        --_this.txCount;\n        _this.data = data;\n        _this.optimisticData = optimisticData;\n      }\n    };\n    if (typeof optimisticId === 'string') {\n      this.optimisticData = this.optimisticData.addLayer(optimisticId, perform);\n    } else {\n      perform();\n    }\n    this.broadcastWatches();\n  };\n  InMemoryCache.prototype.recordOptimisticTransaction = function (transaction, id) {\n    return this.performTransaction(transaction, id);\n  };\n  InMemoryCache.prototype.transformDocument = function (document) {\n    if (this.addTypename) {\n      var result = this.typenameDocumentCache.get(document);\n      if (!result) {\n        result = addTypenameToDocument(document);\n        this.typenameDocumentCache.set(document, result);\n        this.typenameDocumentCache.set(result, result);\n      }\n      return result;\n    }\n    return document;\n  };\n  InMemoryCache.prototype.broadcastWatches = function () {\n    var _this = this;\n    if (!this.txCount) {\n      this.watches.forEach(function (c) {\n        return _this.maybeBroadcastWatch(c);\n      });\n    }\n  };\n  InMemoryCache.prototype.broadcastWatch = function (c) {\n    this.watchDep.dirty(c);\n    this.watchDep(c);\n    c.callback(this.diff({\n      query: c.query,\n      variables: c.variables,\n      optimistic: c.optimistic\n    }));\n  };\n  InMemoryCache.prototype.makeVar = function (value) {\n    var cache = this;\n    return function rv(newValue) {\n      if (arguments.length > 0) {\n        if (value !== newValue) {\n          value = newValue;\n          cache.varDep.dirty(rv);\n          cache.broadcastWatches();\n        }\n      } else {\n        cache.varDep(rv);\n      }\n      return value;\n    };\n  };\n  return InMemoryCache;\n}(ApolloCache);\nexport { InMemoryCache };","map":{"version":3,"mappings":"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","names":["defaultConfig","dataIdFromObject","defaultDataIdFromObject","addTypename","resultCaching","typePolicies","InMemoryCache","_super","__extends","config","_this","call","watches","Set","typenameDocumentCache","Map","txCount","maybeBroadcastWatch","wrap","c","broadcastWatch","makeCacheKey","store","optimistic","optimisticData","data","supportsResultCaching","rootId","variables","query","callback","JSON","stringify","watchDep","dep","varDep","__assign","policies","Policies","cache","possibleTypes","EntityStore","Root","storeWriter","StoreWriter","storeReader","StoreReader","prototype","restore","replace","extract","toObject","read","options","has","readQueryFromStore","write","writeToStore","result","dataId","broadcast","broadcastWatches","modify","hasOwn","id","fields","diff","diffQueryAgainstStore","returnPartialData","watch","add","immediate","delete","gc","retain","release","identify","object","evict","reset","clear","Promise","resolve","removeOptimistic","idToRemove","newOptimisticData","removeLayer","performTransaction","transaction","optimisticId","perform","layer","_a","addLayer","recordOptimisticTransaction","transformDocument","document","get","addTypenameToDocument","set","forEach","dirty","makeVar","value","rv","newValue","arguments","length","ApolloCache"],"sources":["inMemoryCache.js"],"sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport './fixPolyfills';\nimport { dep, wrap } from 'optimism';\nimport { ApolloCache } from '../core/cache';\nimport { addTypenameToDocument } from '../../utilities/graphql/transform';\nimport { StoreReader } from './readFromStore';\nimport { StoreWriter } from './writeToStore';\nimport { EntityStore, supportsResultCaching } from './entityStore';\nimport { defaultDataIdFromObject, Policies, } from './policies';\nimport { hasOwn } from './helpers';\nvar defaultConfig = {\n    dataIdFromObject: defaultDataIdFromObject,\n    addTypename: true,\n    resultCaching: true,\n    typePolicies: {},\n};\nvar InMemoryCache = (function (_super) {\n    __extends(InMemoryCache, _super);\n    function InMemoryCache(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this) || this;\n        _this.watches = new Set();\n        _this.typenameDocumentCache = new Map();\n        _this.txCount = 0;\n        _this.maybeBroadcastWatch = wrap(function (c) {\n            return _this.broadcastWatch.call(_this, c);\n        }, {\n            makeCacheKey: function (c) {\n                var store = c.optimistic ? _this.optimisticData : _this.data;\n                if (supportsResultCaching(store)) {\n                    var optimistic = c.optimistic, rootId = c.rootId, variables = c.variables;\n                    return store.makeCacheKey(c.query, c.callback, JSON.stringify({ optimistic: optimistic, rootId: rootId, variables: variables }));\n                }\n            }\n        });\n        _this.watchDep = dep();\n        _this.varDep = dep();\n        _this.config = __assign(__assign({}, defaultConfig), config);\n        _this.addTypename = !!_this.config.addTypename;\n        _this.policies = new Policies({\n            cache: _this,\n            dataIdFromObject: _this.config.dataIdFromObject,\n            possibleTypes: _this.config.possibleTypes,\n            typePolicies: _this.config.typePolicies,\n        });\n        _this.data = new EntityStore.Root({\n            policies: _this.policies,\n            resultCaching: _this.config.resultCaching,\n        });\n        _this.optimisticData = _this.data;\n        _this.storeWriter = new StoreWriter(_this, _this.storeReader = new StoreReader({\n            cache: _this,\n            addTypename: _this.addTypename,\n        }));\n        return _this;\n    }\n    InMemoryCache.prototype.restore = function (data) {\n        if (data)\n            this.data.replace(data);\n        return this;\n    };\n    InMemoryCache.prototype.extract = function (optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return (optimistic ? this.optimisticData : this.data).toObject();\n    };\n    InMemoryCache.prototype.read = function (options) {\n        var store = options.optimistic ? this.optimisticData : this.data;\n        if (typeof options.rootId === 'string' && !store.has(options.rootId)) {\n            return null;\n        }\n        return this.storeReader.readQueryFromStore({\n            store: store,\n            query: options.query,\n            variables: options.variables,\n            rootId: options.rootId,\n            config: this.config,\n        }) || null;\n    };\n    InMemoryCache.prototype.write = function (options) {\n        try {\n            ++this.txCount;\n            return this.storeWriter.writeToStore({\n                store: this.data,\n                query: options.query,\n                result: options.result,\n                dataId: options.dataId,\n                variables: options.variables,\n            });\n        }\n        finally {\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.modify = function (options) {\n        if (hasOwn.call(options, \"id\") && !options.id) {\n            return false;\n        }\n        var store = options.optimistic\n            ? this.optimisticData\n            : this.data;\n        try {\n            ++this.txCount;\n            return store.modify(options.id || \"ROOT_QUERY\", options.fields);\n        }\n        finally {\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.diff = function (options) {\n        return this.storeReader.diffQueryAgainstStore({\n            store: options.optimistic ? this.optimisticData : this.data,\n            rootId: options.id || \"ROOT_QUERY\",\n            query: options.query,\n            variables: options.variables,\n            returnPartialData: options.returnPartialData,\n            config: this.config,\n        });\n    };\n    InMemoryCache.prototype.watch = function (watch) {\n        var _this = this;\n        this.watches.add(watch);\n        if (watch.immediate) {\n            this.maybeBroadcastWatch(watch);\n        }\n        return function () {\n            _this.watches.delete(watch);\n        };\n    };\n    InMemoryCache.prototype.gc = function () {\n        return this.optimisticData.gc();\n    };\n    InMemoryCache.prototype.retain = function (rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).retain(rootId);\n    };\n    InMemoryCache.prototype.release = function (rootId, optimistic) {\n        return (optimistic ? this.optimisticData : this.data).release(rootId);\n    };\n    InMemoryCache.prototype.identify = function (object) {\n        return this.policies.identify(object)[0];\n    };\n    InMemoryCache.prototype.evict = function (options) {\n        if (!options.id) {\n            if (hasOwn.call(options, \"id\")) {\n                return false;\n            }\n            options = __assign(__assign({}, options), { id: \"ROOT_QUERY\" });\n        }\n        try {\n            ++this.txCount;\n            return this.optimisticData.evict(options);\n        }\n        finally {\n            if (!--this.txCount && options.broadcast !== false) {\n                this.broadcastWatches();\n            }\n        }\n    };\n    InMemoryCache.prototype.reset = function () {\n        this.data.clear();\n        this.optimisticData = this.data;\n        this.broadcastWatches();\n        return Promise.resolve();\n    };\n    InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n        var newOptimisticData = this.optimisticData.removeLayer(idToRemove);\n        if (newOptimisticData !== this.optimisticData) {\n            this.optimisticData = newOptimisticData;\n            this.broadcastWatches();\n        }\n    };\n    InMemoryCache.prototype.performTransaction = function (transaction, optimisticId) {\n        var _this = this;\n        var perform = function (layer) {\n            var _a = _this, data = _a.data, optimisticData = _a.optimisticData;\n            ++_this.txCount;\n            if (layer) {\n                _this.data = _this.optimisticData = layer;\n            }\n            try {\n                transaction(_this);\n            }\n            finally {\n                --_this.txCount;\n                _this.data = data;\n                _this.optimisticData = optimisticData;\n            }\n        };\n        if (typeof optimisticId === 'string') {\n            this.optimisticData = this.optimisticData.addLayer(optimisticId, perform);\n        }\n        else {\n            perform();\n        }\n        this.broadcastWatches();\n    };\n    InMemoryCache.prototype.recordOptimisticTransaction = function (transaction, id) {\n        return this.performTransaction(transaction, id);\n    };\n    InMemoryCache.prototype.transformDocument = function (document) {\n        if (this.addTypename) {\n            var result = this.typenameDocumentCache.get(document);\n            if (!result) {\n                result = addTypenameToDocument(document);\n                this.typenameDocumentCache.set(document, result);\n                this.typenameDocumentCache.set(result, result);\n            }\n            return result;\n        }\n        return document;\n    };\n    InMemoryCache.prototype.broadcastWatches = function () {\n        var _this = this;\n        if (!this.txCount) {\n            this.watches.forEach(function (c) { return _this.maybeBroadcastWatch(c); });\n        }\n    };\n    InMemoryCache.prototype.broadcastWatch = function (c) {\n        this.watchDep.dirty(c);\n        this.watchDep(c);\n        c.callback(this.diff({\n            query: c.query,\n            variables: c.variables,\n            optimistic: c.optimistic,\n        }));\n    };\n    InMemoryCache.prototype.makeVar = function (value) {\n        var cache = this;\n        return function rv(newValue) {\n            if (arguments.length > 0) {\n                if (value !== newValue) {\n                    value = newValue;\n                    cache.varDep.dirty(rv);\n                    cache.broadcastWatches();\n                }\n            }\n            else {\n                cache.varDep(rv);\n            }\n            return value;\n        };\n    };\n    return InMemoryCache;\n}(ApolloCache));\nexport { InMemoryCache };\n//# sourceMappingURL=inMemoryCache.js.map"]},"metadata":{},"sourceType":"module"}