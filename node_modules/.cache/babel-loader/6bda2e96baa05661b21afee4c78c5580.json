{"ast":null,"code":"import { __awaiter, __generator, __assign } from 'tslib';\nimport { invariant } from 'ts-invariant';\nimport { createFragmentMap } from '../utilities/graphql/fragments.js';\nimport { resultKeyNameFromField, argumentsObjectFromField, isField, isInlineFragment } from '../utilities/graphql/storeUtils.js';\nimport { getMainDefinition, getFragmentDefinitions } from '../utilities/graphql/getFromAST.js';\nimport { visit, BREAK } from 'graphql/language/visitor';\nimport { hasDirectives, shouldInclude } from '../utilities/graphql/directives.js';\nimport { removeClientSetsFromDocument, buildQueryFromSelectionSet } from '../utilities/graphql/transform.js';\nimport { mergeDeep, mergeDeepArray } from '../utilities/common/mergeDeep.js';\nvar LocalState = function () {\n  function LocalState(_a) {\n    var cache = _a.cache,\n      client = _a.client,\n      resolvers = _a.resolvers,\n      fragmentMatcher = _a.fragmentMatcher;\n    this.cache = cache;\n    if (client) {\n      this.client = client;\n    }\n    if (resolvers) {\n      this.addResolvers(resolvers);\n    }\n    if (fragmentMatcher) {\n      this.setFragmentMatcher(fragmentMatcher);\n    }\n  }\n  LocalState.prototype.addResolvers = function (resolvers) {\n    var _this = this;\n    this.resolvers = this.resolvers || {};\n    if (Array.isArray(resolvers)) {\n      resolvers.forEach(function (resolverGroup) {\n        _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n      });\n    } else {\n      this.resolvers = mergeDeep(this.resolvers, resolvers);\n    }\n  };\n  LocalState.prototype.setResolvers = function (resolvers) {\n    this.resolvers = {};\n    this.addResolvers(resolvers);\n  };\n  LocalState.prototype.getResolvers = function () {\n    return this.resolvers || {};\n  };\n  LocalState.prototype.runResolvers = function (_a) {\n    var document = _a.document,\n      remoteResult = _a.remoteResult,\n      context = _a.context,\n      variables = _a.variables,\n      _b = _a.onlyRunForcedResolvers,\n      onlyRunForcedResolvers = _b === void 0 ? false : _b;\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_c) {\n        if (document) {\n          return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) {\n            return __assign(__assign({}, remoteResult), {\n              data: localResult.result\n            });\n          })];\n        }\n        return [2, remoteResult];\n      });\n    });\n  };\n  LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n    this.fragmentMatcher = fragmentMatcher;\n  };\n  LocalState.prototype.getFragmentMatcher = function () {\n    return this.fragmentMatcher;\n  };\n  LocalState.prototype.clientQuery = function (document) {\n    if (hasDirectives(['client'], document)) {\n      if (this.resolvers) {\n        return document;\n      }\n    }\n    return null;\n  };\n  LocalState.prototype.serverQuery = function (document) {\n    return removeClientSetsFromDocument(document);\n  };\n  LocalState.prototype.prepareContext = function (context) {\n    var cache = this.cache;\n    return __assign(__assign({}, context), {\n      cache: cache,\n      getCacheKey: function (obj) {\n        return cache.identify(obj);\n      }\n    });\n  };\n  LocalState.prototype.addExportedVariables = function (document, variables, context) {\n    if (variables === void 0) {\n      variables = {};\n    }\n    if (context === void 0) {\n      context = {};\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (document) {\n          return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) {\n            return __assign(__assign({}, variables), data.exportedVariables);\n          })];\n        }\n        return [2, __assign({}, variables)];\n      });\n    });\n  };\n  LocalState.prototype.shouldForceResolvers = function (document) {\n    var forceResolvers = false;\n    visit(document, {\n      Directive: {\n        enter: function (node) {\n          if (node.name.value === 'client' && node.arguments) {\n            forceResolvers = node.arguments.some(function (arg) {\n              return arg.name.value === 'always' && arg.value.kind === 'BooleanValue' && arg.value.value === true;\n            });\n            if (forceResolvers) {\n              return BREAK;\n            }\n          }\n        }\n      }\n    });\n    return forceResolvers;\n  };\n  LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n    return this.cache.diff({\n      query: buildQueryFromSelectionSet(document),\n      variables: variables,\n      returnPartialData: true,\n      optimistic: false\n    }).result;\n  };\n  LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n    if (context === void 0) {\n      context = {};\n    }\n    if (variables === void 0) {\n      variables = {};\n    }\n    if (fragmentMatcher === void 0) {\n      fragmentMatcher = function () {\n        return true;\n      };\n    }\n    if (onlyRunForcedResolvers === void 0) {\n      onlyRunForcedResolvers = false;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n      return __generator(this, function (_b) {\n        mainDefinition = getMainDefinition(document);\n        fragments = getFragmentDefinitions(document);\n        fragmentMap = createFragmentMap(fragments);\n        definitionOperation = mainDefinition.operation;\n        defaultOperationType = definitionOperation ? definitionOperation.charAt(0).toUpperCase() + definitionOperation.slice(1) : 'Query';\n        _a = this, cache = _a.cache, client = _a.client;\n        execContext = {\n          fragmentMap: fragmentMap,\n          context: __assign(__assign({}, context), {\n            cache: cache,\n            client: client\n          }),\n          variables: variables,\n          fragmentMatcher: fragmentMatcher,\n          defaultOperationType: defaultOperationType,\n          exportedVariables: {},\n          onlyRunForcedResolvers: onlyRunForcedResolvers\n        };\n        return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) {\n          return {\n            result: result,\n            exportedVariables: execContext.exportedVariables\n          };\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fragmentMap, context, variables, resultsToMerge, execute;\n      var _this = this;\n      return __generator(this, function (_a) {\n        fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n        resultsToMerge = [rootValue];\n        execute = function (selection) {\n          return __awaiter(_this, void 0, void 0, function () {\n            var fragment, typeCondition;\n            return __generator(this, function (_a) {\n              if (!shouldInclude(selection, variables)) {\n                return [2];\n              }\n              if (isField(selection)) {\n                return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                  var _a;\n                  if (typeof fieldResult !== 'undefined') {\n                    resultsToMerge.push((_a = {}, _a[resultKeyNameFromField(selection)] = fieldResult, _a));\n                  }\n                })];\n              }\n              if (isInlineFragment(selection)) {\n                fragment = selection;\n              } else {\n                fragment = fragmentMap[selection.name.value];\n                process.env.NODE_ENV === \"production\" ? invariant(fragment, 22) : invariant(fragment, \"No fragment named \" + selection.name.value);\n              }\n              if (fragment && fragment.typeCondition) {\n                typeCondition = fragment.typeCondition.name.value;\n                if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                  return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                    resultsToMerge.push(fragmentResult);\n                  })];\n                }\n              }\n              return [2];\n            });\n          });\n        };\n        return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n          return mergeDeepArray(resultsToMerge);\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n    return __awaiter(this, void 0, void 0, function () {\n      var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n      var _this = this;\n      return __generator(this, function (_a) {\n        variables = execContext.variables;\n        fieldName = field.name.value;\n        aliasedFieldName = resultKeyNameFromField(field);\n        aliasUsed = fieldName !== aliasedFieldName;\n        defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n        resultPromise = Promise.resolve(defaultResult);\n        if (!execContext.onlyRunForcedResolvers || this.shouldForceResolvers(field)) {\n          resolverType = rootValue.__typename || execContext.defaultOperationType;\n          resolverMap = this.resolvers && this.resolvers[resolverType];\n          if (resolverMap) {\n            resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n            if (resolve) {\n              resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, {\n                field: field,\n                fragmentMap: execContext.fragmentMap\n              }));\n            }\n          }\n        }\n        return [2, resultPromise.then(function (result) {\n          if (result === void 0) {\n            result = defaultResult;\n          }\n          if (field.directives) {\n            field.directives.forEach(function (directive) {\n              if (directive.name.value === 'export' && directive.arguments) {\n                directive.arguments.forEach(function (arg) {\n                  if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                    execContext.exportedVariables[arg.value.value] = result;\n                  }\n                });\n              }\n            });\n          }\n          if (!field.selectionSet) {\n            return result;\n          }\n          if (result == null) {\n            return result;\n          }\n          if (Array.isArray(result)) {\n            return _this.resolveSubSelectedArray(field, result, execContext);\n          }\n          if (field.selectionSet) {\n            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n          }\n        })];\n      });\n    });\n  };\n  LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n    var _this = this;\n    return Promise.all(result.map(function (item) {\n      if (item === null) {\n        return null;\n      }\n      if (Array.isArray(item)) {\n        return _this.resolveSubSelectedArray(field, item, execContext);\n      }\n      if (field.selectionSet) {\n        return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n      }\n    }));\n  };\n  return LocalState;\n}();\nexport { LocalState };","map":{"version":3,"mappings":"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","names":["LocalState","_a","cache","client","resolvers","fragmentMatcher","addResolvers","setFragmentMatcher","prototype","_this","Array","isArray","forEach","resolverGroup","mergeDeep","setResolvers","getResolvers","runResolvers","document","remoteResult","context","variables","_b","onlyRunForcedResolvers","__awaiter","__generator","_c","resolveDocument","data","then","localResult","__assign","result","getFragmentMatcher","clientQuery","hasDirectives","serverQuery","removeClientSetsFromDocument","prepareContext","getCacheKey","obj","identify","addExportedVariables","buildRootValueFromCache","exportedVariables","shouldForceResolvers","forceResolvers","visit","Directive","enter","node","name","value","arguments","some","arg","kind","BREAK","diff","query","buildQueryFromSelectionSet","returnPartialData","optimistic","rootValue","mainDefinition","fragments","fragmentMap","definitionOperation","defaultOperationType","execContext","getMainDefinition","getFragmentDefinitions","createFragmentMap","operation","charAt","toUpperCase","slice","resolveSelectionSet","selectionSet","resultsToMerge","execute","selection","fragment","typeCondition","shouldInclude","isField","resolveField","fieldResult","push","resultKeyNameFromField","isInlineFragment","process","env","NODE_ENV","invariant","fragmentResult","Promise","all","selections","map","mergeDeepArray","field","fieldName","aliasedFieldName","aliasUsed","defaultResult","resultPromise","resolverType","resolverMap","resolve","__typename","argumentsObjectFromField","directives","directive","resolveSubSelectedArray","item"],"sources":["LocalState.js"],"sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { visit, BREAK } from 'graphql/language/visitor';\nimport { invariant } from 'ts-invariant';\nimport { getMainDefinition, getFragmentDefinitions, } from '../utilities/graphql/getFromAST';\nimport { hasDirectives, shouldInclude } from '../utilities/graphql/directives';\nimport { createFragmentMap } from '../utilities/graphql/fragments';\nimport { buildQueryFromSelectionSet, removeClientSetsFromDocument, } from '../utilities/graphql/transform';\nimport { mergeDeep, mergeDeepArray } from '../utilities/common/mergeDeep';\nimport { argumentsObjectFromField, resultKeyNameFromField, isField, isInlineFragment, } from '../utilities/graphql/storeUtils';\nvar LocalState = (function () {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function (resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function (resolverGroup) {\n                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n            });\n        }\n        else {\n            this.resolvers = mergeDeep(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function (resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function () {\n        return this.resolvers || {};\n    };\n    LocalState.prototype.runResolvers = function (_a) {\n        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_c) {\n                if (document) {\n                    return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign(__assign({}, remoteResult), { data: localResult.result })); })];\n                }\n                return [2, remoteResult];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function () {\n        return this.fragmentMatcher;\n    };\n    LocalState.prototype.clientQuery = function (document) {\n        if (hasDirectives(['client'], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n        }\n        return null;\n    };\n    LocalState.prototype.serverQuery = function (document) {\n        return removeClientSetsFromDocument(document);\n    };\n    LocalState.prototype.prepareContext = function (context) {\n        var cache = this.cache;\n        return __assign(__assign({}, context), { cache: cache,\n            getCacheKey: function (obj) {\n                return cache.identify(obj);\n            } });\n    };\n    LocalState.prototype.addExportedVariables = function (document, variables, context) {\n        if (variables === void 0) { variables = {}; }\n        if (context === void 0) { context = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (document) {\n                    return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign(__assign({}, variables), data.exportedVariables)); })];\n                }\n                return [2, __assign({}, variables)];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function (document) {\n        var forceResolvers = false;\n        visit(document, {\n            Directive: {\n                enter: function (node) {\n                    if (node.name.value === 'client' && node.arguments) {\n                        forceResolvers = node.arguments.some(function (arg) {\n                            return arg.name.value === 'always' &&\n                                arg.value.kind === 'BooleanValue' &&\n                                arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return BREAK;\n                        }\n                    }\n                },\n            },\n        });\n        return forceResolvers;\n    };\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n        return this.cache.diff({\n            query: buildQueryFromSelectionSet(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n        if (context === void 0) { context = {}; }\n        if (variables === void 0) { variables = {}; }\n        if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }\n        if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n            return __generator(this, function (_b) {\n                mainDefinition = getMainDefinition(document);\n                fragments = getFragmentDefinitions(document);\n                fragmentMap = createFragmentMap(fragments);\n                definitionOperation = mainDefinition\n                    .operation;\n                defaultOperationType = definitionOperation\n                    ? definitionOperation.charAt(0).toUpperCase() +\n                        definitionOperation.slice(1)\n                    : 'Query';\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: __assign(__assign({}, context), { cache: cache,\n                        client: client }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    onlyRunForcedResolvers: onlyRunForcedResolvers,\n                };\n                return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) { return ({\n                        result: result,\n                        exportedVariables: execContext.exportedVariables,\n                    }); })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return __generator(this, function (_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [rootValue];\n                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {\n                    var fragment, typeCondition;\n                    return __generator(this, function (_a) {\n                        if (!shouldInclude(selection, variables)) {\n                            return [2];\n                        }\n                        if (isField(selection)) {\n                            return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                                    var _a;\n                                    if (typeof fieldResult !== 'undefined') {\n                                        resultsToMerge.push((_a = {},\n                                            _a[resultKeyNameFromField(selection)] = fieldResult,\n                                            _a));\n                                    }\n                                })];\n                        }\n                        if (isInlineFragment(selection)) {\n                            fragment = selection;\n                        }\n                        else {\n                            fragment = fragmentMap[selection.name.value];\n                            invariant(fragment, \"No fragment named \" + selection.name.value);\n                        }\n                        if (fragment && fragment.typeCondition) {\n                            typeCondition = fragment.typeCondition.name.value;\n                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                                        resultsToMerge.push(fragmentResult);\n                                    })];\n                            }\n                        }\n                        return [2];\n                    });\n                }); };\n                return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n                        return mergeDeepArray(resultsToMerge);\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return __generator(this, function (_a) {\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = resultKeyNameFromField(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                if (!execContext.onlyRunForcedResolvers ||\n                    this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, { field: field, fragmentMap: execContext.fragmentMap }));\n                        }\n                    }\n                }\n                return [2, resultPromise.then(function (result) {\n                        if (result === void 0) { result = defaultResult; }\n                        if (field.directives) {\n                            field.directives.forEach(function (directive) {\n                                if (directive.name.value === 'export' && directive.arguments) {\n                                    directive.arguments.forEach(function (arg) {\n                                        if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        if (result == null) {\n                            return result;\n                        }\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, result, execContext);\n                        }\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n                        }\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, item, execContext);\n            }\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n            }\n        }));\n    };\n    return LocalState;\n}());\nexport { LocalState };\n//# sourceMappingURL=LocalState.js.map"]},"metadata":{},"sourceType":"module"}