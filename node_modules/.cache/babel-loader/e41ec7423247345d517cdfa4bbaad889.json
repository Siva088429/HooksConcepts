{"ast":null,"code":"import { invariant } from 'ts-invariant';\nimport { NetworkStatus } from './networkStatus.js';\nvar Reobserver = function () {\n  function Reobserver(observer, options, fetch, shouldFetch) {\n    this.observer = observer;\n    this.options = options;\n    this.fetch = fetch;\n    this.shouldFetch = shouldFetch;\n  }\n  Reobserver.prototype.reobserve = function (newOptions, newNetworkStatus) {\n    if (newOptions) {\n      this.updateOptions(newOptions);\n    } else {\n      this.updatePolling();\n    }\n    var concast = this.fetch(this.options, newNetworkStatus);\n    if (this.concast) {\n      this.concast.removeObserver(this.observer, true);\n    }\n    concast.addObserver(this.observer);\n    return (this.concast = concast).promise;\n  };\n  Reobserver.prototype.updateOptions = function (newOptions) {\n    var _this = this;\n    Object.keys(newOptions).forEach(function (key) {\n      var value = newOptions[key];\n      if (value !== void 0) {\n        _this.options[key] = value;\n      }\n    });\n    this.updatePolling();\n    return this;\n  };\n  Reobserver.prototype.stop = function () {\n    if (this.concast) {\n      this.concast.removeObserver(this.observer);\n      delete this.concast;\n    }\n    if (this.pollingInfo) {\n      clearTimeout(this.pollingInfo.timeout);\n      this.options.pollInterval = 0;\n      this.updatePolling();\n    }\n  };\n  Reobserver.prototype.updatePolling = function () {\n    var _this = this;\n    var _a = this,\n      pollingInfo = _a.pollingInfo,\n      pollInterval = _a.options.pollInterval;\n    if (!pollInterval) {\n      if (pollingInfo) {\n        clearTimeout(pollingInfo.timeout);\n        delete this.pollingInfo;\n      }\n      return;\n    }\n    if (pollingInfo && pollingInfo.interval === pollInterval) {\n      return;\n    }\n    process.env.NODE_ENV === \"production\" ? invariant(pollInterval, 23) : invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n    if (this.shouldFetch === false) {\n      return;\n    }\n    var info = pollingInfo || (this.pollingInfo = {});\n    info.interval = pollInterval;\n    var maybeFetch = function () {\n      if (_this.pollingInfo) {\n        if (_this.shouldFetch && _this.shouldFetch()) {\n          _this.reobserve({\n            fetchPolicy: \"network-only\"\n          }, NetworkStatus.poll).then(poll, poll);\n        } else {\n          poll();\n        }\n      }\n    };\n    var poll = function () {\n      var info = _this.pollingInfo;\n      if (info) {\n        clearTimeout(info.timeout);\n        info.timeout = setTimeout(maybeFetch, info.interval);\n      }\n    };\n    poll();\n  };\n  return Reobserver;\n}();\nexport { Reobserver };","map":{"version":3,"mappings":"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","names":["Reobserver","observer","options","fetch","shouldFetch","prototype","reobserve","newOptions","newNetworkStatus","updateOptions","updatePolling","concast","removeObserver","addObserver","promise","_this","Object","keys","forEach","key","value","stop","pollingInfo","clearTimeout","timeout","pollInterval","_a","interval","process","env","NODE_ENV","invariant","info","maybeFetch","fetchPolicy","NetworkStatus","poll","then","setTimeout"],"sources":["Reobserver.js"],"sourcesContent":["import { NetworkStatus } from './networkStatus';\nimport { invariant } from 'ts-invariant';\nvar Reobserver = (function () {\n    function Reobserver(observer, options, fetch, shouldFetch) {\n        this.observer = observer;\n        this.options = options;\n        this.fetch = fetch;\n        this.shouldFetch = shouldFetch;\n    }\n    Reobserver.prototype.reobserve = function (newOptions, newNetworkStatus) {\n        if (newOptions) {\n            this.updateOptions(newOptions);\n        }\n        else {\n            this.updatePolling();\n        }\n        var concast = this.fetch(this.options, newNetworkStatus);\n        if (this.concast) {\n            this.concast.removeObserver(this.observer, true);\n        }\n        concast.addObserver(this.observer);\n        return (this.concast = concast).promise;\n    };\n    Reobserver.prototype.updateOptions = function (newOptions) {\n        var _this = this;\n        Object.keys(newOptions).forEach(function (key) {\n            var value = newOptions[key];\n            if (value !== void 0) {\n                _this.options[key] = value;\n            }\n        });\n        this.updatePolling();\n        return this;\n    };\n    Reobserver.prototype.stop = function () {\n        if (this.concast) {\n            this.concast.removeObserver(this.observer);\n            delete this.concast;\n        }\n        if (this.pollingInfo) {\n            clearTimeout(this.pollingInfo.timeout);\n            this.options.pollInterval = 0;\n            this.updatePolling();\n        }\n    };\n    Reobserver.prototype.updatePolling = function () {\n        var _this = this;\n        var _a = this, pollingInfo = _a.pollingInfo, pollInterval = _a.options.pollInterval;\n        if (!pollInterval) {\n            if (pollingInfo) {\n                clearTimeout(pollingInfo.timeout);\n                delete this.pollingInfo;\n            }\n            return;\n        }\n        if (pollingInfo &&\n            pollingInfo.interval === pollInterval) {\n            return;\n        }\n        invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n        if (this.shouldFetch === false) {\n            return;\n        }\n        var info = pollingInfo || (this.pollingInfo = {});\n        info.interval = pollInterval;\n        var maybeFetch = function () {\n            if (_this.pollingInfo) {\n                if (_this.shouldFetch && _this.shouldFetch()) {\n                    _this.reobserve({\n                        fetchPolicy: \"network-only\",\n                    }, NetworkStatus.poll).then(poll, poll);\n                }\n                else {\n                    poll();\n                }\n            }\n            ;\n        };\n        var poll = function () {\n            var info = _this.pollingInfo;\n            if (info) {\n                clearTimeout(info.timeout);\n                info.timeout = setTimeout(maybeFetch, info.interval);\n            }\n        };\n        poll();\n    };\n    return Reobserver;\n}());\nexport { Reobserver };\n//# sourceMappingURL=Reobserver.js.map"]},"metadata":{},"sourceType":"module"}