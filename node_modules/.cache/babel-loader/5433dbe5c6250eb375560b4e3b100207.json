{"ast":null,"code":"import { isReference, isField } from '../../utilities/graphql/storeUtils.js';\nimport { DeepMerger } from '../../utilities/common/mergeDeep.js';\nvar hasOwn = Object.prototype.hasOwnProperty;\nfunction getTypenameFromStoreObject(store, objectOrReference) {\n  return isReference(objectOrReference) ? store.get(objectOrReference.__ref, \"__typename\") : objectOrReference && objectOrReference.__typename;\n}\nvar FieldNamePattern = /^[_A-Za-z0-9]+/;\nfunction fieldNameFromStoreName(storeFieldName) {\n  var match = storeFieldName.match(FieldNamePattern);\n  return match ? match[0] : storeFieldName;\n}\nfunction storeValueIsStoreObject(value) {\n  return value !== null && typeof value === \"object\" && !isReference(value) && !Array.isArray(value);\n}\nfunction isFieldValueToBeMerged(value) {\n  var field = value && value.__field;\n  return field && isField(field);\n}\nfunction makeProcessedFieldsMerger() {\n  return new DeepMerger(reconcileProcessedFields);\n}\nvar reconcileProcessedFields = function (existingObject, incomingObject, property) {\n  var existing = existingObject[property];\n  var incoming = incomingObject[property];\n  if (isFieldValueToBeMerged(existing)) {\n    existing.__value = this.merge(existing.__value, isFieldValueToBeMerged(incoming) ? incoming.__value : incoming);\n    return existing;\n  }\n  if (isFieldValueToBeMerged(incoming)) {\n    incoming.__value = this.merge(existing, incoming.__value);\n    return incoming;\n  }\n  return this.merge(existing, incoming);\n};\nexport { fieldNameFromStoreName, getTypenameFromStoreObject, hasOwn, isFieldValueToBeMerged, makeProcessedFieldsMerger, storeValueIsStoreObject };","map":{"version":3,"mappings":";;AAEU,IAACA,MAAM,GAAGC,MAAM,CAACC,SAAS,CAACC;AAC9B,SAASC,0BAA0B,CAACC,KAAK,EAAEC,iBAAiB,EAAE;EACjE,OAAOC,WAAW,CAACD,iBAAiB,CAAC,GAC/BD,KAAK,CAACG,GAAG,CAACF,iBAAiB,CAACG,KAAK,EAAE,YAAY,CAAC,GAChDH,iBAAiB,IAAIA,iBAAiB,CAACI,UAAU;AAC3D;AACA,IAAIC,gBAAgB,GAAG,gBAAgB;AAChC,SAASC,sBAAsB,CAACC,cAAc,EAAE;EACnD,IAAIC,KAAK,GAAGD,cAAc,CAACC,KAAK,CAACH,gBAAgB,CAAC;EAClD,OAAOG,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC,GAAGD,cAAc;AAC5C;AACO,SAASE,uBAAuB,CAACC,KAAK,EAAE;EAC3C,OAAOA,KAAK,KAAK,IAAI,IACjB,OAAOA,KAAK,KAAK,QAAQ,IACzB,CAACT,WAAW,CAACS,KAAK,CAAC,IACnB,CAACC,KAAK,CAACC,OAAO,CAACF,KAAK,CAAC;AAC7B;AACO,SAASG,sBAAsB,CAACH,KAAK,EAAE;EAC1C,IAAII,KAAK,GAAGJ,KAAK,IAAIA,KAAK,CAACK,OAAO;EAClC,OAAOD,KAAK,IAAIE,OAAO,CAACF,KAAK,CAAC;AAClC;AACO,SAASG,yBAAyB,GAAG;EACxC,OAAO,IAAIC,UAAU,CAACC,wBAAwB,CAAC;AACnD;AACA,IAAIA,wBAAwB,GAAG,UAAUC,cAAc,EAAEC,cAAc,EAAEC,QAAQ,EAAE;EAC/E,IAAIC,QAAQ,GAAGH,cAAc,CAACE,QAAQ,CAAC;EACvC,IAAIE,QAAQ,GAAGH,cAAc,CAACC,QAAQ,CAAC;EACvC,IAAIT,sBAAsB,CAACU,QAAQ,CAAC,EAAE;IAClCA,QAAQ,CAACE,OAAO,GAAG,IAAI,CAACC,KAAK,CAACH,QAAQ,CAACE,OAAO,EAAEZ,sBAAsB,CAACW,QAAQ,CAAC,GAC1EA,QAAQ,CAACC,OAAO,GAChBD,QAAQ,CAAC;IACf,OAAOD,QAAQ;EACvB;EACI,IAAIV,sBAAsB,CAACW,QAAQ,CAAC,EAAE;IAClCA,QAAQ,CAACC,OAAO,GAAG,IAAI,CAACC,KAAK,CAACH,QAAQ,EAAEC,QAAQ,CAACC,OAAO,CAAC;IACzD,OAAOD,QAAQ;EACvB;EACI,OAAO,IAAI,CAACE,KAAK,CAACH,QAAQ,EAAEC,QAAQ,CAAC;AACzC,CAAC","names":["hasOwn","Object","prototype","hasOwnProperty","getTypenameFromStoreObject","store","objectOrReference","isReference","get","__ref","__typename","FieldNamePattern","fieldNameFromStoreName","storeFieldName","match","storeValueIsStoreObject","value","Array","isArray","isFieldValueToBeMerged","field","__field","isField","makeProcessedFieldsMerger","DeepMerger","reconcileProcessedFields","existingObject","incomingObject","property","existing","incoming","__value","merge"],"sources":["helpers.js"],"sourcesContent":["import { isReference, isField } from '../../utilities/graphql/storeUtils';\nimport { DeepMerger } from '../../utilities/common/mergeDeep';\nexport var hasOwn = Object.prototype.hasOwnProperty;\nexport function getTypenameFromStoreObject(store, objectOrReference) {\n    return isReference(objectOrReference)\n        ? store.get(objectOrReference.__ref, \"__typename\")\n        : objectOrReference && objectOrReference.__typename;\n}\nvar FieldNamePattern = /^[_A-Za-z0-9]+/;\nexport function fieldNameFromStoreName(storeFieldName) {\n    var match = storeFieldName.match(FieldNamePattern);\n    return match ? match[0] : storeFieldName;\n}\nexport function storeValueIsStoreObject(value) {\n    return value !== null &&\n        typeof value === \"object\" &&\n        !isReference(value) &&\n        !Array.isArray(value);\n}\nexport function isFieldValueToBeMerged(value) {\n    var field = value && value.__field;\n    return field && isField(field);\n}\nexport function makeProcessedFieldsMerger() {\n    return new DeepMerger(reconcileProcessedFields);\n}\nvar reconcileProcessedFields = function (existingObject, incomingObject, property) {\n    var existing = existingObject[property];\n    var incoming = incomingObject[property];\n    if (isFieldValueToBeMerged(existing)) {\n        existing.__value = this.merge(existing.__value, isFieldValueToBeMerged(incoming)\n            ? incoming.__value\n            : incoming);\n        return existing;\n    }\n    if (isFieldValueToBeMerged(incoming)) {\n        incoming.__value = this.merge(existing, incoming.__value);\n        return incoming;\n    }\n    return this.merge(existing, incoming);\n};\n//# sourceMappingURL=helpers.js.map"]},"metadata":{},"sourceType":"module"}