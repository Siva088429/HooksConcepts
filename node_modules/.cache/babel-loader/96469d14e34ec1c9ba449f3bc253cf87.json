{"ast":null,"code":"import { __assign } from 'tslib';\nimport { useContext, useState, useRef, useEffect } from 'react';\nimport { getApolloContext } from '../context/ApolloContext.js';\nimport { SubscriptionData } from '../data/SubscriptionData.js';\nfunction useSubscription(subscription, options) {\n  var context = useContext(getApolloContext());\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    subscription: subscription\n  }) : {\n    subscription: subscription\n  };\n  var _a = useState({\n      loading: !updatedOptions.skip,\n      error: undefined,\n      data: undefined\n    }),\n    result = _a[0],\n    setResult = _a[1];\n  var subscriptionDataRef = useRef();\n  function getSubscriptionDataRef() {\n    if (!subscriptionDataRef.current) {\n      subscriptionDataRef.current = new SubscriptionData({\n        options: updatedOptions,\n        context: context,\n        setResult: setResult\n      });\n    }\n    return subscriptionDataRef.current;\n  }\n  var subscriptionData = getSubscriptionDataRef();\n  subscriptionData.setOptions(updatedOptions, true);\n  subscriptionData.context = context;\n  useEffect(function () {\n    return subscriptionData.afterExecute();\n  });\n  useEffect(function () {\n    return subscriptionData.cleanup.bind(subscriptionData);\n  }, []);\n  return subscriptionData.execute(result);\n}\nexport { useSubscription };","map":{"version":3,"mappings":";;;;AAIO,SAASA,eAAe,CAACC,YAAY,EAAEC,OAAO,EAAE;EACnD,IAAIC,OAAO,GAAGC,UAAU,CAACC,gBAAgB,EAAE,CAAC;EAC5C,IAAIC,cAAc,GAAGJ,OAAO,GACtBK,QAAQ,CAACA,QAAQ,CAAC,EAAE,EAAEL,OAAO,CAAC,EAAE;IAAED,YAAY,EAAEA;EAAY,CAAE,CAAC,GAAG;IAAEA,YAAY,EAAEA;EAAY,CAAE;EACtG,IAAIO,EAAE,GAAGC,QAAQ,CAAC;MACdC,OAAO,EAAE,CAACJ,cAAc,CAACK,IAAI;MAC7BC,KAAK,EAAEC,SAAS;MAChBC,IAAI,EAAED;IACd,CAAK,CAAC;IAAEE,MAAM,GAAGP,EAAE,CAAC,CAAC,CAAC;IAAEQ,SAAS,GAAGR,EAAE,CAAC,CAAC,CAAC;EACrC,IAAIS,mBAAmB,GAAGC,MAAM,EAAE;EAClC,SAASC,sBAAsB,GAAG;IAC9B,IAAI,CAACF,mBAAmB,CAACG,OAAO,EAAE;MAC9BH,mBAAmB,CAACG,OAAO,GAAG,IAAIC,gBAAgB,CAAC;QAC/CnB,OAAO,EAAEI,cAAc;QACvBH,OAAO,EAAEA,OAAO;QAChBa,SAAS,EAAEA;MAC3B,CAAa,CAAC;IACd;IACQ,OAAOC,mBAAmB,CAACG,OAAO;EAC1C;EACI,IAAIE,gBAAgB,GAAGH,sBAAsB,EAAE;EAC/CG,gBAAgB,CAACC,UAAU,CAACjB,cAAc,EAAE,IAAI,CAAC;EACjDgB,gBAAgB,CAACnB,OAAO,GAAGA,OAAO;EAClCqB,SAAS,CAAC,YAAY;IAAE,OAAOF,gBAAgB,CAACG,YAAY,EAAE;EAAC,CAAE,CAAC;EAClED,SAAS,CAAC,YAAY;IAAE,OAAOF,gBAAgB,CAACI,OAAO,CAACC,IAAI,CAACL,gBAAgB,CAAC;EAAC,CAAE,EAAE,EAAE,CAAC;EACtF,OAAOA,gBAAgB,CAACM,OAAO,CAACb,MAAM,CAAC;AAC3C","names":["useSubscription","subscription","options","context","useContext","getApolloContext","updatedOptions","__assign","_a","useState","loading","skip","error","undefined","data","result","setResult","subscriptionDataRef","useRef","getSubscriptionDataRef","current","SubscriptionData","subscriptionData","setOptions","useEffect","afterExecute","cleanup","bind","execute"],"sources":["useSubscription.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { useContext, useState, useRef, useEffect } from 'react';\nimport { SubscriptionData } from '../data/SubscriptionData';\nimport { getApolloContext } from '../context/ApolloContext';\nexport function useSubscription(subscription, options) {\n    var context = useContext(getApolloContext());\n    var updatedOptions = options\n        ? __assign(__assign({}, options), { subscription: subscription }) : { subscription: subscription };\n    var _a = useState({\n        loading: !updatedOptions.skip,\n        error: undefined,\n        data: undefined\n    }), result = _a[0], setResult = _a[1];\n    var subscriptionDataRef = useRef();\n    function getSubscriptionDataRef() {\n        if (!subscriptionDataRef.current) {\n            subscriptionDataRef.current = new SubscriptionData({\n                options: updatedOptions,\n                context: context,\n                setResult: setResult\n            });\n        }\n        return subscriptionDataRef.current;\n    }\n    var subscriptionData = getSubscriptionDataRef();\n    subscriptionData.setOptions(updatedOptions, true);\n    subscriptionData.context = context;\n    useEffect(function () { return subscriptionData.afterExecute(); });\n    useEffect(function () { return subscriptionData.cleanup.bind(subscriptionData); }, []);\n    return subscriptionData.execute(result);\n}\n//# sourceMappingURL=useSubscription.js.map"]},"metadata":{},"sourceType":"module"}