{"ast":null,"code":"import { invariant } from 'ts-invariant';\nvar DocumentType;\n(function (DocumentType) {\n  DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n  DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n  DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nfunction operationName(type) {\n  var name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\nfunction parser(document) {\n  var cached = cache.get(document);\n  if (cached) return cached;\n  var variables, type, name;\n  process.env.NODE_ENV === \"production\" ? invariant(!!document && !!document.kind, 9) : invariant(!!document && !!document.kind, \"Argument of \" + document + \" passed to parser was not a valid GraphQL \" + \"DocumentNode. You may need to use 'graphql-tag' or another method \" + \"to convert your operation into a document\");\n  var fragments = document.definitions.filter(function (x) {\n    return x.kind === 'FragmentDefinition';\n  });\n  var queries = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'query';\n  });\n  var mutations = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'mutation';\n  });\n  var subscriptions = document.definitions.filter(function (x) {\n    return x.kind === 'OperationDefinition' && x.operation === 'subscription';\n  });\n  process.env.NODE_ENV === \"production\" ? invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, 10) : invariant(!fragments.length || queries.length || mutations.length || subscriptions.length, \"Passing only a fragment to 'graphql' is not yet supported. \" + \"You must include a query, subscription or mutation as well\");\n  process.env.NODE_ENV === \"production\" ? invariant(queries.length + mutations.length + subscriptions.length <= 1, 11) : invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" + (document + \" had \" + queries.length + \" queries, \" + subscriptions.length + \" \") + (\"subscriptions and \" + mutations.length + \" mutations. \") + \"You can use 'compose' to join multiple operation types to a component\");\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n  var definitions = queries.length ? queries : mutations.length ? mutations : subscriptions;\n  process.env.NODE_ENV === \"production\" ? invariant(definitions.length === 1, 12) : invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \" + document + \" had \" + (definitions.length + \" definitions. \") + \"You can use 'compose' to join multiple operation types to a component\");\n  var definition = definitions[0];\n  variables = definition.variableDefinitions || [];\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data';\n  }\n  var payload = {\n    name: name,\n    type: type,\n    variables: variables\n  };\n  cache.set(document, payload);\n  return payload;\n}\nexport { DocumentType, operationName, parser };","map":{"version":3,"mappings":"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","names":["DocumentType","cache","Map","operationName","type","name","Query","Mutation","Subscription","parser","document","cached","get","variables","process","env","NODE_ENV","invariant","kind","fragments","definitions","filter","x","queries","operation","mutations","subscriptions","length","definition","variableDefinitions","value","payload","set"],"sources":["parser.js"],"sourcesContent":["import { invariant } from 'ts-invariant';\nexport var DocumentType;\n(function (DocumentType) {\n    DocumentType[DocumentType[\"Query\"] = 0] = \"Query\";\n    DocumentType[DocumentType[\"Mutation\"] = 1] = \"Mutation\";\n    DocumentType[DocumentType[\"Subscription\"] = 2] = \"Subscription\";\n})(DocumentType || (DocumentType = {}));\nvar cache = new Map();\nexport function operationName(type) {\n    var name;\n    switch (type) {\n        case DocumentType.Query:\n            name = 'Query';\n            break;\n        case DocumentType.Mutation:\n            name = 'Mutation';\n            break;\n        case DocumentType.Subscription:\n            name = 'Subscription';\n            break;\n    }\n    return name;\n}\nexport function parser(document) {\n    var cached = cache.get(document);\n    if (cached)\n        return cached;\n    var variables, type, name;\n    invariant(!!document && !!document.kind, \"Argument of \" + document + \" passed to parser was not a valid GraphQL \" +\n        \"DocumentNode. You may need to use 'graphql-tag' or another method \" +\n        \"to convert your operation into a document\");\n    var fragments = document.definitions.filter(function (x) { return x.kind === 'FragmentDefinition'; });\n    var queries = document.definitions.filter(function (x) {\n        return x.kind === 'OperationDefinition' && x.operation === 'query';\n    });\n    var mutations = document.definitions.filter(function (x) {\n        return x.kind === 'OperationDefinition' && x.operation === 'mutation';\n    });\n    var subscriptions = document.definitions.filter(function (x) {\n        return x.kind === 'OperationDefinition' && x.operation === 'subscription';\n    });\n    invariant(!fragments.length ||\n        (queries.length || mutations.length || subscriptions.length), \"Passing only a fragment to 'graphql' is not yet supported. \" +\n        \"You must include a query, subscription or mutation as well\");\n    invariant(queries.length + mutations.length + subscriptions.length <= 1, \"react-apollo only supports a query, subscription, or a mutation per HOC. \" +\n        (document + \" had \" + queries.length + \" queries, \" + subscriptions.length + \" \") +\n        (\"subscriptions and \" + mutations.length + \" mutations. \") +\n        \"You can use 'compose' to join multiple operation types to a component\");\n    type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n    if (!queries.length && !mutations.length)\n        type = DocumentType.Subscription;\n    var definitions = queries.length\n        ? queries\n        : mutations.length\n            ? mutations\n            : subscriptions;\n    invariant(definitions.length === 1, \"react-apollo only supports one definition per HOC. \" + document + \" had \" +\n        (definitions.length + \" definitions. \") +\n        \"You can use 'compose' to join multiple operation types to a component\");\n    var definition = definitions[0];\n    variables = definition.variableDefinitions || [];\n    if (definition.name && definition.name.kind === 'Name') {\n        name = definition.name.value;\n    }\n    else {\n        name = 'data';\n    }\n    var payload = { name: name, type: type, variables: variables };\n    cache.set(document, payload);\n    return payload;\n}\n//# sourceMappingURL=parser.js.map"]},"metadata":{},"sourceType":"module"}