{"ast":null,"code":"import { __extends, __assign } from 'tslib';\nimport { equal } from '@wry/equality';\nimport { ApolloError } from '../../errors/ApolloError.js';\nimport { NetworkStatus } from '../../core/networkStatus.js';\nimport { DocumentType } from '../parser/parser.js';\nimport { OperationData } from './OperationData.js';\nvar QueryData = function (_super) {\n  __extends(QueryData, _super);\n  function QueryData(_a) {\n    var options = _a.options,\n      context = _a.context,\n      onNewData = _a.onNewData;\n    var _this = _super.call(this, options, context) || this;\n    _this.previousData = {};\n    _this.runLazy = false;\n    _this.runLazyQuery = function (options) {\n      _this.cleanup();\n      _this.runLazy = true;\n      _this.lazyOptions = options;\n      _this.onNewData();\n    };\n    _this.getQueryResult = function () {\n      var result = _this.observableQueryFields();\n      var options = _this.getOptions();\n      if (options.skip) {\n        result = __assign(__assign({}, result), {\n          data: undefined,\n          error: undefined,\n          loading: false,\n          called: true\n        });\n      } else if (_this.currentObservable) {\n        var currentResult = _this.currentObservable.getCurrentResult();\n        var loading = currentResult.loading,\n          partial = currentResult.partial,\n          networkStatus = currentResult.networkStatus,\n          errors = currentResult.errors;\n        var error = currentResult.error,\n          data = currentResult.data;\n        if (errors && errors.length > 0) {\n          error = new ApolloError({\n            graphQLErrors: errors\n          });\n        }\n        result = __assign(__assign({}, result), {\n          loading: loading,\n          networkStatus: networkStatus,\n          error: error,\n          called: true\n        });\n        if (loading) {\n          var previousData = _this.previousData.result && _this.previousData.result.data;\n          result.data = previousData && data ? __assign(__assign({}, previousData), data) : previousData || data;\n        } else if (error) {\n          Object.assign(result, {\n            data: (_this.currentObservable.getLastResult() || {}).data\n          });\n        } else {\n          var fetchPolicy = _this.currentObservable.options.fetchPolicy;\n          var partialRefetch = options.partialRefetch;\n          if (partialRefetch && partial && (!data || Object.keys(data).length === 0) && fetchPolicy !== 'cache-only') {\n            Object.assign(result, {\n              loading: true,\n              networkStatus: NetworkStatus.loading\n            });\n            result.refetch();\n            return result;\n          }\n          result.data = data;\n        }\n      }\n      result.client = _this.client;\n      _this.setOptions(options, true);\n      _this.previousData.loading = _this.previousData.result && _this.previousData.result.loading || false;\n      _this.previousData.result = result;\n      _this.currentObservable && _this.currentObservable.resetQueryStoreErrors();\n      return result;\n    };\n    _this.obsRefetch = function (variables) {\n      return _this.currentObservable.refetch(variables);\n    };\n    _this.obsFetchMore = function (fetchMoreOptions) {\n      return _this.currentObservable.fetchMore(fetchMoreOptions);\n    };\n    _this.obsUpdateQuery = function (mapFn) {\n      return _this.currentObservable.updateQuery(mapFn);\n    };\n    _this.obsStartPolling = function (pollInterval) {\n      var _a;\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.startPolling(pollInterval);\n    };\n    _this.obsStopPolling = function () {\n      var _a;\n      (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.stopPolling();\n    };\n    _this.obsSubscribeToMore = function (options) {\n      return _this.currentObservable.subscribeToMore(options);\n    };\n    _this.onNewData = onNewData;\n    return _this;\n  }\n  QueryData.prototype.execute = function () {\n    this.refreshClient();\n    var _a = this.getOptions(),\n      skip = _a.skip,\n      query = _a.query;\n    if (skip || query !== this.previousData.query) {\n      this.removeQuerySubscription();\n      this.previousData.query = query;\n    }\n    this.updateObservableQuery();\n    if (this.isMounted) this.startQuerySubscription();\n    return this.getExecuteSsrResult() || this.getExecuteResult();\n  };\n  QueryData.prototype.executeLazy = function () {\n    return !this.runLazy ? [this.runLazyQuery, {\n      loading: false,\n      networkStatus: NetworkStatus.ready,\n      called: false,\n      data: undefined\n    }] : [this.runLazyQuery, this.execute()];\n  };\n  QueryData.prototype.fetchData = function () {\n    var _this = this;\n    var options = this.getOptions();\n    if (options.skip || options.ssr === false) return false;\n    return new Promise(function (resolve) {\n      return _this.startQuerySubscription(resolve);\n    });\n  };\n  QueryData.prototype.afterExecute = function (_a) {\n    var _b = (_a === void 0 ? {} : _a).lazy,\n      lazy = _b === void 0 ? false : _b;\n    this.isMounted = true;\n    if (!lazy || this.runLazy) {\n      this.handleErrorOrCompleted();\n    }\n    this.previousOptions = this.getOptions();\n    return this.unmount.bind(this);\n  };\n  QueryData.prototype.cleanup = function () {\n    this.removeQuerySubscription();\n    delete this.currentObservable;\n    delete this.previousData.result;\n  };\n  QueryData.prototype.getOptions = function () {\n    var options = _super.prototype.getOptions.call(this);\n    if (this.lazyOptions) {\n      options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n      options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n    }\n    if (this.runLazy) {\n      delete options.skip;\n    }\n    return options;\n  };\n  QueryData.prototype.ssrInitiated = function () {\n    return this.context && this.context.renderPromises;\n  };\n  QueryData.prototype.getExecuteResult = function () {\n    var result = this.getQueryResult();\n    this.startQuerySubscription();\n    return result;\n  };\n  QueryData.prototype.getExecuteSsrResult = function () {\n    var ssrDisabled = this.getOptions().ssr === false;\n    var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n    var ssrLoading = __assign({\n      loading: true,\n      networkStatus: NetworkStatus.loading,\n      called: true,\n      data: undefined,\n      stale: false,\n      client: this.client\n    }, this.observableQueryFields());\n    if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n      this.previousData.result = ssrLoading;\n      return ssrLoading;\n    }\n    var result;\n    if (this.ssrInitiated()) {\n      result = this.context.renderPromises.addQueryPromise(this, this.getQueryResult) || ssrLoading;\n    }\n    return result;\n  };\n  QueryData.prototype.prepareObservableQueryOptions = function () {\n    var options = this.getOptions();\n    this.verifyDocumentType(options.query, DocumentType.Query);\n    var displayName = options.displayName || 'Query';\n    if (this.ssrInitiated() && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options.fetchPolicy = 'cache-first';\n    }\n    return __assign(__assign({}, options), {\n      displayName: displayName,\n      context: options.context\n    });\n  };\n  QueryData.prototype.initializeObservableQuery = function () {\n    if (this.ssrInitiated()) {\n      this.currentObservable = this.context.renderPromises.getSSRObservable(this.getOptions());\n    }\n    if (!this.currentObservable) {\n      var observableQueryOptions = this.prepareObservableQueryOptions();\n      this.previousData.observableQueryOptions = __assign(__assign({}, observableQueryOptions), {\n        children: null\n      });\n      this.currentObservable = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n      if (this.ssrInitiated()) {\n        this.context.renderPromises.registerSSRObservable(this.currentObservable, observableQueryOptions);\n      }\n    }\n  };\n  QueryData.prototype.updateObservableQuery = function () {\n    if (!this.currentObservable) {\n      this.initializeObservableQuery();\n      return;\n    }\n    var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), {\n      children: null\n    });\n    if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n      this.previousData.observableQueryOptions = newObservableQueryOptions;\n      this.currentObservable.setOptions(newObservableQueryOptions).catch(function () {});\n    }\n  };\n  QueryData.prototype.startQuerySubscription = function (onNewData) {\n    var _this = this;\n    if (onNewData === void 0) {\n      onNewData = this.onNewData;\n    }\n    if (this.currentSubscription || this.getOptions().skip) return;\n    this.currentSubscription = this.currentObservable.subscribe({\n      next: function (_a) {\n        var loading = _a.loading,\n          networkStatus = _a.networkStatus,\n          data = _a.data;\n        var previousResult = _this.previousData.result;\n        if (previousResult && previousResult.loading === loading && previousResult.networkStatus === networkStatus && equal(previousResult.data, data)) {\n          return;\n        }\n        if (_this.previousOptions.skip) {\n          return;\n        }\n        onNewData();\n      },\n      error: function (error) {\n        _this.resubscribeToQuery();\n        if (!error.hasOwnProperty('graphQLErrors')) throw error;\n        var previousResult = _this.previousData.result;\n        if (previousResult && previousResult.loading || !equal(error, _this.previousData.error)) {\n          _this.previousData.error = error;\n          onNewData();\n        }\n      }\n    });\n  };\n  QueryData.prototype.resubscribeToQuery = function () {\n    this.removeQuerySubscription();\n    var currentObservable = this.currentObservable;\n    if (currentObservable) {\n      var lastError = currentObservable.getLastError();\n      var lastResult = currentObservable.getLastResult();\n      currentObservable.resetLastResults();\n      this.startQuerySubscription();\n      Object.assign(currentObservable, {\n        lastError: lastError,\n        lastResult: lastResult\n      });\n    }\n  };\n  QueryData.prototype.handleErrorOrCompleted = function () {\n    if (!this.currentObservable || !this.previousData.result) return;\n    var _a = this.previousData.result,\n      data = _a.data,\n      loading = _a.loading,\n      error = _a.error;\n    if (!loading) {\n      var _b = this.getOptions(),\n        query = _b.query,\n        variables = _b.variables,\n        onCompleted = _b.onCompleted,\n        onError = _b.onError;\n      if (this.previousOptions && !this.previousData.loading && equal(this.previousOptions.query, query) && equal(this.previousOptions.variables, variables)) {\n        return;\n      }\n      if (onCompleted && !error) {\n        onCompleted(data);\n      } else if (onError && error) {\n        onError(error);\n      }\n    }\n  };\n  QueryData.prototype.removeQuerySubscription = function () {\n    if (this.currentSubscription) {\n      this.currentSubscription.unsubscribe();\n      delete this.currentSubscription;\n    }\n  };\n  QueryData.prototype.observableQueryFields = function () {\n    var _a;\n    return {\n      variables: (_a = this.currentObservable) === null || _a === void 0 ? void 0 : _a.variables,\n      refetch: this.obsRefetch,\n      fetchMore: this.obsFetchMore,\n      updateQuery: this.obsUpdateQuery,\n      startPolling: this.obsStartPolling,\n      stopPolling: this.obsStopPolling,\n      subscribeToMore: this.obsSubscribeToMore\n    };\n  };\n  return QueryData;\n}(OperationData);\nexport { QueryData };","map":{"version":3,"mappings":"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","names":["QueryData","_super","__extends","_a","options","context","onNewData","_this","call","previousData","runLazy","runLazyQuery","cleanup","lazyOptions","getQueryResult","result","observableQueryFields","getOptions","skip","__assign","data","undefined","error","loading","called","currentObservable","currentResult","getCurrentResult","partial","networkStatus","errors","length","ApolloError","graphQLErrors","Object","assign","getLastResult","fetchPolicy","partialRefetch","keys","NetworkStatus","refetch","client","setOptions","resetQueryStoreErrors","obsRefetch","variables","obsFetchMore","fetchMoreOptions","fetchMore","obsUpdateQuery","mapFn","updateQuery","obsStartPolling","pollInterval","startPolling","obsStopPolling","stopPolling","obsSubscribeToMore","subscribeToMore","prototype","execute","refreshClient","query","removeQuerySubscription","updateObservableQuery","isMounted","startQuerySubscription","getExecuteSsrResult","getExecuteResult","executeLazy","ready","fetchData","ssr","Promise","resolve","afterExecute","_b","lazy","handleErrorOrCompleted","previousOptions","unmount","bind","ssrInitiated","renderPromises","ssrDisabled","fetchDisabled","disableNetworkFetches","ssrLoading","stale","addQueryPromise","prepareObservableQueryOptions","verifyDocumentType","DocumentType","Query","displayName","initializeObservableQuery","getSSRObservable","observableQueryOptions","children","watchQuery","registerSSRObservable","newObservableQueryOptions","equal","catch","currentSubscription","subscribe","next","previousResult","resubscribeToQuery","hasOwnProperty","lastError","getLastError","lastResult","resetLastResults","onCompleted","onError","unsubscribe","OperationData"],"sources":["QueryData.js"],"sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { ApolloError } from '../../errors/ApolloError';\nimport { NetworkStatus } from '../../core/networkStatus';\nimport { DocumentType } from '../parser/parser';\nimport { OperationData } from './OperationData';\nvar QueryData = (function (_super) {\n    __extends(QueryData, _super);\n    function QueryData(_a) {\n        var options = _a.options, context = _a.context, onNewData = _a.onNewData;\n        var _this = _super.call(this, options, context) || this;\n        _this.previousData = {};\n        _this.runLazy = false;\n        _this.runLazyQuery = function (options) {\n            _this.cleanup();\n            _this.runLazy = true;\n            _this.lazyOptions = options;\n            _this.onNewData();\n        };\n        _this.getQueryResult = function () {\n            var result = _this.observableQueryFields();\n            var options = _this.getOptions();\n            if (options.skip) {\n                result = __assign(__assign({}, result), { data: undefined, error: undefined, loading: false, called: true });\n            }\n            else if (_this.currentObservable) {\n                var currentResult = _this.currentObservable.getCurrentResult();\n                var loading = currentResult.loading, partial = currentResult.partial, networkStatus = currentResult.networkStatus, errors = currentResult.errors;\n                var error = currentResult.error, data = currentResult.data;\n                if (errors && errors.length > 0) {\n                    error = new ApolloError({ graphQLErrors: errors });\n                }\n                result = __assign(__assign({}, result), { loading: loading,\n                    networkStatus: networkStatus,\n                    error: error, called: true });\n                if (loading) {\n                    var previousData = _this.previousData.result && _this.previousData.result.data;\n                    result.data =\n                        previousData && data\n                            ? __assign(__assign({}, previousData), data) : previousData || data;\n                }\n                else if (error) {\n                    Object.assign(result, {\n                        data: (_this.currentObservable.getLastResult() || {})\n                            .data\n                    });\n                }\n                else {\n                    var fetchPolicy = _this.currentObservable.options.fetchPolicy;\n                    var partialRefetch = options.partialRefetch;\n                    if (partialRefetch &&\n                        partial &&\n                        (!data || Object.keys(data).length === 0) &&\n                        fetchPolicy !== 'cache-only') {\n                        Object.assign(result, {\n                            loading: true,\n                            networkStatus: NetworkStatus.loading\n                        });\n                        result.refetch();\n                        return result;\n                    }\n                    result.data = data;\n                }\n            }\n            result.client = _this.client;\n            _this.setOptions(options, true);\n            _this.previousData.loading =\n                _this.previousData.result && _this.previousData.result.loading || false;\n            _this.previousData.result = result;\n            _this.currentObservable && _this.currentObservable.resetQueryStoreErrors();\n            return result;\n        };\n        _this.obsRefetch = function (variables) {\n            return _this.currentObservable.refetch(variables);\n        };\n        _this.obsFetchMore = function (fetchMoreOptions) { return _this.currentObservable.fetchMore(fetchMoreOptions); };\n        _this.obsUpdateQuery = function (mapFn) { return _this.currentObservable.updateQuery(mapFn); };\n        _this.obsStartPolling = function (pollInterval) {\n            var _a;\n            (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.startPolling(pollInterval);\n        };\n        _this.obsStopPolling = function () {\n            var _a;\n            (_a = _this.currentObservable) === null || _a === void 0 ? void 0 : _a.stopPolling();\n        };\n        _this.obsSubscribeToMore = function (options) { return _this.currentObservable.subscribeToMore(options); };\n        _this.onNewData = onNewData;\n        return _this;\n    }\n    QueryData.prototype.execute = function () {\n        this.refreshClient();\n        var _a = this.getOptions(), skip = _a.skip, query = _a.query;\n        if (skip || query !== this.previousData.query) {\n            this.removeQuerySubscription();\n            this.previousData.query = query;\n        }\n        this.updateObservableQuery();\n        if (this.isMounted)\n            this.startQuerySubscription();\n        return this.getExecuteSsrResult() || this.getExecuteResult();\n    };\n    QueryData.prototype.executeLazy = function () {\n        return !this.runLazy\n            ? [\n                this.runLazyQuery,\n                {\n                    loading: false,\n                    networkStatus: NetworkStatus.ready,\n                    called: false,\n                    data: undefined\n                }\n            ]\n            : [this.runLazyQuery, this.execute()];\n    };\n    QueryData.prototype.fetchData = function () {\n        var _this = this;\n        var options = this.getOptions();\n        if (options.skip || options.ssr === false)\n            return false;\n        return new Promise(function (resolve) { return _this.startQuerySubscription(resolve); });\n    };\n    QueryData.prototype.afterExecute = function (_a) {\n        var _b = (_a === void 0 ? {} : _a).lazy, lazy = _b === void 0 ? false : _b;\n        this.isMounted = true;\n        if (!lazy || this.runLazy) {\n            this.handleErrorOrCompleted();\n        }\n        this.previousOptions = this.getOptions();\n        return this.unmount.bind(this);\n    };\n    QueryData.prototype.cleanup = function () {\n        this.removeQuerySubscription();\n        delete this.currentObservable;\n        delete this.previousData.result;\n    };\n    QueryData.prototype.getOptions = function () {\n        var options = _super.prototype.getOptions.call(this);\n        if (this.lazyOptions) {\n            options.variables = __assign(__assign({}, options.variables), this.lazyOptions.variables);\n            options.context = __assign(__assign({}, options.context), this.lazyOptions.context);\n        }\n        if (this.runLazy) {\n            delete options.skip;\n        }\n        return options;\n    };\n    QueryData.prototype.ssrInitiated = function () {\n        return this.context && this.context.renderPromises;\n    };\n    QueryData.prototype.getExecuteResult = function () {\n        var result = this.getQueryResult();\n        this.startQuerySubscription();\n        return result;\n    };\n    ;\n    QueryData.prototype.getExecuteSsrResult = function () {\n        var ssrDisabled = this.getOptions().ssr === false;\n        var fetchDisabled = this.refreshClient().client.disableNetworkFetches;\n        var ssrLoading = __assign({ loading: true, networkStatus: NetworkStatus.loading, called: true, data: undefined, stale: false, client: this.client }, this.observableQueryFields());\n        if (ssrDisabled && (this.ssrInitiated() || fetchDisabled)) {\n            this.previousData.result = ssrLoading;\n            return ssrLoading;\n        }\n        var result;\n        if (this.ssrInitiated()) {\n            result =\n                this.context.renderPromises.addQueryPromise(this, this.getQueryResult) || ssrLoading;\n        }\n        return result;\n    };\n    QueryData.prototype.prepareObservableQueryOptions = function () {\n        var options = this.getOptions();\n        this.verifyDocumentType(options.query, DocumentType.Query);\n        var displayName = options.displayName || 'Query';\n        if (this.ssrInitiated() &&\n            (options.fetchPolicy === 'network-only' ||\n                options.fetchPolicy === 'cache-and-network')) {\n            options.fetchPolicy = 'cache-first';\n        }\n        return __assign(__assign({}, options), { displayName: displayName, context: options.context });\n    };\n    QueryData.prototype.initializeObservableQuery = function () {\n        if (this.ssrInitiated()) {\n            this.currentObservable = this.context.renderPromises.getSSRObservable(this.getOptions());\n        }\n        if (!this.currentObservable) {\n            var observableQueryOptions = this.prepareObservableQueryOptions();\n            this.previousData.observableQueryOptions = __assign(__assign({}, observableQueryOptions), { children: null });\n            this.currentObservable = this.refreshClient().client.watchQuery(__assign({}, observableQueryOptions));\n            if (this.ssrInitiated()) {\n                this.context.renderPromises.registerSSRObservable(this.currentObservable, observableQueryOptions);\n            }\n        }\n    };\n    QueryData.prototype.updateObservableQuery = function () {\n        if (!this.currentObservable) {\n            this.initializeObservableQuery();\n            return;\n        }\n        var newObservableQueryOptions = __assign(__assign({}, this.prepareObservableQueryOptions()), { children: null });\n        if (!equal(newObservableQueryOptions, this.previousData.observableQueryOptions)) {\n            this.previousData.observableQueryOptions = newObservableQueryOptions;\n            this.currentObservable\n                .setOptions(newObservableQueryOptions)\n                .catch(function () { });\n        }\n    };\n    QueryData.prototype.startQuerySubscription = function (onNewData) {\n        var _this = this;\n        if (onNewData === void 0) { onNewData = this.onNewData; }\n        if (this.currentSubscription || this.getOptions().skip)\n            return;\n        this.currentSubscription = this.currentObservable.subscribe({\n            next: function (_a) {\n                var loading = _a.loading, networkStatus = _a.networkStatus, data = _a.data;\n                var previousResult = _this.previousData.result;\n                if (previousResult &&\n                    previousResult.loading === loading &&\n                    previousResult.networkStatus === networkStatus &&\n                    equal(previousResult.data, data)) {\n                    return;\n                }\n                if (_this.previousOptions.skip) {\n                    return;\n                }\n                onNewData();\n            },\n            error: function (error) {\n                _this.resubscribeToQuery();\n                if (!error.hasOwnProperty('graphQLErrors'))\n                    throw error;\n                var previousResult = _this.previousData.result;\n                if ((previousResult && previousResult.loading) ||\n                    !equal(error, _this.previousData.error)) {\n                    _this.previousData.error = error;\n                    onNewData();\n                }\n            }\n        });\n    };\n    QueryData.prototype.resubscribeToQuery = function () {\n        this.removeQuerySubscription();\n        var currentObservable = this.currentObservable;\n        if (currentObservable) {\n            var lastError = currentObservable.getLastError();\n            var lastResult = currentObservable.getLastResult();\n            currentObservable.resetLastResults();\n            this.startQuerySubscription();\n            Object.assign(currentObservable, {\n                lastError: lastError,\n                lastResult: lastResult\n            });\n        }\n    };\n    QueryData.prototype.handleErrorOrCompleted = function () {\n        if (!this.currentObservable || !this.previousData.result)\n            return;\n        var _a = this.previousData.result, data = _a.data, loading = _a.loading, error = _a.error;\n        if (!loading) {\n            var _b = this.getOptions(), query = _b.query, variables = _b.variables, onCompleted = _b.onCompleted, onError = _b.onError;\n            if (this.previousOptions &&\n                !this.previousData.loading &&\n                equal(this.previousOptions.query, query) &&\n                equal(this.previousOptions.variables, variables)) {\n                return;\n            }\n            if (onCompleted && !error) {\n                onCompleted(data);\n            }\n            else if (onError && error) {\n                onError(error);\n            }\n        }\n    };\n    QueryData.prototype.removeQuerySubscription = function () {\n        if (this.currentSubscription) {\n            this.currentSubscription.unsubscribe();\n            delete this.currentSubscription;\n        }\n    };\n    QueryData.prototype.observableQueryFields = function () {\n        var _a;\n        return {\n            variables: (_a = this.currentObservable) === null || _a === void 0 ? void 0 : _a.variables,\n            refetch: this.obsRefetch,\n            fetchMore: this.obsFetchMore,\n            updateQuery: this.obsUpdateQuery,\n            startPolling: this.obsStartPolling,\n            stopPolling: this.obsStopPolling,\n            subscribeToMore: this.obsSubscribeToMore\n        };\n    };\n    return QueryData;\n}(OperationData));\nexport { QueryData };\n//# sourceMappingURL=QueryData.js.map"]},"metadata":{},"sourceType":"module"}