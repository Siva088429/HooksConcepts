{"ast":null,"code":"import { __assign, __spreadArrays } from 'tslib';\nimport { InvariantError, invariant } from 'ts-invariant';\nfunction getFragmentQueryDocument(document, fragmentName) {\n  var actualFragmentName = fragmentName;\n  var fragments = [];\n  document.definitions.forEach(function (definition) {\n    if (definition.kind === 'OperationDefinition') {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(41) : new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" + 'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n    }\n    if (definition.kind === 'FragmentDefinition') {\n      fragments.push(definition);\n    }\n  });\n  if (typeof actualFragmentName === 'undefined') {\n    process.env.NODE_ENV === \"production\" ? invariant(fragments.length === 1, 42) : invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n    actualFragmentName = fragments[0].name.value;\n  }\n  var query = __assign(__assign({}, document), {\n    definitions: __spreadArrays([{\n      kind: 'OperationDefinition',\n      operation: 'query',\n      selectionSet: {\n        kind: 'SelectionSet',\n        selections: [{\n          kind: 'FragmentSpread',\n          name: {\n            kind: 'Name',\n            value: actualFragmentName\n          }\n        }]\n      }\n    }], document.definitions)\n  });\n  return query;\n}\nfunction createFragmentMap(fragments) {\n  if (fragments === void 0) {\n    fragments = [];\n  }\n  var symTable = {};\n  fragments.forEach(function (fragment) {\n    symTable[fragment.name.value] = fragment;\n  });\n  return symTable;\n}\nfunction getFragmentFromSelection(selection, fragmentMap) {\n  switch (selection.kind) {\n    case 'InlineFragment':\n      return selection;\n    case 'FragmentSpread':\n      {\n        var fragment = fragmentMap && fragmentMap[selection.name.value];\n        process.env.NODE_ENV === \"production\" ? invariant(fragment, 43) : invariant(fragment, \"No fragment named \" + selection.name.value + \".\");\n        return fragment;\n      }\n    default:\n      return null;\n  }\n}\nexport { createFragmentMap, getFragmentFromSelection, getFragmentQueryDocument };","map":{"version":3,"mappings":";;AAEO,SAASA,wBAAwB,CAACC,QAAQ,EAAEC,YAAY,EAAE;EAC7D,IAAIC,kBAAkB,GAAGD,YAAY;EACrC,IAAIE,SAAS,GAAG,EAAE;EAClBH,QAAQ,CAACI,WAAW,CAACC,OAAO,CAAC,UAAUC,UAAU,EAAE;IAC/C,IAAIA,UAAU,CAACC,IAAI,KAAK,qBAAqB,EAAE;MAC3C,MAAMC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG,IAAIC,cAAc,CAAC,EAAE,CAAC,GAAG,IAAIA,cAAc,CAAC,UAAU,GAAGL,UAAU,CAACM,SAAS,GAAG,YAAY,IAAIN,UAAU,CAACO,IAAI,GAAG,UAAU,GAAGP,UAAU,CAACO,IAAI,CAACC,KAAK,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,GACjN,yFAAyF,CAAC;IAC1G;IACQ,IAAIR,UAAU,CAACC,IAAI,KAAK,oBAAoB,EAAE;MAC1CJ,SAAS,CAACY,IAAI,CAACT,UAAU,CAAC;IACtC;EACA,CAAK,CAAC;EACF,IAAI,OAAOJ,kBAAkB,KAAK,WAAW,EAAE;IAC3CM,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGM,SAAS,CAACb,SAAS,CAACc,MAAM,KAAK,CAAC,EAAE,EAAE,CAAC,GAAGD,SAAS,CAACb,SAAS,CAACc,MAAM,KAAK,CAAC,EAAE,QAAQ,GAAGd,SAAS,CAACc,MAAM,GAAG,mFAAmF,CAAC;IACpOf,kBAAkB,GAAGC,SAAS,CAAC,CAAC,CAAC,CAACU,IAAI,CAACC,KAAK;EACpD;EACI,IAAII,KAAK,GAAGC,QAAQ,CAACA,QAAQ,CAAC,EAAE,EAAEnB,QAAQ,CAAC,EAAE;IAAEI,WAAW,EAAEgB,cAAc,CAAC,CACnE;MACIb,IAAI,EAAE,qBAAqB;MAC3BK,SAAS,EAAE,OAAO;MAClBS,YAAY,EAAE;QACVd,IAAI,EAAE,cAAc;QACpBe,UAAU,EAAE,CACR;UACIf,IAAI,EAAE,gBAAgB;UACtBM,IAAI,EAAE;YACFN,IAAI,EAAE,MAAM;YACZO,KAAK,EAAEZ;UACvC;QACA,CAAyB;MAEzB;IACA,CAAa,CACJ,EAAEF,QAAQ,CAACI,WAAW;EAAC,CAAE,CAAC;EAC/B,OAAOc,KAAK;AAChB;AACO,SAASK,iBAAiB,CAACpB,SAAS,EAAE;EACzC,IAAIA,SAAS,KAAK,KAAK,CAAC,EAAE;IAAEA,SAAS,GAAG,EAAE;EAAC;EAC3C,IAAIqB,QAAQ,GAAG,EAAE;EACjBrB,SAAS,CAACE,OAAO,CAAC,UAAUoB,QAAQ,EAAE;IAClCD,QAAQ,CAACC,QAAQ,CAACZ,IAAI,CAACC,KAAK,CAAC,GAAGW,QAAQ;EAChD,CAAK,CAAC;EACF,OAAOD,QAAQ;AACnB;AACO,SAASE,wBAAwB,CAACC,SAAS,EAAEC,WAAW,EAAE;EAC7D,QAAQD,SAAS,CAACpB,IAAI;IAClB,KAAK,gBAAgB;MACjB,OAAOoB,SAAS;IACpB,KAAK,gBAAgB;MAAE;QACnB,IAAIF,QAAQ,GAAGG,WAAW,IAAIA,WAAW,CAACD,SAAS,CAACd,IAAI,CAACC,KAAK,CAAC;QAC/DN,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGM,SAAS,CAACS,QAAQ,EAAE,EAAE,CAAC,GAAGT,SAAS,CAACS,QAAQ,EAAE,oBAAoB,GAAGE,SAAS,CAACd,IAAI,CAACC,KAAK,GAAG,GAAG,CAAC;QACxI,OAAOW,QAAQ;MAC3B;IACQ;MACI,OAAO,IAAI;EAAC;AAExB","names":["getFragmentQueryDocument","document","fragmentName","actualFragmentName","fragments","definitions","forEach","definition","kind","process","env","NODE_ENV","InvariantError","operation","name","value","push","invariant","length","query","__assign","__spreadArrays","selectionSet","selections","createFragmentMap","symTable","fragment","getFragmentFromSelection","selection","fragmentMap"],"sources":["fragments.js"],"sourcesContent":["import { __assign, __spreadArrays } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nexport function getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            throw new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" +\n                'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n        }\n        if (definition.kind === 'FragmentDefinition') {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === 'undefined') {\n        invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = __assign(__assign({}, document), { definitions: __spreadArrays([\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                        {\n                            kind: 'FragmentSpread',\n                            name: {\n                                kind: 'Name',\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ], document.definitions) });\n    return query;\n}\nexport function createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nexport function getFragmentFromSelection(selection, fragmentMap) {\n    switch (selection.kind) {\n        case 'InlineFragment':\n            return selection;\n        case 'FragmentSpread': {\n            var fragment = fragmentMap && fragmentMap[selection.name.value];\n            invariant(fragment, \"No fragment named \" + selection.name.value + \".\");\n            return fragment;\n        }\n        default:\n            return null;\n    }\n}\n//# sourceMappingURL=fragments.js.map"]},"metadata":{},"sourceType":"module"}