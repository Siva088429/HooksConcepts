{"ast":null,"code":"import { invariant } from 'ts-invariant';\nimport { equal } from '@wry/equality';\nimport { parser, operationName } from '../parser/parser.js';\nvar OperationData = function () {\n  function OperationData(options, context) {\n    this.isMounted = false;\n    this.previousOptions = {};\n    this.context = {};\n    this.options = {};\n    this.options = options || {};\n    this.context = context || {};\n  }\n  OperationData.prototype.getOptions = function () {\n    return this.options;\n  };\n  OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n    if (storePrevious === void 0) {\n      storePrevious = false;\n    }\n    if (storePrevious && !equal(this.options, newOptions)) {\n      this.previousOptions = this.options;\n    }\n    this.options = newOptions;\n  };\n  OperationData.prototype.unmount = function () {\n    this.isMounted = false;\n  };\n  OperationData.prototype.refreshClient = function () {\n    var client = this.options && this.options.client || this.context && this.context.client;\n    process.env.NODE_ENV === \"production\" ? invariant(!!client, 44) : invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' + 'Wrap the root component in an <ApolloProvider>, or pass an ' + 'ApolloClient instance in via options.');\n    var isNew = false;\n    if (client !== this.client) {\n      isNew = true;\n      this.client = client;\n      this.cleanup();\n    }\n    return {\n      client: this.client,\n      isNew: isNew\n    };\n  };\n  OperationData.prototype.verifyDocumentType = function (document, type) {\n    var operation = parser(document);\n    var requiredOperationName = operationName(type);\n    var usedOperationName = operationName(operation.type);\n    process.env.NODE_ENV === \"production\" ? invariant(operation.type === type, 45) : invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" + (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n  };\n  return OperationData;\n}();\nexport { OperationData };","map":{"version":3,"mappings":";;;AAGG,IAACA,aAAa,GAAI,YAAY;EAC7B,SAASA,aAAa,CAACC,OAAO,EAAEC,OAAO,EAAE;IACrC,IAAI,CAACC,SAAS,GAAG,KAAK;IACtB,IAAI,CAACC,eAAe,GAAG,EAAE;IACzB,IAAI,CAACF,OAAO,GAAG,EAAE;IACjB,IAAI,CAACD,OAAO,GAAG,EAAE;IACjB,IAAI,CAACA,OAAO,GAAGA,OAAO,IAAI,EAAE;IAC5B,IAAI,CAACC,OAAO,GAAGA,OAAO,IAAI,EAAE;EACpC;EACIF,aAAa,CAACK,SAAS,CAACC,UAAU,GAAG,YAAY;IAC7C,OAAO,IAAI,CAACL,OAAO;EAC3B,CAAK;EACDD,aAAa,CAACK,SAAS,CAACE,UAAU,GAAG,UAAUC,UAAU,EAAEC,aAAa,EAAE;IACtE,IAAIA,aAAa,KAAK,KAAK,CAAC,EAAE;MAAEA,aAAa,GAAG,KAAK;IAAC;IACtD,IAAIA,aAAa,IAAI,CAACC,KAAK,CAAC,IAAI,CAACT,OAAO,EAAEO,UAAU,CAAC,EAAE;MACnD,IAAI,CAACJ,eAAe,GAAG,IAAI,CAACH,OAAO;IAC/C;IACQ,IAAI,CAACA,OAAO,GAAGO,UAAU;EACjC,CAAK;EACDR,aAAa,CAACK,SAAS,CAACM,OAAO,GAAG,YAAY;IAC1C,IAAI,CAACR,SAAS,GAAG,KAAK;EAC9B,CAAK;EACDH,aAAa,CAACK,SAAS,CAACO,aAAa,GAAG,YAAY;IAChD,IAAIC,MAAM,GAAI,IAAI,CAACZ,OAAO,IAAI,IAAI,CAACA,OAAO,CAACY,MAAM,IAC5C,IAAI,CAACX,OAAO,IAAI,IAAI,CAACA,OAAO,CAACW,MAAO;IACzCC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGC,SAAS,CAAC,CAAC,CAACJ,MAAM,EAAE,EAAE,CAAC,GAAGI,SAAS,CAAC,CAAC,CAACJ,MAAM,EAAE,oEAAoE,GACtJ,6DAA6D,GAC7D,uCAAuC,CAAC;IAC5C,IAAIK,KAAK,GAAG,KAAK;IACjB,IAAIL,MAAM,KAAK,IAAI,CAACA,MAAM,EAAE;MACxBK,KAAK,GAAG,IAAI;MACZ,IAAI,CAACL,MAAM,GAAGA,MAAM;MACpB,IAAI,CAACM,OAAO,EAAE;IAC1B;IACQ,OAAO;MACHN,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBK,KAAK,EAAEA;IACnB,CAAS;EACT,CAAK;EACDlB,aAAa,CAACK,SAAS,CAACe,kBAAkB,GAAG,UAAUC,QAAQ,EAAEC,IAAI,EAAE;IACnE,IAAIC,SAAS,GAAGC,MAAM,CAACH,QAAQ,CAAC;IAChC,IAAII,qBAAqB,GAAGC,aAAa,CAACJ,IAAI,CAAC;IAC/C,IAAIK,iBAAiB,GAAGD,aAAa,CAACH,SAAS,CAACD,IAAI,CAAC;IACrDR,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGC,SAAS,CAACM,SAAS,CAACD,IAAI,KAAKA,IAAI,EAAE,EAAE,CAAC,GAAGL,SAAS,CAACM,SAAS,CAACD,IAAI,KAAKA,IAAI,EAAE,YAAY,GAAGG,qBAAqB,GAAG,sBAAsB,IAC5KA,qBAAqB,GAAG,UAAU,GAAGE,iBAAiB,GAAG,oBAAoB,CAAC,CAAC;EAC5F,CAAK;EACD,OAAO3B,aAAa;AACxB,CAAC,EAAE","names":["OperationData","options","context","isMounted","previousOptions","prototype","getOptions","setOptions","newOptions","storePrevious","equal","unmount","refreshClient","client","process","env","NODE_ENV","invariant","isNew","cleanup","verifyDocumentType","document","type","operation","parser","requiredOperationName","operationName","usedOperationName"],"sources":["OperationData.js"],"sourcesContent":["import { equal } from '@wry/equality';\nimport { invariant } from 'ts-invariant';\nimport { parser, operationName } from '../parser/parser';\nvar OperationData = (function () {\n    function OperationData(options, context) {\n        this.isMounted = false;\n        this.previousOptions = {};\n        this.context = {};\n        this.options = {};\n        this.options = options || {};\n        this.context = context || {};\n    }\n    OperationData.prototype.getOptions = function () {\n        return this.options;\n    };\n    OperationData.prototype.setOptions = function (newOptions, storePrevious) {\n        if (storePrevious === void 0) { storePrevious = false; }\n        if (storePrevious && !equal(this.options, newOptions)) {\n            this.previousOptions = this.options;\n        }\n        this.options = newOptions;\n    };\n    OperationData.prototype.unmount = function () {\n        this.isMounted = false;\n    };\n    OperationData.prototype.refreshClient = function () {\n        var client = (this.options && this.options.client) ||\n            (this.context && this.context.client);\n        invariant(!!client, 'Could not find \"client\" in the context or passed in as an option. ' +\n            'Wrap the root component in an <ApolloProvider>, or pass an ' +\n            'ApolloClient instance in via options.');\n        var isNew = false;\n        if (client !== this.client) {\n            isNew = true;\n            this.client = client;\n            this.cleanup();\n        }\n        return {\n            client: this.client,\n            isNew: isNew\n        };\n    };\n    OperationData.prototype.verifyDocumentType = function (document, type) {\n        var operation = parser(document);\n        var requiredOperationName = operationName(type);\n        var usedOperationName = operationName(operation.type);\n        invariant(operation.type === type, \"Running a \" + requiredOperationName + \" requires a graphql \" +\n            (requiredOperationName + \", but a \" + usedOperationName + \" was used instead.\"));\n    };\n    return OperationData;\n}());\nexport { OperationData };\n//# sourceMappingURL=OperationData.js.map"]},"metadata":{},"sourceType":"module"}