{"ast":null,"code":"import { invariant, InvariantError } from 'ts-invariant';\nimport { valueToObjectRepresentation } from './storeUtils.js';\nfunction checkDocument(doc) {\n  process.env.NODE_ENV === \"production\" ? invariant(doc && doc.kind === 'Document', 24) : invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n  var operations = doc.definitions.filter(function (d) {\n    return d.kind !== 'FragmentDefinition';\n  }).map(function (definition) {\n    if (definition.kind !== 'OperationDefinition') {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(25) : new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n    }\n    return definition;\n  });\n  process.env.NODE_ENV === \"production\" ? invariant(operations.length <= 1, 26) : invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n  return doc;\n}\nfunction getOperationDefinition(doc) {\n  checkDocument(doc);\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition';\n  })[0];\n}\nfunction getOperationName(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'OperationDefinition' && definition.name;\n  }).map(function (x) {\n    return x.name.value;\n  })[0] || null;\n}\nfunction getFragmentDefinitions(doc) {\n  return doc.definitions.filter(function (definition) {\n    return definition.kind === 'FragmentDefinition';\n  });\n}\nfunction getQueryDefinition(doc) {\n  var queryDef = getOperationDefinition(doc);\n  process.env.NODE_ENV === \"production\" ? invariant(queryDef && queryDef.operation === 'query', 27) : invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.');\n  return queryDef;\n}\nfunction getFragmentDefinition(doc) {\n  process.env.NODE_ENV === \"production\" ? invariant(doc.kind === 'Document', 28) : invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n  process.env.NODE_ENV === \"production\" ? invariant(doc.definitions.length <= 1, 29) : invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.');\n  var fragmentDef = doc.definitions[0];\n  process.env.NODE_ENV === \"production\" ? invariant(fragmentDef.kind === 'FragmentDefinition', 30) : invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.');\n  return fragmentDef;\n}\nfunction getMainDefinition(queryDoc) {\n  checkDocument(queryDoc);\n  var fragmentDefinition;\n  for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n    var definition = _a[_i];\n    if (definition.kind === 'OperationDefinition') {\n      var operation = definition.operation;\n      if (operation === 'query' || operation === 'mutation' || operation === 'subscription') {\n        return definition;\n      }\n    }\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      fragmentDefinition = definition;\n    }\n  }\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n  throw process.env.NODE_ENV === \"production\" ? new InvariantError(31) : new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\nfunction getDefaultValues(definition) {\n  var defaultValues = Object.create(null);\n  var defs = definition && definition.variableDefinitions;\n  if (defs && defs.length) {\n    defs.forEach(function (def) {\n      if (def.defaultValue) {\n        valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);\n      }\n    });\n  }\n  return defaultValues;\n}\nexport { checkDocument, getDefaultValues, getFragmentDefinition, getFragmentDefinitions, getMainDefinition, getOperationDefinition, getOperationName, getQueryDefinition };","map":{"version":3,"mappings":"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","names":["checkDocument","doc","process","env","NODE_ENV","invariant","kind","operations","definitions","filter","d","map","definition","InvariantError","length","getOperationDefinition","getOperationName","name","x","value","getFragmentDefinitions","getQueryDefinition","queryDef","operation","getFragmentDefinition","fragmentDef","getMainDefinition","queryDoc","fragmentDefinition","_i","_a","getDefaultValues","defaultValues","Object","create","defs","variableDefinitions","forEach","def","defaultValue","valueToObjectRepresentation","variable"],"sources":["getFromAST.js"],"sourcesContent":["import { invariant, InvariantError } from 'ts-invariant';\nimport { valueToObjectRepresentation } from './storeUtils';\nexport function checkDocument(doc) {\n    invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })\n        .map(function (definition) {\n        if (definition.kind !== 'OperationDefinition') {\n            throw new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n        }\n        return definition;\n    });\n    invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n    return doc;\n}\nexport function getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];\n}\nexport function getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === 'OperationDefinition' && definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\nexport function getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });\n}\nexport function getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.');\n    return queryDef;\n}\nexport function getFragmentDefinition(doc) {\n    invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.');\n    var fragmentDef = doc.definitions[0];\n    invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.');\n    return fragmentDef;\n}\nexport function getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === 'OperationDefinition') {\n            var operation = definition.operation;\n            if (operation === 'query' ||\n                operation === 'mutation' ||\n                operation === 'subscription') {\n                return definition;\n            }\n        }\n        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\nexport function getDefaultValues(definition) {\n    var defaultValues = Object.create(null);\n    var defs = definition && definition.variableDefinitions;\n    if (defs && defs.length) {\n        defs.forEach(function (def) {\n            if (def.defaultValue) {\n                valueToObjectRepresentation(defaultValues, def.variable.name, def.defaultValue);\n            }\n        });\n    }\n    return defaultValues;\n}\n//# sourceMappingURL=getFromAST.js.map"]},"metadata":{},"sourceType":"module"}