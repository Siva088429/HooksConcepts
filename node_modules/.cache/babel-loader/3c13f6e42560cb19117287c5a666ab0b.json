{"ast":null,"code":"import { __assign } from 'tslib';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { ApolloLink } from './link/core/ApolloLink.js';\nimport { execute } from './link/core/execute.js';\nimport { LocalState } from './core/LocalState.js';\nimport { QueryManager } from './core/QueryManager.js';\nimport { version } from './version.js';\nimport { HttpLink } from './link/http/HttpLink.js';\nvar hasSuggestedDevtools = false;\nvar ApolloClient = function () {\n  function ApolloClient(options) {\n    var _this = this;\n    this.defaultOptions = {};\n    this.resetStoreCallbacks = [];\n    this.clearStoreCallbacks = [];\n    var uri = options.uri,\n      credentials = options.credentials,\n      headers = options.headers,\n      cache = options.cache,\n      _a = options.ssrMode,\n      ssrMode = _a === void 0 ? false : _a,\n      _b = options.ssrForceFetchDelay,\n      ssrForceFetchDelay = _b === void 0 ? 0 : _b,\n      connectToDevTools = options.connectToDevTools,\n      _c = options.queryDeduplication,\n      queryDeduplication = _c === void 0 ? true : _c,\n      defaultOptions = options.defaultOptions,\n      _d = options.assumeImmutableResults,\n      assumeImmutableResults = _d === void 0 ? false : _d,\n      resolvers = options.resolvers,\n      typeDefs = options.typeDefs,\n      fragmentMatcher = options.fragmentMatcher,\n      clientAwarenessName = options.name,\n      clientAwarenessVersion = options.version;\n    var link = options.link;\n    if (!link) {\n      link = uri ? new HttpLink({\n        uri: uri,\n        credentials: credentials,\n        headers: headers\n      }) : ApolloLink.empty();\n    }\n    if (!cache) {\n      throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"To initialize Apollo Client, you must specify a 'cache' property \" + \"in the options object. \\n\" + \"For more information, please visit: https://go.apollo.dev/c/docs\");\n    }\n    this.link = link;\n    this.cache = cache;\n    this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n    this.queryDeduplication = queryDeduplication;\n    this.defaultOptions = defaultOptions || {};\n    this.typeDefs = typeDefs;\n    if (ssrForceFetchDelay) {\n      setTimeout(function () {\n        return _this.disableNetworkFetches = false;\n      }, ssrForceFetchDelay);\n    }\n    this.watchQuery = this.watchQuery.bind(this);\n    this.query = this.query.bind(this);\n    this.mutate = this.mutate.bind(this);\n    this.resetStore = this.resetStore.bind(this);\n    this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n    var defaultConnectToDevTools = process.env.NODE_ENV !== 'production' && typeof window !== 'undefined' && !window.__APOLLO_CLIENT__;\n    if (typeof connectToDevTools === 'undefined' ? defaultConnectToDevTools : connectToDevTools && typeof window !== 'undefined') {\n      window.__APOLLO_CLIENT__ = this;\n    }\n    if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n      hasSuggestedDevtools = true;\n      if (typeof window !== 'undefined' && window.document && window.top === window.self) {\n        if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n          if (window.navigator && window.navigator.userAgent && window.navigator.userAgent.indexOf('Chrome') > -1) {\n            console.debug('Download the Apollo DevTools ' + 'for a better development experience: ' + 'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n          }\n        }\n      }\n    }\n    this.version = version;\n    this.localState = new LocalState({\n      cache: cache,\n      client: this,\n      resolvers: resolvers,\n      fragmentMatcher: fragmentMatcher\n    });\n    this.queryManager = new QueryManager({\n      cache: this.cache,\n      link: this.link,\n      queryDeduplication: queryDeduplication,\n      ssrMode: ssrMode,\n      clientAwareness: {\n        name: clientAwarenessName,\n        version: clientAwarenessVersion\n      },\n      localState: this.localState,\n      assumeImmutableResults: assumeImmutableResults,\n      onBroadcast: function () {\n        if (_this.devToolsHookCb) {\n          _this.devToolsHookCb({\n            action: {},\n            state: {\n              queries: _this.queryManager.getQueryStore(),\n              mutations: _this.queryManager.mutationStore.getStore()\n            },\n            dataWithOptimisticResults: _this.cache.extract(true)\n          });\n        }\n      }\n    });\n  }\n  ApolloClient.prototype.stop = function () {\n    this.queryManager.stop();\n  };\n  ApolloClient.prototype.watchQuery = function (options) {\n    if (this.defaultOptions.watchQuery) {\n      options = __assign(__assign({}, this.defaultOptions.watchQuery), options);\n    }\n    if (this.disableNetworkFetches && (options.fetchPolicy === 'network-only' || options.fetchPolicy === 'cache-and-network')) {\n      options = __assign(__assign({}, options), {\n        fetchPolicy: 'cache-first'\n      });\n    }\n    return this.queryManager.watchQuery(options);\n  };\n  ApolloClient.prototype.query = function (options) {\n    if (this.defaultOptions.query) {\n      options = __assign(__assign({}, this.defaultOptions.query), options);\n    }\n    process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'cache-and-network', 2) : invariant(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' + 'client.query can only return a single result. Please use client.watchQuery ' + 'to receive multiple results from the cache and the network, or consider ' + 'using a different fetchPolicy, such as cache-first or network-only.');\n    if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n      options = __assign(__assign({}, options), {\n        fetchPolicy: 'cache-first'\n      });\n    }\n    return this.queryManager.query(options);\n  };\n  ApolloClient.prototype.mutate = function (options) {\n    if (this.defaultOptions.mutate) {\n      options = __assign(__assign({}, this.defaultOptions.mutate), options);\n    }\n    return this.queryManager.mutate(options);\n  };\n  ApolloClient.prototype.subscribe = function (options) {\n    return this.queryManager.startGraphQLSubscription(options);\n  };\n  ApolloClient.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return this.cache.readQuery(options, optimistic);\n  };\n  ApolloClient.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return this.cache.readFragment(options, optimistic);\n  };\n  ApolloClient.prototype.writeQuery = function (options) {\n    this.cache.writeQuery(options);\n    this.queryManager.broadcastQueries();\n  };\n  ApolloClient.prototype.writeFragment = function (options) {\n    this.cache.writeFragment(options);\n    this.queryManager.broadcastQueries();\n  };\n  ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n    this.devToolsHookCb = cb;\n  };\n  ApolloClient.prototype.__requestRaw = function (payload) {\n    return execute(this.link, payload);\n  };\n  ApolloClient.prototype.resetStore = function () {\n    var _this = this;\n    return Promise.resolve().then(function () {\n      return _this.queryManager.clearStore();\n    }).then(function () {\n      return Promise.all(_this.resetStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    }).then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n  ApolloClient.prototype.clearStore = function () {\n    var _this = this;\n    return Promise.resolve().then(function () {\n      return _this.queryManager.clearStore();\n    }).then(function () {\n      return Promise.all(_this.clearStoreCallbacks.map(function (fn) {\n        return fn();\n      }));\n    });\n  };\n  ApolloClient.prototype.onResetStore = function (cb) {\n    var _this = this;\n    this.resetStoreCallbacks.push(cb);\n    return function () {\n      _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n  ApolloClient.prototype.onClearStore = function (cb) {\n    var _this = this;\n    this.clearStoreCallbacks.push(cb);\n    return function () {\n      _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) {\n        return c !== cb;\n      });\n    };\n  };\n  ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n    return this.queryManager.reFetchObservableQueries(includeStandby);\n  };\n  ApolloClient.prototype.extract = function (optimistic) {\n    return this.cache.extract(optimistic);\n  };\n  ApolloClient.prototype.restore = function (serializedState) {\n    return this.cache.restore(serializedState);\n  };\n  ApolloClient.prototype.addResolvers = function (resolvers) {\n    this.localState.addResolvers(resolvers);\n  };\n  ApolloClient.prototype.setResolvers = function (resolvers) {\n    this.localState.setResolvers(resolvers);\n  };\n  ApolloClient.prototype.getResolvers = function () {\n    return this.localState.getResolvers();\n  };\n  ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n    this.localState.setFragmentMatcher(fragmentMatcher);\n  };\n  ApolloClient.prototype.setLink = function (newLink) {\n    this.link = this.queryManager.link = newLink;\n  };\n  return ApolloClient;\n}();\nexport { ApolloClient };","map":{"version":3,"mappings":"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","names":["hasSuggestedDevtools","ApolloClient","options","_this","defaultOptions","resetStoreCallbacks","clearStoreCallbacks","uri","credentials","headers","cache","_a","ssrMode","_b","ssrForceFetchDelay","connectToDevTools","_c","queryDeduplication","_d","assumeImmutableResults","resolvers","typeDefs","fragmentMatcher","clientAwarenessName","name","clientAwarenessVersion","version","link","HttpLink","ApolloLink","empty","process","env","NODE_ENV","InvariantError","disableNetworkFetches","setTimeout","watchQuery","bind","query","mutate","resetStore","reFetchObservableQueries","defaultConnectToDevTools","window","__APOLLO_CLIENT__","document","top","self","__APOLLO_DEVTOOLS_GLOBAL_HOOK__","navigator","userAgent","indexOf","console","debug","localState","LocalState","client","queryManager","QueryManager","clientAwareness","onBroadcast","devToolsHookCb","action","state","queries","getQueryStore","mutations","mutationStore","getStore","dataWithOptimisticResults","extract","prototype","stop","__assign","fetchPolicy","invariant","subscribe","startGraphQLSubscription","readQuery","optimistic","readFragment","writeQuery","broadcastQueries","writeFragment","__actionHookForDevTools","cb","__requestRaw","payload","execute","Promise","resolve","then","clearStore","all","map","fn","onResetStore","push","filter","c","onClearStore","includeStandby","restore","serializedState","addResolvers","setResolvers","getResolvers","setLocalStateFragmentMatcher","setFragmentMatcher","setLink","newLink"],"sources":["ApolloClient.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { ApolloLink } from './link/core/ApolloLink';\nimport { execute } from './link/core/execute';\nimport { QueryManager } from './core/QueryManager';\nimport { LocalState } from './core/LocalState';\nimport { version } from './version';\nimport { HttpLink } from './link/http/HttpLink';\nvar hasSuggestedDevtools = false;\nvar ApolloClient = (function () {\n    function ApolloClient(options) {\n        var _this = this;\n        this.defaultOptions = {};\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        var uri = options.uri, credentials = options.credentials, headers = options.headers, cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions, _d = options.assumeImmutableResults, assumeImmutableResults = _d === void 0 ? false : _d, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;\n        var link = options.link;\n        if (!link) {\n            link = uri\n                ? new HttpLink({ uri: uri, credentials: credentials, headers: headers })\n                : ApolloLink.empty();\n        }\n        if (!cache) {\n            throw new InvariantError(\"To initialize Apollo Client, you must specify a 'cache' property \" +\n                \"in the options object. \\n\" +\n                \"For more information, please visit: https://go.apollo.dev/c/docs\");\n        }\n        this.link = link;\n        this.cache = cache;\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || {};\n        this.typeDefs = typeDefs;\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        var defaultConnectToDevTools = process.env.NODE_ENV !== 'production' &&\n            typeof window !== 'undefined' &&\n            !window.__APOLLO_CLIENT__;\n        if (typeof connectToDevTools === 'undefined'\n            ? defaultConnectToDevTools\n            : connectToDevTools && typeof window !== 'undefined') {\n            window.__APOLLO_CLIENT__ = this;\n        }\n        if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n            hasSuggestedDevtools = true;\n            if (typeof window !== 'undefined' &&\n                window.document &&\n                window.top === window.self) {\n                if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n                    if (window.navigator &&\n                        window.navigator.userAgent &&\n                        window.navigator.userAgent.indexOf('Chrome') > -1) {\n                        console.debug('Download the Apollo DevTools ' +\n                            'for a better development experience: ' +\n                            'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n                    }\n                }\n            }\n        }\n        this.version = version;\n        this.localState = new LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher,\n        });\n        this.queryManager = new QueryManager({\n            cache: this.cache,\n            link: this.link,\n            queryDeduplication: queryDeduplication,\n            ssrMode: ssrMode,\n            clientAwareness: {\n                name: clientAwarenessName,\n                version: clientAwarenessVersion,\n            },\n            localState: this.localState,\n            assumeImmutableResults: assumeImmutableResults,\n            onBroadcast: function () {\n                if (_this.devToolsHookCb) {\n                    _this.devToolsHookCb({\n                        action: {},\n                        state: {\n                            queries: _this.queryManager.getQueryStore(),\n                            mutations: _this.queryManager.mutationStore.getStore(),\n                        },\n                        dataWithOptimisticResults: _this.cache.extract(true),\n                    });\n                }\n            },\n        });\n    }\n    ApolloClient.prototype.stop = function () {\n        this.queryManager.stop();\n    };\n    ApolloClient.prototype.watchQuery = function (options) {\n        if (this.defaultOptions.watchQuery) {\n            options = __assign(__assign({}, this.defaultOptions.watchQuery), options);\n        }\n        if (this.disableNetworkFetches &&\n            (options.fetchPolicy === 'network-only' ||\n                options.fetchPolicy === 'cache-and-network')) {\n            options = __assign(__assign({}, options), { fetchPolicy: 'cache-first' });\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    ApolloClient.prototype.query = function (options) {\n        if (this.defaultOptions.query) {\n            options = __assign(__assign({}, this.defaultOptions.query), options);\n        }\n        invariant(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' +\n            'client.query can only return a single result. Please use client.watchQuery ' +\n            'to receive multiple results from the cache and the network, or consider ' +\n            'using a different fetchPolicy, such as cache-first or network-only.');\n        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n            options = __assign(__assign({}, options), { fetchPolicy: 'cache-first' });\n        }\n        return this.queryManager.query(options);\n    };\n    ApolloClient.prototype.mutate = function (options) {\n        if (this.defaultOptions.mutate) {\n            options = __assign(__assign({}, this.defaultOptions.mutate), options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    ApolloClient.prototype.subscribe = function (options) {\n        return this.queryManager.startGraphQLSubscription(options);\n    };\n    ApolloClient.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readQuery(options, optimistic);\n    };\n    ApolloClient.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readFragment(options, optimistic);\n    };\n    ApolloClient.prototype.writeQuery = function (options) {\n        this.cache.writeQuery(options);\n        this.queryManager.broadcastQueries();\n    };\n    ApolloClient.prototype.writeFragment = function (options) {\n        this.cache.writeFragment(options);\n        this.queryManager.broadcastQueries();\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function (payload) {\n        return execute(this.link, payload);\n    };\n    ApolloClient.prototype.resetStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () { return _this.queryManager.clearStore(); })\n            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () { return _this.reFetchObservableQueries(); });\n    };\n    ApolloClient.prototype.clearStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () { return _this.queryManager.clearStore(); })\n            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); });\n    };\n    ApolloClient.prototype.onResetStore = function (cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function () {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.onClearStore = function (cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function () {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n        return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n    ApolloClient.prototype.extract = function (optimistic) {\n        return this.cache.extract(optimistic);\n    };\n    ApolloClient.prototype.restore = function (serializedState) {\n        return this.cache.restore(serializedState);\n    };\n    ApolloClient.prototype.addResolvers = function (resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    ApolloClient.prototype.setResolvers = function (resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    ApolloClient.prototype.getResolvers = function () {\n        return this.localState.getResolvers();\n    };\n    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    ApolloClient.prototype.setLink = function (newLink) {\n        this.link = this.queryManager.link = newLink;\n    };\n    return ApolloClient;\n}());\nexport { ApolloClient };\n//# sourceMappingURL=ApolloClient.js.map"]},"metadata":{},"sourceType":"module"}