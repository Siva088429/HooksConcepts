{"ast":null,"code":"import { __assign, __extends } from 'tslib';\nimport { isReference, makeReference } from '../../utilities/graphql/storeUtils.js';\nimport { equal } from '@wry/equality';\nimport { canUseWeakMap } from '../../utilities/common/canUse.js';\nimport { DeepMerger } from '../../utilities/common/mergeDeep.js';\nimport { KeyTrie, dep } from 'optimism';\nimport { maybeDeepFreeze } from '../../utilities/common/maybeDeepFreeze.js';\nimport { hasOwn, fieldNameFromStoreName } from './helpers.js';\nvar DELETE = Object.create(null);\nvar delModifier = function () {\n  return DELETE;\n};\nvar EntityStore = function () {\n  function EntityStore(policies, group) {\n    var _this = this;\n    this.policies = policies;\n    this.group = group;\n    this.data = Object.create(null);\n    this.rootIds = Object.create(null);\n    this.refs = Object.create(null);\n    this.getFieldValue = function (objectOrReference, storeFieldName) {\n      return maybeDeepFreeze(isReference(objectOrReference) ? _this.get(objectOrReference.__ref, storeFieldName) : objectOrReference && objectOrReference[storeFieldName]);\n    };\n    this.canRead = function (objOrRef) {\n      return isReference(objOrRef) ? _this.has(objOrRef.__ref) : typeof objOrRef === \"object\";\n    };\n    this.toReference = function (object, mergeIntoStore) {\n      var id = _this.policies.identify(object)[0];\n      if (id) {\n        var ref = makeReference(id);\n        if (mergeIntoStore) {\n          _this.merge(id, object);\n        }\n        return ref;\n      }\n    };\n  }\n  EntityStore.prototype.toObject = function () {\n    return __assign({}, this.data);\n  };\n  EntityStore.prototype.has = function (dataId) {\n    return this.lookup(dataId, true) !== void 0;\n  };\n  EntityStore.prototype.get = function (dataId, fieldName) {\n    this.group.depend(dataId, fieldName);\n    if (hasOwn.call(this.data, dataId)) {\n      var storeObject = this.data[dataId];\n      if (storeObject && hasOwn.call(storeObject, fieldName)) {\n        return storeObject[fieldName];\n      }\n    }\n    if (fieldName === \"__typename\" && hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n      return this.policies.rootTypenamesById[dataId];\n    }\n    if (this instanceof Layer) {\n      return this.parent.get(dataId, fieldName);\n    }\n  };\n  EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n    if (dependOnExistence) this.group.depend(dataId, \"__exists\");\n    return hasOwn.call(this.data, dataId) ? this.data[dataId] : this instanceof Layer ? this.parent.lookup(dataId, dependOnExistence) : void 0;\n  };\n  EntityStore.prototype.merge = function (dataId, incoming) {\n    var _this = this;\n    var existing = this.lookup(dataId);\n    var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n    this.data[dataId] = merged;\n    if (merged !== existing) {\n      delete this.refs[dataId];\n      if (this.group.caching) {\n        var fieldsToDirty_1 = Object.create(null);\n        if (!existing) fieldsToDirty_1.__exists = 1;\n        Object.keys(incoming).forEach(function (storeFieldName) {\n          if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n            fieldsToDirty_1[fieldNameFromStoreName(storeFieldName)] = 1;\n            if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n              delete merged[storeFieldName];\n            }\n          }\n        });\n        Object.keys(fieldsToDirty_1).forEach(function (fieldName) {\n          return _this.group.dirty(dataId, fieldName);\n        });\n      }\n    }\n  };\n  EntityStore.prototype.modify = function (dataId, fields) {\n    var _this = this;\n    var storeObject = this.lookup(dataId);\n    if (storeObject) {\n      var changedFields_1 = Object.create(null);\n      var needToMerge_1 = false;\n      var allDeleted_1 = true;\n      var readField_1 = function (fieldNameOrOptions, from) {\n        return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n          fieldName: fieldNameOrOptions,\n          from: from || makeReference(dataId)\n        } : fieldNameOrOptions, {\n          canRead: _this.canRead,\n          toReference: _this.toReference,\n          getFieldValue: _this.getFieldValue\n        });\n      };\n      Object.keys(storeObject).forEach(function (storeFieldName) {\n        var fieldName = fieldNameFromStoreName(storeFieldName);\n        var fieldValue = storeObject[storeFieldName];\n        if (fieldValue === void 0) return;\n        var modify = typeof fields === \"function\" ? fields : fields[storeFieldName] || fields[fieldName];\n        if (modify) {\n          var newValue = modify === delModifier ? DELETE : modify(maybeDeepFreeze(fieldValue), {\n            DELETE: DELETE,\n            fieldName: fieldName,\n            storeFieldName: storeFieldName,\n            isReference: isReference,\n            toReference: _this.toReference,\n            canRead: _this.canRead,\n            readField: readField_1\n          });\n          if (newValue === DELETE) newValue = void 0;\n          if (newValue !== fieldValue) {\n            changedFields_1[storeFieldName] = newValue;\n            needToMerge_1 = true;\n            fieldValue = newValue;\n          }\n        }\n        if (fieldValue !== void 0) {\n          allDeleted_1 = false;\n        }\n      });\n      if (needToMerge_1) {\n        this.merge(dataId, changedFields_1);\n        if (allDeleted_1) {\n          if (this instanceof Layer) {\n            this.data[dataId] = void 0;\n          } else {\n            delete this.data[dataId];\n          }\n          this.group.dirty(dataId, \"__exists\");\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n  EntityStore.prototype.delete = function (dataId, fieldName, args) {\n    var _a;\n    var storeObject = this.lookup(dataId);\n    if (storeObject) {\n      var typename = this.getFieldValue(storeObject, \"__typename\");\n      var storeFieldName = fieldName && args ? this.policies.getStoreFieldName({\n        typename: typename,\n        fieldName: fieldName,\n        args: args\n      }) : fieldName;\n      return this.modify(dataId, storeFieldName ? (_a = {}, _a[storeFieldName] = delModifier, _a) : delModifier);\n    }\n    return false;\n  };\n  EntityStore.prototype.evict = function (options) {\n    var evicted = false;\n    if (options.id) {\n      if (hasOwn.call(this.data, options.id)) {\n        evicted = this.delete(options.id, options.fieldName, options.args);\n      }\n      if (this instanceof Layer) {\n        evicted = this.parent.evict(options) || evicted;\n      }\n      if (options.fieldName || evicted) {\n        this.group.dirty(options.id, options.fieldName || \"__exists\");\n      }\n    }\n    return evicted;\n  };\n  EntityStore.prototype.clear = function () {\n    this.replace(null);\n  };\n  EntityStore.prototype.replace = function (newData) {\n    var _this = this;\n    Object.keys(this.data).forEach(function (dataId) {\n      if (!(newData && hasOwn.call(newData, dataId))) {\n        _this.delete(dataId);\n      }\n    });\n    if (newData) {\n      Object.keys(newData).forEach(function (dataId) {\n        _this.merge(dataId, newData[dataId]);\n      });\n    }\n  };\n  EntityStore.prototype.retain = function (rootId) {\n    return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n  };\n  EntityStore.prototype.release = function (rootId) {\n    if (this.rootIds[rootId] > 0) {\n      var count = --this.rootIds[rootId];\n      if (!count) delete this.rootIds[rootId];\n      return count;\n    }\n    return 0;\n  };\n  EntityStore.prototype.getRootIdSet = function (ids) {\n    if (ids === void 0) {\n      ids = new Set();\n    }\n    Object.keys(this.rootIds).forEach(ids.add, ids);\n    if (this instanceof Layer) {\n      this.parent.getRootIdSet(ids);\n    }\n    return ids;\n  };\n  EntityStore.prototype.gc = function () {\n    var _this = this;\n    var ids = this.getRootIdSet();\n    var snapshot = this.toObject();\n    ids.forEach(function (id) {\n      if (hasOwn.call(snapshot, id)) {\n        Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n        delete snapshot[id];\n      }\n    });\n    var idsToRemove = Object.keys(snapshot);\n    if (idsToRemove.length) {\n      var root_1 = this;\n      while (root_1 instanceof Layer) root_1 = root_1.parent;\n      idsToRemove.forEach(function (id) {\n        return root_1.delete(id);\n      });\n    }\n    return idsToRemove;\n  };\n  EntityStore.prototype.findChildRefIds = function (dataId) {\n    if (!hasOwn.call(this.refs, dataId)) {\n      var found_1 = this.refs[dataId] = Object.create(null);\n      var workSet_1 = new Set([this.data[dataId]]);\n      var canTraverse_1 = function (obj) {\n        return obj !== null && typeof obj === 'object';\n      };\n      workSet_1.forEach(function (obj) {\n        if (isReference(obj)) {\n          found_1[obj.__ref] = true;\n        } else if (canTraverse_1(obj)) {\n          Object.values(obj).filter(canTraverse_1).forEach(workSet_1.add, workSet_1);\n        }\n      });\n    }\n    return this.refs[dataId];\n  };\n  EntityStore.prototype.makeCacheKey = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return this.group.keyMaker.lookupArray(args);\n  };\n  return EntityStore;\n}();\nvar CacheGroup = function () {\n  function CacheGroup(caching) {\n    this.caching = caching;\n    this.d = null;\n    this.keyMaker = new KeyTrie(canUseWeakMap);\n    this.d = caching ? dep() : null;\n  }\n  CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d(makeDepKey(dataId, storeFieldName));\n    }\n  };\n  CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n    if (this.d) {\n      this.d.dirty(makeDepKey(dataId, storeFieldName));\n    }\n  };\n  return CacheGroup;\n}();\nfunction makeDepKey(dataId, storeFieldName) {\n  return fieldNameFromStoreName(storeFieldName) + '#' + dataId;\n}\n(function (EntityStore) {\n  var Root = function (_super) {\n    __extends(Root, _super);\n    function Root(_a) {\n      var policies = _a.policies,\n        _b = _a.resultCaching,\n        resultCaching = _b === void 0 ? true : _b,\n        seed = _a.seed;\n      var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n      _this.sharedLayerGroup = new CacheGroup(resultCaching);\n      if (seed) _this.replace(seed);\n      return _this;\n    }\n    Root.prototype.addLayer = function (layerId, replay) {\n      return new Layer(layerId, this, replay, this.sharedLayerGroup);\n    };\n    Root.prototype.removeLayer = function () {\n      return this;\n    };\n    return Root;\n  }(EntityStore);\n  EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\nvar Layer = function (_super) {\n  __extends(Layer, _super);\n  function Layer(id, parent, replay, group) {\n    var _this = _super.call(this, parent.policies, group) || this;\n    _this.id = id;\n    _this.parent = parent;\n    _this.replay = replay;\n    _this.group = group;\n    replay(_this);\n    return _this;\n  }\n  Layer.prototype.addLayer = function (layerId, replay) {\n    return new Layer(layerId, this, replay, this.group);\n  };\n  Layer.prototype.removeLayer = function (layerId) {\n    var _this = this;\n    var parent = this.parent.removeLayer(layerId);\n    if (layerId === this.id) {\n      if (this.group.caching) {\n        Object.keys(this.data).forEach(function (dataId) {\n          if (_this.data[dataId] !== parent.lookup(dataId)) {\n            _this.delete(dataId);\n          }\n        });\n      }\n      return parent;\n    }\n    if (parent === this.parent) return this;\n    return parent.addLayer(this.id, this.replay);\n  };\n  Layer.prototype.toObject = function () {\n    return __assign(__assign({}, this.parent.toObject()), this.data);\n  };\n  Layer.prototype.findChildRefIds = function (dataId) {\n    var fromParent = this.parent.findChildRefIds(dataId);\n    return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n  };\n  return Layer;\n}(EntityStore);\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n  var existingValue = existingObject[property];\n  var incomingValue = incomingObject[property];\n  return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nfunction supportsResultCaching(store) {\n  return !!(store instanceof EntityStore && store.group.caching);\n}\nexport { EntityStore, supportsResultCaching };","map":{"version":3,"mappings":"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","names":["DELETE","Object","create","delModifier","EntityStore","policies","group","_this","data","rootIds","refs","getFieldValue","objectOrReference","storeFieldName","maybeDeepFreeze","isReference","get","__ref","canRead","objOrRef","has","toReference","object","mergeIntoStore","id","identify","ref","makeReference","merge","prototype","toObject","__assign","dataId","lookup","fieldName","depend","hasOwn","call","storeObject","rootTypenamesById","Layer","parent","dependOnExistence","incoming","existing","merged","DeepMerger","storeObjectReconciler","caching","fieldsToDirty_1","__exists","keys","forEach","fieldNameFromStoreName","dirty","modify","fields","changedFields_1","needToMerge_1","allDeleted_1","readField_1","fieldNameOrOptions","from","readField","fieldValue","newValue","delete","args","_a","typename","getStoreFieldName","evict","options","evicted","clear","replace","newData","retain","rootId","release","count","getRootIdSet","ids","Set","add","gc","snapshot","findChildRefIds","idsToRemove","length","root_1","found_1","workSet_1","canTraverse_1","obj","values","filter","makeCacheKey","_i","arguments","keyMaker","lookupArray","CacheGroup","d","KeyTrie","canUseWeakMap","dep","makeDepKey","Root","_super","__extends","_b","resultCaching","seed","sharedLayerGroup","addLayer","layerId","replay","removeLayer","fromParent","existingObject","incomingObject","property","existingValue","incomingValue","equal","supportsResultCaching","store"],"sources":["entityStore.js"],"sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { dep, KeyTrie } from 'optimism';\nimport { equal } from '@wry/equality';\nimport { isReference, makeReference } from '../../utilities/graphql/storeUtils';\nimport { DeepMerger } from '../../utilities/common/mergeDeep';\nimport { maybeDeepFreeze } from '../../utilities/common/maybeDeepFreeze';\nimport { canUseWeakMap } from '../../utilities/common/canUse';\nimport { hasOwn, fieldNameFromStoreName } from './helpers';\nvar DELETE = Object.create(null);\nvar delModifier = function () { return DELETE; };\nvar EntityStore = (function () {\n    function EntityStore(policies, group) {\n        var _this = this;\n        this.policies = policies;\n        this.group = group;\n        this.data = Object.create(null);\n        this.rootIds = Object.create(null);\n        this.refs = Object.create(null);\n        this.getFieldValue = function (objectOrReference, storeFieldName) { return maybeDeepFreeze(isReference(objectOrReference)\n            ? _this.get(objectOrReference.__ref, storeFieldName)\n            : objectOrReference && objectOrReference[storeFieldName]); };\n        this.canRead = function (objOrRef) {\n            return isReference(objOrRef)\n                ? _this.has(objOrRef.__ref)\n                : typeof objOrRef === \"object\";\n        };\n        this.toReference = function (object, mergeIntoStore) {\n            var id = _this.policies.identify(object)[0];\n            if (id) {\n                var ref = makeReference(id);\n                if (mergeIntoStore) {\n                    _this.merge(id, object);\n                }\n                return ref;\n            }\n        };\n    }\n    EntityStore.prototype.toObject = function () {\n        return __assign({}, this.data);\n    };\n    EntityStore.prototype.has = function (dataId) {\n        return this.lookup(dataId, true) !== void 0;\n    };\n    EntityStore.prototype.get = function (dataId, fieldName) {\n        this.group.depend(dataId, fieldName);\n        if (hasOwn.call(this.data, dataId)) {\n            var storeObject = this.data[dataId];\n            if (storeObject && hasOwn.call(storeObject, fieldName)) {\n                return storeObject[fieldName];\n            }\n        }\n        if (fieldName === \"__typename\" &&\n            hasOwn.call(this.policies.rootTypenamesById, dataId)) {\n            return this.policies.rootTypenamesById[dataId];\n        }\n        if (this instanceof Layer) {\n            return this.parent.get(dataId, fieldName);\n        }\n    };\n    EntityStore.prototype.lookup = function (dataId, dependOnExistence) {\n        if (dependOnExistence)\n            this.group.depend(dataId, \"__exists\");\n        return hasOwn.call(this.data, dataId) ? this.data[dataId] :\n            this instanceof Layer ? this.parent.lookup(dataId, dependOnExistence) : void 0;\n    };\n    EntityStore.prototype.merge = function (dataId, incoming) {\n        var _this = this;\n        var existing = this.lookup(dataId);\n        var merged = new DeepMerger(storeObjectReconciler).merge(existing, incoming);\n        this.data[dataId] = merged;\n        if (merged !== existing) {\n            delete this.refs[dataId];\n            if (this.group.caching) {\n                var fieldsToDirty_1 = Object.create(null);\n                if (!existing)\n                    fieldsToDirty_1.__exists = 1;\n                Object.keys(incoming).forEach(function (storeFieldName) {\n                    if (!existing || existing[storeFieldName] !== merged[storeFieldName]) {\n                        fieldsToDirty_1[fieldNameFromStoreName(storeFieldName)] = 1;\n                        if (merged[storeFieldName] === void 0 && !(_this instanceof Layer)) {\n                            delete merged[storeFieldName];\n                        }\n                    }\n                });\n                Object.keys(fieldsToDirty_1).forEach(function (fieldName) { return _this.group.dirty(dataId, fieldName); });\n            }\n        }\n    };\n    EntityStore.prototype.modify = function (dataId, fields) {\n        var _this = this;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var changedFields_1 = Object.create(null);\n            var needToMerge_1 = false;\n            var allDeleted_1 = true;\n            var readField_1 = function (fieldNameOrOptions, from) { return _this.policies.readField(typeof fieldNameOrOptions === \"string\" ? {\n                fieldName: fieldNameOrOptions,\n                from: from || makeReference(dataId),\n            } : fieldNameOrOptions, {\n                canRead: _this.canRead,\n                toReference: _this.toReference,\n                getFieldValue: _this.getFieldValue,\n            }); };\n            Object.keys(storeObject).forEach(function (storeFieldName) {\n                var fieldName = fieldNameFromStoreName(storeFieldName);\n                var fieldValue = storeObject[storeFieldName];\n                if (fieldValue === void 0)\n                    return;\n                var modify = typeof fields === \"function\"\n                    ? fields\n                    : fields[storeFieldName] || fields[fieldName];\n                if (modify) {\n                    var newValue = modify === delModifier ? DELETE :\n                        modify(maybeDeepFreeze(fieldValue), {\n                            DELETE: DELETE,\n                            fieldName: fieldName,\n                            storeFieldName: storeFieldName,\n                            isReference: isReference,\n                            toReference: _this.toReference,\n                            canRead: _this.canRead,\n                            readField: readField_1,\n                        });\n                    if (newValue === DELETE)\n                        newValue = void 0;\n                    if (newValue !== fieldValue) {\n                        changedFields_1[storeFieldName] = newValue;\n                        needToMerge_1 = true;\n                        fieldValue = newValue;\n                    }\n                }\n                if (fieldValue !== void 0) {\n                    allDeleted_1 = false;\n                }\n            });\n            if (needToMerge_1) {\n                this.merge(dataId, changedFields_1);\n                if (allDeleted_1) {\n                    if (this instanceof Layer) {\n                        this.data[dataId] = void 0;\n                    }\n                    else {\n                        delete this.data[dataId];\n                    }\n                    this.group.dirty(dataId, \"__exists\");\n                }\n                return true;\n            }\n        }\n        return false;\n    };\n    EntityStore.prototype.delete = function (dataId, fieldName, args) {\n        var _a;\n        var storeObject = this.lookup(dataId);\n        if (storeObject) {\n            var typename = this.getFieldValue(storeObject, \"__typename\");\n            var storeFieldName = fieldName && args\n                ? this.policies.getStoreFieldName({ typename: typename, fieldName: fieldName, args: args })\n                : fieldName;\n            return this.modify(dataId, storeFieldName ? (_a = {},\n                _a[storeFieldName] = delModifier,\n                _a) : delModifier);\n        }\n        return false;\n    };\n    EntityStore.prototype.evict = function (options) {\n        var evicted = false;\n        if (options.id) {\n            if (hasOwn.call(this.data, options.id)) {\n                evicted = this.delete(options.id, options.fieldName, options.args);\n            }\n            if (this instanceof Layer) {\n                evicted = this.parent.evict(options) || evicted;\n            }\n            if (options.fieldName || evicted) {\n                this.group.dirty(options.id, options.fieldName || \"__exists\");\n            }\n        }\n        return evicted;\n    };\n    EntityStore.prototype.clear = function () {\n        this.replace(null);\n    };\n    EntityStore.prototype.replace = function (newData) {\n        var _this = this;\n        Object.keys(this.data).forEach(function (dataId) {\n            if (!(newData && hasOwn.call(newData, dataId))) {\n                _this.delete(dataId);\n            }\n        });\n        if (newData) {\n            Object.keys(newData).forEach(function (dataId) {\n                _this.merge(dataId, newData[dataId]);\n            });\n        }\n    };\n    EntityStore.prototype.retain = function (rootId) {\n        return this.rootIds[rootId] = (this.rootIds[rootId] || 0) + 1;\n    };\n    EntityStore.prototype.release = function (rootId) {\n        if (this.rootIds[rootId] > 0) {\n            var count = --this.rootIds[rootId];\n            if (!count)\n                delete this.rootIds[rootId];\n            return count;\n        }\n        return 0;\n    };\n    EntityStore.prototype.getRootIdSet = function (ids) {\n        if (ids === void 0) { ids = new Set(); }\n        Object.keys(this.rootIds).forEach(ids.add, ids);\n        if (this instanceof Layer) {\n            this.parent.getRootIdSet(ids);\n        }\n        return ids;\n    };\n    EntityStore.prototype.gc = function () {\n        var _this = this;\n        var ids = this.getRootIdSet();\n        var snapshot = this.toObject();\n        ids.forEach(function (id) {\n            if (hasOwn.call(snapshot, id)) {\n                Object.keys(_this.findChildRefIds(id)).forEach(ids.add, ids);\n                delete snapshot[id];\n            }\n        });\n        var idsToRemove = Object.keys(snapshot);\n        if (idsToRemove.length) {\n            var root_1 = this;\n            while (root_1 instanceof Layer)\n                root_1 = root_1.parent;\n            idsToRemove.forEach(function (id) { return root_1.delete(id); });\n        }\n        return idsToRemove;\n    };\n    EntityStore.prototype.findChildRefIds = function (dataId) {\n        if (!hasOwn.call(this.refs, dataId)) {\n            var found_1 = this.refs[dataId] = Object.create(null);\n            var workSet_1 = new Set([this.data[dataId]]);\n            var canTraverse_1 = function (obj) { return obj !== null && typeof obj === 'object'; };\n            workSet_1.forEach(function (obj) {\n                if (isReference(obj)) {\n                    found_1[obj.__ref] = true;\n                }\n                else if (canTraverse_1(obj)) {\n                    Object.values(obj)\n                        .filter(canTraverse_1)\n                        .forEach(workSet_1.add, workSet_1);\n                }\n            });\n        }\n        return this.refs[dataId];\n    };\n    EntityStore.prototype.makeCacheKey = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        return this.group.keyMaker.lookupArray(args);\n    };\n    return EntityStore;\n}());\nexport { EntityStore };\nvar CacheGroup = (function () {\n    function CacheGroup(caching) {\n        this.caching = caching;\n        this.d = null;\n        this.keyMaker = new KeyTrie(canUseWeakMap);\n        this.d = caching ? dep() : null;\n    }\n    CacheGroup.prototype.depend = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d(makeDepKey(dataId, storeFieldName));\n        }\n    };\n    CacheGroup.prototype.dirty = function (dataId, storeFieldName) {\n        if (this.d) {\n            this.d.dirty(makeDepKey(dataId, storeFieldName));\n        }\n    };\n    return CacheGroup;\n}());\nfunction makeDepKey(dataId, storeFieldName) {\n    return fieldNameFromStoreName(storeFieldName) + '#' + dataId;\n}\n(function (EntityStore) {\n    var Root = (function (_super) {\n        __extends(Root, _super);\n        function Root(_a) {\n            var policies = _a.policies, _b = _a.resultCaching, resultCaching = _b === void 0 ? true : _b, seed = _a.seed;\n            var _this = _super.call(this, policies, new CacheGroup(resultCaching)) || this;\n            _this.sharedLayerGroup = new CacheGroup(resultCaching);\n            if (seed)\n                _this.replace(seed);\n            return _this;\n        }\n        Root.prototype.addLayer = function (layerId, replay) {\n            return new Layer(layerId, this, replay, this.sharedLayerGroup);\n        };\n        Root.prototype.removeLayer = function () {\n            return this;\n        };\n        return Root;\n    }(EntityStore));\n    EntityStore.Root = Root;\n})(EntityStore || (EntityStore = {}));\nvar Layer = (function (_super) {\n    __extends(Layer, _super);\n    function Layer(id, parent, replay, group) {\n        var _this = _super.call(this, parent.policies, group) || this;\n        _this.id = id;\n        _this.parent = parent;\n        _this.replay = replay;\n        _this.group = group;\n        replay(_this);\n        return _this;\n    }\n    Layer.prototype.addLayer = function (layerId, replay) {\n        return new Layer(layerId, this, replay, this.group);\n    };\n    Layer.prototype.removeLayer = function (layerId) {\n        var _this = this;\n        var parent = this.parent.removeLayer(layerId);\n        if (layerId === this.id) {\n            if (this.group.caching) {\n                Object.keys(this.data).forEach(function (dataId) {\n                    if (_this.data[dataId] !== parent.lookup(dataId)) {\n                        _this.delete(dataId);\n                    }\n                });\n            }\n            return parent;\n        }\n        if (parent === this.parent)\n            return this;\n        return parent.addLayer(this.id, this.replay);\n    };\n    Layer.prototype.toObject = function () {\n        return __assign(__assign({}, this.parent.toObject()), this.data);\n    };\n    Layer.prototype.findChildRefIds = function (dataId) {\n        var fromParent = this.parent.findChildRefIds(dataId);\n        return hasOwn.call(this.data, dataId) ? __assign(__assign({}, fromParent), _super.prototype.findChildRefIds.call(this, dataId)) : fromParent;\n    };\n    return Layer;\n}(EntityStore));\nfunction storeObjectReconciler(existingObject, incomingObject, property) {\n    var existingValue = existingObject[property];\n    var incomingValue = incomingObject[property];\n    return equal(existingValue, incomingValue) ? existingValue : incomingValue;\n}\nexport function supportsResultCaching(store) {\n    return !!(store instanceof EntityStore && store.group.caching);\n}\n//# sourceMappingURL=entityStore.js.map"]},"metadata":{},"sourceType":"module"}