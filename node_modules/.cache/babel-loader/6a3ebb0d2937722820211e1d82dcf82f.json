{"ast":null,"code":"import { __assign, __spreadArrays } from 'tslib';\nimport { invariant } from 'ts-invariant';\nimport { createFragmentMap } from './fragments.js';\nimport { isField, isInlineFragment } from './storeUtils.js';\nimport { checkDocument, getFragmentDefinitions, getOperationDefinition, getFragmentDefinition, getMainDefinition } from './getFromAST.js';\nimport { visit } from 'graphql/language/visitor';\nimport { filterInPlace } from '../common/filterInPlace.js';\nvar TYPENAME_FIELD = {\n  kind: 'Field',\n  name: {\n    kind: 'Name',\n    value: '__typename'\n  }\n};\nfunction isEmpty(op, fragments) {\n  return op.selectionSet.selections.every(function (selection) {\n    return selection.kind === 'FragmentSpread' && isEmpty(fragments[selection.name.value], fragments);\n  });\n}\nfunction nullIfDocIsEmpty(doc) {\n  return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc))) ? null : doc;\n}\nfunction getDirectiveMatcher(directives) {\n  return function directiveMatcher(directive) {\n    return directives.some(function (dir) {\n      return dir.name && dir.name === directive.name.value || dir.test && dir.test(directive);\n    });\n  };\n}\nfunction removeDirectivesFromDocument(directives, doc) {\n  var variablesInUse = Object.create(null);\n  var variablesToRemove = [];\n  var fragmentSpreadsInUse = Object.create(null);\n  var fragmentSpreadsToRemove = [];\n  var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n    Variable: {\n      enter: function (node, _key, parent) {\n        if (parent.kind !== 'VariableDefinition') {\n          variablesInUse[node.name.value] = true;\n        }\n      }\n    },\n    Field: {\n      enter: function (node) {\n        if (directives && node.directives) {\n          var shouldRemoveField = directives.some(function (directive) {\n            return directive.remove;\n          });\n          if (shouldRemoveField && node.directives && node.directives.some(getDirectiveMatcher(directives))) {\n            if (node.arguments) {\n              node.arguments.forEach(function (arg) {\n                if (arg.value.kind === 'Variable') {\n                  variablesToRemove.push({\n                    name: arg.value.name.value\n                  });\n                }\n              });\n            }\n            if (node.selectionSet) {\n              getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                fragmentSpreadsToRemove.push({\n                  name: frag.name.value\n                });\n              });\n            }\n            return null;\n          }\n        }\n      }\n    },\n    FragmentSpread: {\n      enter: function (node) {\n        fragmentSpreadsInUse[node.name.value] = true;\n      }\n    },\n    Directive: {\n      enter: function (node) {\n        if (getDirectiveMatcher(directives)(node)) {\n          return null;\n        }\n      }\n    }\n  }));\n  if (modifiedDoc && filterInPlace(variablesToRemove, function (v) {\n    return !!v.name && !variablesInUse[v.name];\n  }).length) {\n    modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n  }\n  if (modifiedDoc && filterInPlace(fragmentSpreadsToRemove, function (fs) {\n    return !!fs.name && !fragmentSpreadsInUse[fs.name];\n  }).length) {\n    modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n  }\n  return modifiedDoc;\n}\nfunction addTypenameToDocument(doc) {\n  return visit(checkDocument(doc), {\n    SelectionSet: {\n      enter: function (node, _key, parent) {\n        if (parent && parent.kind === 'OperationDefinition') {\n          return;\n        }\n        var selections = node.selections;\n        if (!selections) {\n          return;\n        }\n        var skip = selections.some(function (selection) {\n          return isField(selection) && (selection.name.value === '__typename' || selection.name.value.lastIndexOf('__', 0) === 0);\n        });\n        if (skip) {\n          return;\n        }\n        var field = parent;\n        if (isField(field) && field.directives && field.directives.some(function (d) {\n          return d.name.value === 'export';\n        })) {\n          return;\n        }\n        return __assign(__assign({}, node), {\n          selections: __spreadArrays(selections, [TYPENAME_FIELD])\n        });\n      }\n    }\n  });\n}\naddTypenameToDocument.added = function (field) {\n  return field === TYPENAME_FIELD;\n};\nvar connectionRemoveConfig = {\n  test: function (directive) {\n    var willRemove = directive.name.value === 'connection';\n    if (willRemove) {\n      if (!directive.arguments || !directive.arguments.some(function (arg) {\n        return arg.name.value === 'key';\n      })) {\n        process.env.NODE_ENV === \"production\" || invariant.warn('Removing an @connection directive even though it does not have a key. ' + 'You may want to use the key parameter to specify a store key.');\n      }\n    }\n    return willRemove;\n  }\n};\nfunction removeConnectionDirectiveFromDocument(doc) {\n  return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction getArgumentMatcher(config) {\n  return function argumentMatcher(argument) {\n    return config.some(function (aConfig) {\n      return argument.value && argument.value.kind === 'Variable' && argument.value.name && (aConfig.name === argument.value.name.value || aConfig.test && aConfig.test(argument));\n    });\n  };\n}\nfunction removeArgumentsFromDocument(config, doc) {\n  var argMatcher = getArgumentMatcher(config);\n  return nullIfDocIsEmpty(visit(doc, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function (varDef) {\n            return !config.some(function (arg) {\n              return arg.name === varDef.variable.name.value;\n            });\n          }) : []\n        });\n      }\n    },\n    Field: {\n      enter: function (node) {\n        var shouldRemoveField = config.some(function (argConfig) {\n          return argConfig.remove;\n        });\n        if (shouldRemoveField) {\n          var argMatchCount_1 = 0;\n          if (node.arguments) {\n            node.arguments.forEach(function (arg) {\n              if (argMatcher(arg)) {\n                argMatchCount_1 += 1;\n              }\n            });\n          }\n          if (argMatchCount_1 === 1) {\n            return null;\n          }\n        }\n      }\n    },\n    Argument: {\n      enter: function (node) {\n        if (argMatcher(node)) {\n          return null;\n        }\n      }\n    }\n  }));\n}\nfunction removeFragmentSpreadFromDocument(config, doc) {\n  function enter(node) {\n    if (config.some(function (def) {\n      return def.name === node.name.value;\n    })) {\n      return null;\n    }\n  }\n  return nullIfDocIsEmpty(visit(doc, {\n    FragmentSpread: {\n      enter: enter\n    },\n    FragmentDefinition: {\n      enter: enter\n    }\n  }));\n}\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n  var allFragments = [];\n  selectionSet.selections.forEach(function (selection) {\n    if ((isField(selection) || isInlineFragment(selection)) && selection.selectionSet) {\n      getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) {\n        return allFragments.push(frag);\n      });\n    } else if (selection.kind === 'FragmentSpread') {\n      allFragments.push(selection);\n    }\n  });\n  return allFragments;\n}\nfunction buildQueryFromSelectionSet(document) {\n  var definition = getMainDefinition(document);\n  var definitionOperation = definition.operation;\n  if (definitionOperation === 'query') {\n    return document;\n  }\n  var modifiedDoc = visit(document, {\n    OperationDefinition: {\n      enter: function (node) {\n        return __assign(__assign({}, node), {\n          operation: 'query'\n        });\n      }\n    }\n  });\n  return modifiedDoc;\n}\nfunction removeClientSetsFromDocument(document) {\n  checkDocument(document);\n  var modifiedDoc = removeDirectivesFromDocument([{\n    test: function (directive) {\n      return directive.name.value === 'client';\n    },\n    remove: true\n  }], document);\n  if (modifiedDoc) {\n    modifiedDoc = visit(modifiedDoc, {\n      FragmentDefinition: {\n        enter: function (node) {\n          if (node.selectionSet) {\n            var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n              return isField(selection) && selection.name.value === '__typename';\n            });\n            if (isTypenameOnly) {\n              return null;\n            }\n          }\n        }\n      }\n    });\n  }\n  return modifiedDoc;\n}\nexport { addTypenameToDocument, buildQueryFromSelectionSet, removeArgumentsFromDocument, removeClientSetsFromDocument, removeConnectionDirectiveFromDocument, removeDirectivesFromDocument, removeFragmentSpreadFromDocument };","map":{"version":3,"mappings":"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","names":["TYPENAME_FIELD","kind","name","value","isEmpty","op","fragments","selectionSet","selections","every","selection","nullIfDocIsEmpty","doc","getOperationDefinition","getFragmentDefinition","createFragmentMap","getFragmentDefinitions","getDirectiveMatcher","directives","directiveMatcher","directive","some","dir","test","removeDirectivesFromDocument","variablesInUse","Object","create","variablesToRemove","fragmentSpreadsInUse","fragmentSpreadsToRemove","modifiedDoc","visit","Variable","enter","node","_key","parent","Field","shouldRemoveField","remove","arguments","forEach","arg","push","getAllFragmentSpreadsFromSelectionSet","frag","FragmentSpread","Directive","filterInPlace","v","length","removeArgumentsFromDocument","fs","removeFragmentSpreadFromDocument","addTypenameToDocument","checkDocument","SelectionSet","skip","isField","lastIndexOf","field","d","__assign","__spreadArrays","added","connectionRemoveConfig","willRemove","process","env","NODE_ENV","invariant","warn","removeConnectionDirectiveFromDocument","getArgumentMatcher","config","argumentMatcher","argument","aConfig","argMatcher","OperationDefinition","variableDefinitions","filter","varDef","variable","argConfig","argMatchCount_1","Argument","def","FragmentDefinition","allFragments","isInlineFragment","buildQueryFromSelectionSet","document","definition","getMainDefinition","definitionOperation","operation","removeClientSetsFromDocument","isTypenameOnly"],"sources":["transform.js"],"sourcesContent":["import { __assign, __spreadArrays } from \"tslib\";\nimport { visit } from 'graphql/language/visitor';\nimport { invariant } from 'ts-invariant';\nimport { checkDocument, getOperationDefinition, getFragmentDefinition, getFragmentDefinitions, getMainDefinition, } from './getFromAST';\nimport { filterInPlace } from '../common/filterInPlace';\nimport { isField, isInlineFragment } from './storeUtils';\nimport { createFragmentMap, } from './fragments';\nvar TYPENAME_FIELD = {\n    kind: 'Field',\n    name: {\n        kind: 'Name',\n        value: '__typename',\n    },\n};\nfunction isEmpty(op, fragments) {\n    return op.selectionSet.selections.every(function (selection) {\n        return selection.kind === 'FragmentSpread' &&\n            isEmpty(fragments[selection.name.value], fragments);\n    });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc)))\n        ? null\n        : doc;\n}\nfunction getDirectiveMatcher(directives) {\n    return function directiveMatcher(directive) {\n        return directives.some(function (dir) {\n            return (dir.name && dir.name === directive.name.value) ||\n                (dir.test && dir.test(directive));\n        });\n    };\n}\nexport function removeDirectivesFromDocument(directives, doc) {\n    var variablesInUse = Object.create(null);\n    var variablesToRemove = [];\n    var fragmentSpreadsInUse = Object.create(null);\n    var fragmentSpreadsToRemove = [];\n    var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n        Variable: {\n            enter: function (node, _key, parent) {\n                if (parent.kind !== 'VariableDefinition') {\n                    variablesInUse[node.name.value] = true;\n                }\n            },\n        },\n        Field: {\n            enter: function (node) {\n                if (directives && node.directives) {\n                    var shouldRemoveField = directives.some(function (directive) { return directive.remove; });\n                    if (shouldRemoveField &&\n                        node.directives &&\n                        node.directives.some(getDirectiveMatcher(directives))) {\n                        if (node.arguments) {\n                            node.arguments.forEach(function (arg) {\n                                if (arg.value.kind === 'Variable') {\n                                    variablesToRemove.push({\n                                        name: arg.value.name.value,\n                                    });\n                                }\n                            });\n                        }\n                        if (node.selectionSet) {\n                            getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                                fragmentSpreadsToRemove.push({\n                                    name: frag.name.value,\n                                });\n                            });\n                        }\n                        return null;\n                    }\n                }\n            },\n        },\n        FragmentSpread: {\n            enter: function (node) {\n                fragmentSpreadsInUse[node.name.value] = true;\n            },\n        },\n        Directive: {\n            enter: function (node) {\n                if (getDirectiveMatcher(directives)(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n    if (modifiedDoc &&\n        filterInPlace(variablesToRemove, function (v) { return !!v.name && !variablesInUse[v.name]; }).length) {\n        modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n    }\n    if (modifiedDoc &&\n        filterInPlace(fragmentSpreadsToRemove, function (fs) { return !!fs.name && !fragmentSpreadsInUse[fs.name]; })\n            .length) {\n        modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n    }\n    return modifiedDoc;\n}\nexport function addTypenameToDocument(doc) {\n    return visit(checkDocument(doc), {\n        SelectionSet: {\n            enter: function (node, _key, parent) {\n                if (parent &&\n                    parent.kind === 'OperationDefinition') {\n                    return;\n                }\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                var skip = selections.some(function (selection) {\n                    return (isField(selection) &&\n                        (selection.name.value === '__typename' ||\n                            selection.name.value.lastIndexOf('__', 0) === 0));\n                });\n                if (skip) {\n                    return;\n                }\n                var field = parent;\n                if (isField(field) &&\n                    field.directives &&\n                    field.directives.some(function (d) { return d.name.value === 'export'; })) {\n                    return;\n                }\n                return __assign(__assign({}, node), { selections: __spreadArrays(selections, [TYPENAME_FIELD]) });\n            },\n        },\n    });\n}\naddTypenameToDocument.added = function (field) {\n    return field === TYPENAME_FIELD;\n};\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === 'connection';\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {\n                invariant.warn('Removing an @connection directive even though it does not have a key. ' +\n                    'You may want to use the key parameter to specify a store key.');\n            }\n        }\n        return willRemove;\n    },\n};\nexport function removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    return (!!selectionSet &&\n        selectionSet.selections &&\n        selectionSet.selections.some(function (selection) {\n            return hasDirectivesInSelection(directives, selection, nestedCheck);\n        }));\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (!isField(selection)) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return (selection.directives.some(getDirectiveMatcher(directives)) ||\n        (nestedCheck &&\n            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function (aConfig) {\n            return argument.value &&\n                argument.value.kind === 'Variable' &&\n                argument.value.name &&\n                (aConfig.name === argument.value.name.value ||\n                    (aConfig.test && aConfig.test(argument)));\n        });\n    };\n}\nexport function removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty(visit(doc, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign(__assign({}, node), { variableDefinitions: node.variableDefinitions ? node.variableDefinitions.filter(function (varDef) {\n                        return !config.some(function (arg) { return arg.name === varDef.variable.name.value; });\n                    }) : [] });\n            },\n        },\n        Field: {\n            enter: function (node) {\n                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    if (node.arguments) {\n                        node.arguments.forEach(function (arg) {\n                            if (argMatcher(arg)) {\n                                argMatchCount_1 += 1;\n                            }\n                        });\n                    }\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            },\n        },\n        Argument: {\n            enter: function (node) {\n                if (argMatcher(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n}\nexport function removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function (def) { return def.name === node.name.value; })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty(visit(doc, {\n        FragmentSpread: { enter: enter },\n        FragmentDefinition: { enter: enter },\n    }));\n}\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n    var allFragments = [];\n    selectionSet.selections.forEach(function (selection) {\n        if ((isField(selection) || isInlineFragment(selection)) &&\n            selection.selectionSet) {\n            getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) { return allFragments.push(frag); });\n        }\n        else if (selection.kind === 'FragmentSpread') {\n            allFragments.push(selection);\n        }\n    });\n    return allFragments;\n}\nexport function buildQueryFromSelectionSet(document) {\n    var definition = getMainDefinition(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === 'query') {\n        return document;\n    }\n    var modifiedDoc = visit(document, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign(__assign({}, node), { operation: 'query' });\n            },\n        },\n    });\n    return modifiedDoc;\n}\nexport function removeClientSetsFromDocument(document) {\n    checkDocument(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function (directive) { return directive.name.value === 'client'; },\n            remove: true,\n        },\n    ], document);\n    if (modifiedDoc) {\n        modifiedDoc = visit(modifiedDoc, {\n            FragmentDefinition: {\n                enter: function (node) {\n                    if (node.selectionSet) {\n                        var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n                            return isField(selection) && selection.name.value === '__typename';\n                        });\n                        if (isTypenameOnly) {\n                            return null;\n                        }\n                    }\n                },\n            },\n        });\n    }\n    return modifiedDoc;\n}\n//# sourceMappingURL=transform.js.map"]},"metadata":{},"sourceType":"module"}