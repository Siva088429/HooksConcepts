{"ast":null,"code":"import { getFragmentQueryDocument } from '../../utilities/graphql/fragments.js';\nimport { wrap } from 'optimism';\nvar ApolloCache = function () {\n  function ApolloCache() {\n    this.getFragmentDoc = wrap(getFragmentQueryDocument);\n  }\n  ApolloCache.prototype.transformDocument = function (document) {\n    return document;\n  };\n  ApolloCache.prototype.identify = function (object) {\n    return;\n  };\n  ApolloCache.prototype.gc = function () {\n    return [];\n  };\n  ApolloCache.prototype.modify = function (options) {\n    return false;\n  };\n  ApolloCache.prototype.transformForLink = function (document) {\n    return document;\n  };\n  ApolloCache.prototype.readQuery = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return this.read({\n      rootId: options.id || 'ROOT_QUERY',\n      query: options.query,\n      variables: options.variables,\n      optimistic: optimistic\n    });\n  };\n  ApolloCache.prototype.readFragment = function (options, optimistic) {\n    if (optimistic === void 0) {\n      optimistic = false;\n    }\n    return this.read({\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      variables: options.variables,\n      rootId: options.id,\n      optimistic: optimistic\n    });\n  };\n  ApolloCache.prototype.writeQuery = function (options) {\n    return this.write({\n      dataId: options.id || 'ROOT_QUERY',\n      result: options.data,\n      query: options.query,\n      variables: options.variables,\n      broadcast: options.broadcast\n    });\n  };\n  ApolloCache.prototype.writeFragment = function (options) {\n    return this.write({\n      dataId: options.id,\n      result: options.data,\n      variables: options.variables,\n      query: this.getFragmentDoc(options.fragment, options.fragmentName),\n      broadcast: options.broadcast\n    });\n  };\n  return ApolloCache;\n}();\nexport { ApolloCache };","map":{"version":3,"mappings":";;AAEG,IAACA,WAAW,GAAI,YAAY;EAC3B,SAASA,WAAW,GAAG;IACnB,IAAI,CAACC,cAAc,GAAGC,IAAI,CAACC,wBAAwB,CAAC;EAC5D;EACIH,WAAW,CAACI,SAAS,CAACC,iBAAiB,GAAG,UAAUC,QAAQ,EAAE;IAC1D,OAAOA,QAAQ;EACvB,CAAK;EACDN,WAAW,CAACI,SAAS,CAACG,QAAQ,GAAG,UAAUC,MAAM,EAAE;IAC/C;EACR,CAAK;EACDR,WAAW,CAACI,SAAS,CAACK,EAAE,GAAG,YAAY;IACnC,OAAO,EAAE;EACjB,CAAK;EACDT,WAAW,CAACI,SAAS,CAACM,MAAM,GAAG,UAAUC,OAAO,EAAE;IAC9C,OAAO,KAAK;EACpB,CAAK;EACDX,WAAW,CAACI,SAAS,CAACQ,gBAAgB,GAAG,UAAUN,QAAQ,EAAE;IACzD,OAAOA,QAAQ;EACvB,CAAK;EACDN,WAAW,CAACI,SAAS,CAACS,SAAS,GAAG,UAAUF,OAAO,EAAEG,UAAU,EAAE;IAC7D,IAAIA,UAAU,KAAK,KAAK,CAAC,EAAE;MAAEA,UAAU,GAAG,KAAK;IAAC;IAChD,OAAO,IAAI,CAACC,IAAI,CAAC;MACbC,MAAM,EAAEL,OAAO,CAACM,EAAE,IAAI,YAAY;MAClCC,KAAK,EAAEP,OAAO,CAACO,KAAK;MACpBC,SAAS,EAAER,OAAO,CAACQ,SAAS;MAC5BL,UAAU,EAAEA;IACxB,CAAS,CAAC;EACV,CAAK;EACDd,WAAW,CAACI,SAAS,CAACgB,YAAY,GAAG,UAAUT,OAAO,EAAEG,UAAU,EAAE;IAChE,IAAIA,UAAU,KAAK,KAAK,CAAC,EAAE;MAAEA,UAAU,GAAG,KAAK;IAAC;IAChD,OAAO,IAAI,CAACC,IAAI,CAAC;MACbG,KAAK,EAAE,IAAI,CAACjB,cAAc,CAACU,OAAO,CAACU,QAAQ,EAAEV,OAAO,CAACW,YAAY,CAAC;MAClEH,SAAS,EAAER,OAAO,CAACQ,SAAS;MAC5BH,MAAM,EAAEL,OAAO,CAACM,EAAE;MAClBH,UAAU,EAAEA;IACxB,CAAS,CAAC;EACV,CAAK;EACDd,WAAW,CAACI,SAAS,CAACmB,UAAU,GAAG,UAAUZ,OAAO,EAAE;IAClD,OAAO,IAAI,CAACa,KAAK,CAAC;MACdC,MAAM,EAAEd,OAAO,CAACM,EAAE,IAAI,YAAY;MAClCS,MAAM,EAAEf,OAAO,CAACgB,IAAI;MACpBT,KAAK,EAAEP,OAAO,CAACO,KAAK;MACpBC,SAAS,EAAER,OAAO,CAACQ,SAAS;MAC5BS,SAAS,EAAEjB,OAAO,CAACiB;IAC/B,CAAS,CAAC;EACV,CAAK;EACD5B,WAAW,CAACI,SAAS,CAACyB,aAAa,GAAG,UAAUlB,OAAO,EAAE;IACrD,OAAO,IAAI,CAACa,KAAK,CAAC;MACdC,MAAM,EAAEd,OAAO,CAACM,EAAE;MAClBS,MAAM,EAAEf,OAAO,CAACgB,IAAI;MACpBR,SAAS,EAAER,OAAO,CAACQ,SAAS;MAC5BD,KAAK,EAAE,IAAI,CAACjB,cAAc,CAACU,OAAO,CAACU,QAAQ,EAAEV,OAAO,CAACW,YAAY,CAAC;MAClEM,SAAS,EAAEjB,OAAO,CAACiB;IAC/B,CAAS,CAAC;EACV,CAAK;EACD,OAAO5B,WAAW;AACtB,CAAC,EAAE","names":["ApolloCache","getFragmentDoc","wrap","getFragmentQueryDocument","prototype","transformDocument","document","identify","object","gc","modify","options","transformForLink","readQuery","optimistic","read","rootId","id","query","variables","readFragment","fragment","fragmentName","writeQuery","write","dataId","result","data","broadcast","writeFragment"],"sources":["cache.js"],"sourcesContent":["import { wrap } from 'optimism';\nimport { getFragmentQueryDocument } from '../../utilities/graphql/fragments';\nvar ApolloCache = (function () {\n    function ApolloCache() {\n        this.getFragmentDoc = wrap(getFragmentQueryDocument);\n    }\n    ApolloCache.prototype.transformDocument = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.identify = function (object) {\n        return;\n    };\n    ApolloCache.prototype.gc = function () {\n        return [];\n    };\n    ApolloCache.prototype.modify = function (options) {\n        return false;\n    };\n    ApolloCache.prototype.transformForLink = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.read({\n            rootId: options.id || 'ROOT_QUERY',\n            query: options.query,\n            variables: options.variables,\n            optimistic: optimistic,\n        });\n    };\n    ApolloCache.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.read({\n            query: this.getFragmentDoc(options.fragment, options.fragmentName),\n            variables: options.variables,\n            rootId: options.id,\n            optimistic: optimistic,\n        });\n    };\n    ApolloCache.prototype.writeQuery = function (options) {\n        return this.write({\n            dataId: options.id || 'ROOT_QUERY',\n            result: options.data,\n            query: options.query,\n            variables: options.variables,\n            broadcast: options.broadcast,\n        });\n    };\n    ApolloCache.prototype.writeFragment = function (options) {\n        return this.write({\n            dataId: options.id,\n            result: options.data,\n            variables: options.variables,\n            query: this.getFragmentDoc(options.fragment, options.fragmentName),\n            broadcast: options.broadcast,\n        });\n    };\n    return ApolloCache;\n}());\nexport { ApolloCache };\n//# sourceMappingURL=cache.js.map"]},"metadata":{},"sourceType":"module"}