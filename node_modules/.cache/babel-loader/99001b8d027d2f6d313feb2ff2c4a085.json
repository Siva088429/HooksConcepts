{"ast":null,"code":"import { __assign } from 'tslib';\nimport { useContext, useReducer, useRef, useEffect } from 'react';\nimport { getApolloContext } from '../../context/ApolloContext.js';\nimport { QueryData } from '../../data/QueryData.js';\nimport { useDeepMemo } from './useDeepMemo.js';\nfunction useBaseQuery(query, options, lazy) {\n  if (lazy === void 0) {\n    lazy = false;\n  }\n  var context = useContext(getApolloContext());\n  var _a = useReducer(function (x) {\n      return x + 1;\n    }, 0),\n    tick = _a[0],\n    forceUpdate = _a[1];\n  var updatedOptions = options ? __assign(__assign({}, options), {\n    query: query\n  }) : {\n    query: query\n  };\n  var queryDataRef = useRef();\n  var queryData = queryDataRef.current || new QueryData({\n    options: updatedOptions,\n    context: context,\n    onNewData: function () {\n      if (!queryData.ssrInitiated()) {\n        Promise.resolve().then(forceUpdate);\n      } else {\n        forceUpdate();\n      }\n    }\n  });\n  queryData.setOptions(updatedOptions);\n  queryData.context = context;\n  if (queryData.ssrInitiated() && !queryDataRef.current) {\n    queryDataRef.current = queryData;\n  }\n  var memo = {\n    options: __assign(__assign({}, updatedOptions), {\n      onError: undefined,\n      onCompleted: undefined\n    }),\n    context: context,\n    tick: tick\n  };\n  var result = useDeepMemo(function () {\n    return lazy ? queryData.executeLazy() : queryData.execute();\n  }, memo);\n  var queryResult = lazy ? result[1] : result;\n  useEffect(function () {\n    if (!queryDataRef.current) {\n      queryDataRef.current = queryData;\n    }\n    return function () {\n      return queryData.cleanup();\n    };\n  }, []);\n  useEffect(function () {\n    return queryData.afterExecute({\n      lazy: lazy\n    });\n  }, [queryResult.loading, queryResult.networkStatus, queryResult.error, queryResult.data]);\n  return result;\n}\nexport { useBaseQuery };","map":{"version":3,"mappings":";;;;;AAKO,SAASA,YAAY,CAACC,KAAK,EAAEC,OAAO,EAAEC,IAAI,EAAE;EAC/C,IAAIA,IAAI,KAAK,KAAK,CAAC,EAAE;IAAEA,IAAI,GAAG,KAAK;EAAC;EACpC,IAAIC,OAAO,GAAGC,UAAU,CAACC,gBAAgB,EAAE,CAAC;EAC5C,IAAIC,EAAE,GAAGC,UAAU,CAAC,UAAUC,CAAC,EAAE;MAAE,OAAOA,CAAC,GAAG,CAAC;IAAC,CAAE,EAAE,CAAC,CAAC;IAAEC,IAAI,GAAGH,EAAE,CAAC,CAAC,CAAC;IAAEI,WAAW,GAAGJ,EAAE,CAAC,CAAC,CAAC;EACzF,IAAIK,cAAc,GAAGV,OAAO,GAAGW,QAAQ,CAACA,QAAQ,CAAC,EAAE,EAAEX,OAAO,CAAC,EAAE;IAAED,KAAK,EAAEA;EAAK,CAAE,CAAC,GAAG;IAAEA,KAAK,EAAEA;EAAK,CAAE;EACnG,IAAIa,YAAY,GAAGC,MAAM,EAAE;EAC3B,IAAIC,SAAS,GAAGF,YAAY,CAACG,OAAO,IAChC,IAAIC,SAAS,CAAC;IACVhB,OAAO,EAAEU,cAAc;IACvBR,OAAO,EAAEA,OAAO;IAChBe,SAAS,EAAE,YAAY;MACnB,IAAI,CAACH,SAAS,CAACI,YAAY,EAAE,EAAE;QAC3BC,OAAO,CAACC,OAAO,EAAE,CAACC,IAAI,CAACZ,WAAW,CAAC;MACvD,CAAiB,MACI;QACDA,WAAW,EAAE;MACjC;IACA;EACA,CAAS,CAAC;EACNK,SAAS,CAACQ,UAAU,CAACZ,cAAc,CAAC;EACpCI,SAAS,CAACZ,OAAO,GAAGA,OAAO;EAC3B,IAAIY,SAAS,CAACI,YAAY,EAAE,IAAI,CAACN,YAAY,CAACG,OAAO,EAAE;IACnDH,YAAY,CAACG,OAAO,GAAGD,SAAS;EACxC;EACI,IAAIS,IAAI,GAAG;IACPvB,OAAO,EAAEW,QAAQ,CAACA,QAAQ,CAAC,EAAE,EAAED,cAAc,CAAC,EAAE;MAAEc,OAAO,EAAEC,SAAS;MAAEC,WAAW,EAAED;IAAS,CAAE,CAAC;IAC/FvB,OAAO,EAAEA,OAAO;IAChBM,IAAI,EAAEA;EACd,CAAK;EACD,IAAImB,MAAM,GAAGC,WAAW,CAAC,YAAY;IAAE,OAAQ3B,IAAI,GAAGa,SAAS,CAACe,WAAW,EAAE,GAAGf,SAAS,CAACgB,OAAO,EAAE;EAAE,CAAE,EAAEP,IAAI,CAAC;EAC9G,IAAIQ,WAAW,GAAG9B,IAAI,GAChB0B,MAAM,CAAC,CAAC,CAAC,GACTA,MAAM;EACZK,SAAS,CAAC,YAAY;IAClB,IAAI,CAACpB,YAAY,CAACG,OAAO,EAAE;MACvBH,YAAY,CAACG,OAAO,GAAGD,SAAS;IAC5C;IACQ,OAAO,YAAY;MAAE,OAAOA,SAAS,CAACmB,OAAO,EAAE;IAAC,CAAE;EAC1D,CAAK,EAAE,EAAE,CAAC;EACND,SAAS,CAAC,YAAY;IAAE,OAAOlB,SAAS,CAACoB,YAAY,CAAC;MAAEjC,IAAI,EAAEA;IAAI,CAAE,CAAC;EAAC,CAAE,EAAE,CACtE8B,WAAW,CAACI,OAAO,EACnBJ,WAAW,CAACK,aAAa,EACzBL,WAAW,CAACM,KAAK,EACjBN,WAAW,CAACO,IAAI,CACnB,CAAC;EACF,OAAOX,MAAM;AACjB","names":["useBaseQuery","query","options","lazy","context","useContext","getApolloContext","_a","useReducer","x","tick","forceUpdate","updatedOptions","__assign","queryDataRef","useRef","queryData","current","QueryData","onNewData","ssrInitiated","Promise","resolve","then","setOptions","memo","onError","undefined","onCompleted","result","useDeepMemo","executeLazy","execute","queryResult","useEffect","cleanup","afterExecute","loading","networkStatus","error","data"],"sources":["useBaseQuery.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { useContext, useEffect, useReducer, useRef } from 'react';\nimport { QueryData } from '../../data/QueryData';\nimport { useDeepMemo } from './useDeepMemo';\nimport { getApolloContext } from '../../context/ApolloContext';\nexport function useBaseQuery(query, options, lazy) {\n    if (lazy === void 0) { lazy = false; }\n    var context = useContext(getApolloContext());\n    var _a = useReducer(function (x) { return x + 1; }, 0), tick = _a[0], forceUpdate = _a[1];\n    var updatedOptions = options ? __assign(__assign({}, options), { query: query }) : { query: query };\n    var queryDataRef = useRef();\n    var queryData = queryDataRef.current ||\n        new QueryData({\n            options: updatedOptions,\n            context: context,\n            onNewData: function () {\n                if (!queryData.ssrInitiated()) {\n                    Promise.resolve().then(forceUpdate);\n                }\n                else {\n                    forceUpdate();\n                }\n            }\n        });\n    queryData.setOptions(updatedOptions);\n    queryData.context = context;\n    if (queryData.ssrInitiated() && !queryDataRef.current) {\n        queryDataRef.current = queryData;\n    }\n    var memo = {\n        options: __assign(__assign({}, updatedOptions), { onError: undefined, onCompleted: undefined }),\n        context: context,\n        tick: tick\n    };\n    var result = useDeepMemo(function () { return (lazy ? queryData.executeLazy() : queryData.execute()); }, memo);\n    var queryResult = lazy\n        ? result[1]\n        : result;\n    useEffect(function () {\n        if (!queryDataRef.current) {\n            queryDataRef.current = queryData;\n        }\n        return function () { return queryData.cleanup(); };\n    }, []);\n    useEffect(function () { return queryData.afterExecute({ lazy: lazy }); }, [\n        queryResult.loading,\n        queryResult.networkStatus,\n        queryResult.error,\n        queryResult.data,\n    ]);\n    return result;\n}\n//# sourceMappingURL=useBaseQuery.js.map"]},"metadata":{},"sourceType":"module"}