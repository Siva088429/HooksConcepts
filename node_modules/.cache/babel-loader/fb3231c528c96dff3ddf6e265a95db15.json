{"ast":null,"code":"import { __extends, __assign } from 'tslib';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport Observable from 'zen-observable';\nimport 'symbol-observable';\nimport { getOperationDefinition } from '../utilities/graphql/getFromAST.js';\nimport { equal } from '@wry/equality';\nimport { tryFunctionOrLogError } from '../utilities/common/errorHandling.js';\nimport { isNonEmptyArray } from '../utilities/common/arrays.js';\nimport { ApolloError } from '../errors/ApolloError.js';\nimport { cloneDeep } from '../utilities/common/cloneDeep.js';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';\nimport { iterateObserversSafely } from '../utilities/observables/iteration.js';\nimport { Reobserver } from './Reobserver.js';\nvar hasError = function (storeValue, policy) {\n  if (policy === void 0) {\n    policy = 'none';\n  }\n  return storeValue && (storeValue.networkError || policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors));\n};\nvar ObservableQuery = function (_super) {\n  __extends(ObservableQuery, _super);\n  function ObservableQuery(_a) {\n    var queryManager = _a.queryManager,\n      options = _a.options;\n    var _this = _super.call(this, function (observer) {\n      return _this.onSubscribe(observer);\n    }) || this;\n    _this.observers = new Set();\n    _this.subscriptions = new Set();\n    _this.observer = {\n      next: function (result) {\n        if (_this.lastError || _this.isDifferentFromLastResult(result)) {\n          _this.updateLastResult(result);\n          iterateObserversSafely(_this.observers, 'next', result);\n        }\n      },\n      error: function (error) {\n        _this.updateLastResult(__assign(__assign({}, _this.lastResult), {\n          errors: error.graphQLErrors,\n          networkStatus: NetworkStatus.error,\n          loading: false\n        }));\n        iterateObserversSafely(_this.observers, 'error', _this.lastError = error);\n      }\n    };\n    _this.isTornDown = false;\n    _this.options = options;\n    _this.queryId = queryManager.generateQueryId();\n    var opDef = getOperationDefinition(options.query);\n    _this.queryName = opDef && opDef.name && opDef.name.value;\n    _this.queryManager = queryManager;\n    return _this;\n  }\n  Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n    get: function () {\n      return this.options.variables;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  ObservableQuery.prototype.result = function () {\n    var _this = this;\n    return new Promise(function (resolve, reject) {\n      var observer = {\n        next: function (result) {\n          resolve(result);\n          _this.observers.delete(observer);\n          if (!_this.observers.size) {\n            _this.queryManager.removeQuery(_this.queryId);\n          }\n          setTimeout(function () {\n            subscription.unsubscribe();\n          }, 0);\n        },\n        error: reject\n      };\n      var subscription = _this.subscribe(observer);\n    });\n  };\n  ObservableQuery.prototype.getCurrentResult = function () {\n    var _a = this,\n      lastResult = _a.lastResult,\n      lastError = _a.lastError,\n      fetchPolicy = _a.options.fetchPolicy;\n    var isNetworkFetchPolicy = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n    var networkStatus = lastError ? NetworkStatus.error : lastResult ? lastResult.networkStatus : isNetworkFetchPolicy ? NetworkStatus.loading : NetworkStatus.ready;\n    var result = {\n      data: !lastError && lastResult && lastResult.data || void 0,\n      error: lastError,\n      loading: isNetworkRequestInFlight(networkStatus),\n      networkStatus: networkStatus\n    };\n    if (this.isTornDown) {\n      return result;\n    }\n    var _b = this.getCurrentQueryResult(),\n      data = _b.data,\n      partial = _b.partial;\n    Object.assign(result, {\n      data: data,\n      partial: partial\n    });\n    var queryStoreValue = this.queryManager.getQueryStoreValue(this.queryId);\n    if (queryStoreValue) {\n      var networkStatus_1 = queryStoreValue.networkStatus;\n      if (hasError(queryStoreValue, this.options.errorPolicy)) {\n        return Object.assign(result, {\n          data: void 0,\n          networkStatus: networkStatus_1,\n          error: new ApolloError({\n            graphQLErrors: queryStoreValue.graphQLErrors,\n            networkError: queryStoreValue.networkError\n          })\n        });\n      }\n      if (queryStoreValue.variables) {\n        this.options.variables = __assign(__assign({}, this.options.variables), queryStoreValue.variables);\n      }\n      Object.assign(result, {\n        loading: isNetworkRequestInFlight(networkStatus_1),\n        networkStatus: networkStatus_1\n      });\n      if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n        result.errors = queryStoreValue.graphQLErrors;\n      }\n    }\n    if (partial) {\n      this.resetLastResults();\n    } else {\n      this.updateLastResult(result);\n    }\n    return result;\n  };\n  ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n    return !equal(this.lastResultSnapshot, newResult);\n  };\n  ObservableQuery.prototype.getLastResult = function () {\n    return this.lastResult;\n  };\n  ObservableQuery.prototype.getLastError = function () {\n    return this.lastError;\n  };\n  ObservableQuery.prototype.resetLastResults = function () {\n    delete this.lastResult;\n    delete this.lastResultSnapshot;\n    delete this.lastError;\n    this.isTornDown = false;\n  };\n  ObservableQuery.prototype.resetQueryStoreErrors = function () {\n    var queryStore = this.queryManager.getQueryStoreValue(this.queryId);\n    if (queryStore) {\n      queryStore.networkError = undefined;\n      queryStore.graphQLErrors = [];\n    }\n  };\n  ObservableQuery.prototype.refetch = function (variables) {\n    var fetchPolicy = this.options.fetchPolicy;\n    if (fetchPolicy === 'cache-only') {\n      return Promise.reject(process.env.NODE_ENV === \"production\" ? new InvariantError(3) : new InvariantError('cache-only fetchPolicy option should not be used together with query refetch.'));\n    }\n    if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'cache-and-network') {\n      fetchPolicy = 'network-only';\n    }\n    if (variables && !equal(this.options.variables, variables)) {\n      this.options.variables = __assign(__assign({}, this.options.variables), variables);\n    }\n    return this.newReobserver(false).reobserve({\n      fetchPolicy: fetchPolicy,\n      variables: this.options.variables,\n      pollInterval: 0\n    }, NetworkStatus.refetch);\n  };\n  ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n    var _this = this;\n    var combinedOptions = __assign(__assign({}, fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign({}, this.options), fetchMoreOptions), {\n      variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables)\n    })), {\n      fetchPolicy: \"no-cache\"\n    });\n    var qid = this.queryManager.generateQueryId();\n    return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n      _this.updateQuery(function (previousResult) {\n        var data = fetchMoreResult.data;\n        var updateQuery = fetchMoreOptions.updateQuery;\n        return updateQuery ? updateQuery(previousResult, {\n          fetchMoreResult: data,\n          variables: combinedOptions.variables\n        }) : data;\n      });\n      return fetchMoreResult;\n    }).finally(function () {\n      _this.queryManager.stopQuery(qid);\n      _this.reobserve();\n    });\n  };\n  ObservableQuery.prototype.subscribeToMore = function (options) {\n    var _this = this;\n    var subscription = this.queryManager.startGraphQLSubscription({\n      query: options.document,\n      variables: options.variables\n    }).subscribe({\n      next: function (subscriptionData) {\n        var updateQuery = options.updateQuery;\n        if (updateQuery) {\n          _this.updateQuery(function (previous, _a) {\n            var variables = _a.variables;\n            return updateQuery(previous, {\n              subscriptionData: subscriptionData,\n              variables: variables\n            });\n          });\n        }\n      },\n      error: function (err) {\n        if (options.onError) {\n          options.onError(err);\n          return;\n        }\n        process.env.NODE_ENV === \"production\" || invariant.error('Unhandled GraphQL subscription error', err);\n      }\n    });\n    this.subscriptions.add(subscription);\n    return function () {\n      if (_this.subscriptions.delete(subscription)) {\n        subscription.unsubscribe();\n      }\n    };\n  };\n  ObservableQuery.prototype.setOptions = function (newOptions) {\n    return this.reobserve(newOptions);\n  };\n  ObservableQuery.prototype.setVariables = function (variables) {\n    if (equal(this.variables, variables)) {\n      return this.observers.size ? this.result() : Promise.resolve();\n    }\n    this.options.variables = variables;\n    if (!this.observers.size) {\n      return Promise.resolve();\n    }\n    var fetchPolicy = this.options.fetchPolicy;\n    if (fetchPolicy !== 'cache-first' && fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n      fetchPolicy = 'cache-and-network';\n    }\n    return this.reobserve({\n      fetchPolicy: fetchPolicy,\n      variables: variables\n    }, NetworkStatus.setVariables);\n  };\n  ObservableQuery.prototype.updateQuery = function (mapFn) {\n    var _this = this;\n    var queryManager = this.queryManager;\n    var previousResult = this.getCurrentQueryResult(false).data;\n    var newResult = tryFunctionOrLogError(function () {\n      return mapFn(previousResult, {\n        variables: _this.variables\n      });\n    });\n    if (newResult) {\n      queryManager.cache.writeQuery({\n        query: this.options.query,\n        data: newResult,\n        variables: this.variables\n      });\n      queryManager.broadcastQueries();\n    }\n  };\n  ObservableQuery.prototype.getCurrentQueryResult = function (optimistic) {\n    var _a, _b;\n    if (optimistic === void 0) {\n      optimistic = true;\n    }\n    var fetchPolicy = this.options.fetchPolicy;\n    if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n      return {\n        data: (_a = this.lastResult) === null || _a === void 0 ? void 0 : _a.data,\n        partial: false\n      };\n    }\n    var _c = this.queryManager.cache.diff({\n        query: this.options.query,\n        variables: this.variables,\n        previousResult: (_b = this.lastResult) === null || _b === void 0 ? void 0 : _b.data,\n        returnPartialData: true,\n        optimistic: optimistic\n      }),\n      result = _c.result,\n      complete = _c.complete;\n    return {\n      data: complete || this.options.returnPartialData ? result : void 0,\n      partial: !complete\n    };\n  };\n  ObservableQuery.prototype.startPolling = function (pollInterval) {\n    this.getReobserver().updateOptions({\n      pollInterval: pollInterval\n    });\n  };\n  ObservableQuery.prototype.stopPolling = function () {\n    if (this.reobserver) {\n      this.reobserver.updateOptions({\n        pollInterval: 0\n      });\n    }\n  };\n  ObservableQuery.prototype.updateLastResult = function (newResult) {\n    var previousResult = this.lastResult;\n    this.lastResult = newResult;\n    this.lastResultSnapshot = this.queryManager.assumeImmutableResults ? newResult : cloneDeep(newResult);\n    if (!isNonEmptyArray(newResult.errors)) {\n      delete this.lastError;\n    }\n    return previousResult;\n  };\n  ObservableQuery.prototype.onSubscribe = function (observer) {\n    var _this = this;\n    if (observer === this.observer) {\n      return function () {};\n    }\n    try {\n      var subObserver = observer._subscription._observer;\n      if (subObserver && !subObserver.error) {\n        subObserver.error = defaultSubscriptionObserverErrorCallback;\n      }\n    } catch (_a) {}\n    var first = !this.observers.size;\n    this.observers.add(observer);\n    if (observer.next && this.lastResult) observer.next(this.lastResult);\n    if (observer.error && this.lastError) observer.error(this.lastError);\n    if (first) {\n      this.reobserve().catch(function (_) {});\n    }\n    return function () {\n      if (_this.observers.delete(observer) && !_this.observers.size) {\n        _this.tearDownQuery();\n      }\n    };\n  };\n  ObservableQuery.prototype.getReobserver = function () {\n    return this.reobserver || (this.reobserver = this.newReobserver(true));\n  };\n  ObservableQuery.prototype.newReobserver = function (shareOptions) {\n    var _this = this;\n    var _a = this,\n      queryManager = _a.queryManager,\n      queryId = _a.queryId;\n    queryManager.setObservableQuery(this);\n    return new Reobserver(this.observer, shareOptions ? this.options : __assign({}, this.options), function (currentOptions, newNetworkStatus) {\n      queryManager.setObservableQuery(_this);\n      return queryManager.fetchQueryObservable(queryId, currentOptions, newNetworkStatus);\n    }, !queryManager.ssrMode && function () {\n      return !queryManager.checkInFlight(queryId);\n    });\n  };\n  ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n    this.isTornDown = false;\n    return this.getReobserver().reobserve(newOptions, newNetworkStatus);\n  };\n  ObservableQuery.prototype.tearDownQuery = function () {\n    var queryManager = this.queryManager;\n    if (this.reobserver) {\n      this.reobserver.stop();\n      delete this.reobserver;\n    }\n    this.isTornDown = true;\n    this.subscriptions.forEach(function (sub) {\n      return sub.unsubscribe();\n    });\n    this.subscriptions.clear();\n    queryManager.stopQuery(this.queryId);\n    this.observers.clear();\n  };\n  return ObservableQuery;\n}(Observable);\nfunction defaultSubscriptionObserverErrorCallback(error) {\n  process.env.NODE_ENV === \"production\" || invariant.error('Unhandled error', error.message, error.stack);\n}\nexport { ObservableQuery, hasError };","map":{"version":3,"mappings":"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","names":["hasError","storeValue","policy","networkError","isNonEmptyArray","graphQLErrors","ObservableQuery","_super","__extends","_a","queryManager","options","_this","call","observer","onSubscribe","observers","Set","subscriptions","next","result","lastError","isDifferentFromLastResult","updateLastResult","iterateObserversSafely","error","__assign","lastResult","errors","networkStatus","NetworkStatus","loading","isTornDown","queryId","generateQueryId","opDef","getOperationDefinition","query","queryName","name","value","Object","defineProperty","prototype","get","variables","enumerable","configurable","Promise","resolve","reject","delete","size","removeQuery","setTimeout","subscription","unsubscribe","subscribe","getCurrentResult","fetchPolicy","isNetworkFetchPolicy","ready","data","isNetworkRequestInFlight","_b","getCurrentQueryResult","partial","assign","queryStoreValue","getQueryStoreValue","networkStatus_1","errorPolicy","ApolloError","resetLastResults","newResult","equal","lastResultSnapshot","getLastResult","getLastError","resetQueryStoreErrors","queryStore","undefined","refetch","process","env","NODE_ENV","InvariantError","newReobserver","reobserve","pollInterval","fetchMore","fetchMoreOptions","combinedOptions","qid","fetchQuery","then","fetchMoreResult","updateQuery","previousResult","finally","stopQuery","subscribeToMore","startGraphQLSubscription","document","subscriptionData","previous","err","onError","invariant","add","setOptions","newOptions","setVariables","mapFn","tryFunctionOrLogError","cache","writeQuery","broadcastQueries","optimistic","_c","diff","returnPartialData","complete","startPolling","getReobserver","updateOptions","stopPolling","reobserver","assumeImmutableResults","cloneDeep","subObserver","_subscription","_observer","defaultSubscriptionObserverErrorCallback","first","catch","_","tearDownQuery","shareOptions","setObservableQuery","Reobserver","currentOptions","newNetworkStatus","fetchQueryObservable","ssrMode","checkInFlight","stop","forEach","sub","clear","Observable","message","stack"],"sources":["ObservableQuery.js"],"sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { equal } from '@wry/equality';\nimport { tryFunctionOrLogError } from '../utilities/common/errorHandling';\nimport { cloneDeep } from '../utilities/common/cloneDeep';\nimport { getOperationDefinition } from '../utilities/graphql/getFromAST';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { Observable } from '../utilities/observables/Observable';\nimport { iterateObserversSafely } from '../utilities/observables/iteration';\nimport { ApolloError } from '../errors/ApolloError';\nimport { isNonEmptyArray } from '../utilities/common/arrays';\nimport { Reobserver } from './Reobserver';\nexport var hasError = function (storeValue, policy) {\n    if (policy === void 0) { policy = 'none'; }\n    return storeValue && (storeValue.networkError ||\n        (policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors)));\n};\nvar ObservableQuery = (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, options = _a.options;\n        var _this = _super.call(this, function (observer) {\n            return _this.onSubscribe(observer);\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        _this.observer = {\n            next: function (result) {\n                if (_this.lastError || _this.isDifferentFromLastResult(result)) {\n                    _this.updateLastResult(result);\n                    iterateObserversSafely(_this.observers, 'next', result);\n                }\n            },\n            error: function (error) {\n                _this.updateLastResult(__assign(__assign({}, _this.lastResult), { errors: error.graphQLErrors, networkStatus: NetworkStatus.error, loading: false }));\n                iterateObserversSafely(_this.observers, 'error', _this.lastError = error);\n            },\n        };\n        _this.isTornDown = false;\n        _this.options = options;\n        _this.queryId = queryManager.generateQueryId();\n        var opDef = getOperationDefinition(options.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        _this.queryManager = queryManager;\n        return _this;\n    }\n    Object.defineProperty(ObservableQuery.prototype, \"variables\", {\n        get: function () {\n            return this.options.variables;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ObservableQuery.prototype.result = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject,\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.getCurrentResult = function () {\n        var _a = this, lastResult = _a.lastResult, lastError = _a.lastError, fetchPolicy = _a.options.fetchPolicy;\n        var isNetworkFetchPolicy = fetchPolicy === 'network-only' ||\n            fetchPolicy === 'no-cache';\n        var networkStatus = lastError ? NetworkStatus.error :\n            lastResult ? lastResult.networkStatus :\n                isNetworkFetchPolicy ? NetworkStatus.loading :\n                    NetworkStatus.ready;\n        var result = {\n            data: !lastError && lastResult && lastResult.data || void 0,\n            error: lastError,\n            loading: isNetworkRequestInFlight(networkStatus),\n            networkStatus: networkStatus,\n        };\n        if (this.isTornDown) {\n            return result;\n        }\n        var _b = this.getCurrentQueryResult(), data = _b.data, partial = _b.partial;\n        Object.assign(result, { data: data, partial: partial });\n        var queryStoreValue = this.queryManager.getQueryStoreValue(this.queryId);\n        if (queryStoreValue) {\n            var networkStatus_1 = queryStoreValue.networkStatus;\n            if (hasError(queryStoreValue, this.options.errorPolicy)) {\n                return Object.assign(result, {\n                    data: void 0,\n                    networkStatus: networkStatus_1,\n                    error: new ApolloError({\n                        graphQLErrors: queryStoreValue.graphQLErrors,\n                        networkError: queryStoreValue.networkError,\n                    }),\n                });\n            }\n            if (queryStoreValue.variables) {\n                this.options.variables = __assign(__assign({}, this.options.variables), queryStoreValue.variables);\n            }\n            Object.assign(result, {\n                loading: isNetworkRequestInFlight(networkStatus_1),\n                networkStatus: networkStatus_1,\n            });\n            if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n                result.errors = queryStoreValue.graphQLErrors;\n            }\n        }\n        if (partial) {\n            this.resetLastResults();\n        }\n        else {\n            this.updateLastResult(result);\n        }\n        return result;\n    };\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n        return !equal(this.lastResultSnapshot, newResult);\n    };\n    ObservableQuery.prototype.getLastResult = function () {\n        return this.lastResult;\n    };\n    ObservableQuery.prototype.getLastError = function () {\n        return this.lastError;\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.lastResult;\n        delete this.lastResultSnapshot;\n        delete this.lastError;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.resetQueryStoreErrors = function () {\n        var queryStore = this.queryManager.getQueryStoreValue(this.queryId);\n        if (queryStore) {\n            queryStore.networkError = undefined;\n            queryStore.graphQLErrors = [];\n        }\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'cache-only') {\n            return Promise.reject(new InvariantError('cache-only fetchPolicy option should not be used together with query refetch.'));\n        }\n        if (fetchPolicy !== 'no-cache' &&\n            fetchPolicy !== 'cache-and-network') {\n            fetchPolicy = 'network-only';\n        }\n        if (variables && !equal(this.options.variables, variables)) {\n            this.options.variables = __assign(__assign({}, this.options.variables), variables);\n        }\n        return this.newReobserver(false).reobserve({\n            fetchPolicy: fetchPolicy,\n            variables: this.options.variables,\n            pollInterval: 0,\n        }, NetworkStatus.refetch);\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        var combinedOptions = __assign(__assign({}, (fetchMoreOptions.query ? fetchMoreOptions : __assign(__assign(__assign({}, this.options), fetchMoreOptions), { variables: __assign(__assign({}, this.options.variables), fetchMoreOptions.variables) }))), { fetchPolicy: \"no-cache\" });\n        var qid = this.queryManager.generateQueryId();\n        return this.queryManager.fetchQuery(qid, combinedOptions, NetworkStatus.fetchMore).then(function (fetchMoreResult) {\n            _this.updateQuery(function (previousResult) {\n                var data = fetchMoreResult.data;\n                var updateQuery = fetchMoreOptions.updateQuery;\n                return updateQuery ? updateQuery(previousResult, {\n                    fetchMoreResult: data,\n                    variables: combinedOptions.variables,\n                }) : data;\n            });\n            return fetchMoreResult;\n        }).finally(function () {\n            _this.queryManager.stopQuery(qid);\n            _this.reobserve();\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                invariant.error('Unhandled GraphQL subscription error', err);\n            },\n        });\n        this.subscriptions.add(subscription);\n        return function () {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (newOptions) {\n        return this.reobserve(newOptions);\n    };\n    ObservableQuery.prototype.setVariables = function (variables) {\n        if (equal(this.variables, variables)) {\n            return this.observers.size\n                ? this.result()\n                : Promise.resolve();\n        }\n        this.options.variables = variables;\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy !== 'cache-first' &&\n            fetchPolicy !== 'no-cache' &&\n            fetchPolicy !== 'network-only') {\n            fetchPolicy = 'cache-and-network';\n        }\n        return this.reobserve({\n            fetchPolicy: fetchPolicy,\n            variables: variables,\n        }, NetworkStatus.setVariables);\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var _this = this;\n        var queryManager = this.queryManager;\n        var previousResult = this.getCurrentQueryResult(false).data;\n        var newResult = tryFunctionOrLogError(function () { return mapFn(previousResult, {\n            variables: _this.variables,\n        }); });\n        if (newResult) {\n            queryManager.cache.writeQuery({\n                query: this.options.query,\n                data: newResult,\n                variables: this.variables,\n            });\n            queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.getCurrentQueryResult = function (optimistic) {\n        var _a, _b;\n        if (optimistic === void 0) { optimistic = true; }\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'no-cache' ||\n            fetchPolicy === 'network-only') {\n            return {\n                data: (_a = this.lastResult) === null || _a === void 0 ? void 0 : _a.data,\n                partial: false,\n            };\n        }\n        var _c = this.queryManager.cache.diff({\n            query: this.options.query,\n            variables: this.variables,\n            previousResult: (_b = this.lastResult) === null || _b === void 0 ? void 0 : _b.data,\n            returnPartialData: true,\n            optimistic: optimistic,\n        }), result = _c.result, complete = _c.complete;\n        return {\n            data: (complete || this.options.returnPartialData) ? result : void 0,\n            partial: !complete,\n        };\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        this.getReobserver().updateOptions({ pollInterval: pollInterval });\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        if (this.reobserver) {\n            this.reobserver.updateOptions({ pollInterval: 0 });\n        }\n    };\n    ObservableQuery.prototype.updateLastResult = function (newResult) {\n        var previousResult = this.lastResult;\n        this.lastResult = newResult;\n        this.lastResultSnapshot = this.queryManager.assumeImmutableResults\n            ? newResult\n            : cloneDeep(newResult);\n        if (!isNonEmptyArray(newResult.errors)) {\n            delete this.lastError;\n        }\n        return previousResult;\n    };\n    ObservableQuery.prototype.onSubscribe = function (observer) {\n        var _this = this;\n        if (observer === this.observer) {\n            return function () { };\n        }\n        try {\n            var subObserver = observer._subscription._observer;\n            if (subObserver && !subObserver.error) {\n                subObserver.error = defaultSubscriptionObserverErrorCallback;\n            }\n        }\n        catch (_a) { }\n        var first = !this.observers.size;\n        this.observers.add(observer);\n        if (observer.next && this.lastResult)\n            observer.next(this.lastResult);\n        if (observer.error && this.lastError)\n            observer.error(this.lastError);\n        if (first) {\n            this.reobserve().catch(function (_) {\n            });\n        }\n        return function () {\n            if (_this.observers.delete(observer) && !_this.observers.size) {\n                _this.tearDownQuery();\n            }\n        };\n    };\n    ObservableQuery.prototype.getReobserver = function () {\n        return this.reobserver || (this.reobserver = this.newReobserver(true));\n    };\n    ObservableQuery.prototype.newReobserver = function (shareOptions) {\n        var _this = this;\n        var _a = this, queryManager = _a.queryManager, queryId = _a.queryId;\n        queryManager.setObservableQuery(this);\n        return new Reobserver(this.observer, shareOptions ? this.options : __assign({}, this.options), function (currentOptions, newNetworkStatus) {\n            queryManager.setObservableQuery(_this);\n            return queryManager.fetchQueryObservable(queryId, currentOptions, newNetworkStatus);\n        }, !queryManager.ssrMode && (function () { return !queryManager.checkInFlight(queryId); }));\n    };\n    ObservableQuery.prototype.reobserve = function (newOptions, newNetworkStatus) {\n        this.isTornDown = false;\n        return this.getReobserver().reobserve(newOptions, newNetworkStatus);\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        var queryManager = this.queryManager;\n        if (this.reobserver) {\n            this.reobserver.stop();\n            delete this.reobserver;\n        }\n        this.isTornDown = true;\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptions.clear();\n        queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n    };\n    return ObservableQuery;\n}(Observable));\nexport { ObservableQuery };\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    invariant.error('Unhandled error', error.message, error.stack);\n}\n//# sourceMappingURL=ObservableQuery.js.map"]},"metadata":{},"sourceType":"module"}