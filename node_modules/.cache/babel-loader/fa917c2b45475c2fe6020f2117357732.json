{"ast":null,"code":"import { __assign } from 'tslib';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { createFragmentMap } from '../../utilities/graphql/fragments.js';\nimport { isReference, makeReference, isField, resultKeyNameFromField, isInlineFragment } from '../../utilities/graphql/storeUtils.js';\nimport { getDefaultValues, getQueryDefinition, getMainDefinition, getFragmentDefinitions } from '../../utilities/graphql/getFromAST.js';\nimport { shouldInclude } from '../../utilities/graphql/directives.js';\nimport { addTypenameToDocument } from '../../utilities/graphql/transform.js';\nimport { mergeDeepArray } from '../../utilities/common/mergeDeep.js';\nimport { wrap } from 'optimism';\nimport { MissingFieldError } from '../core/types/common.js';\nimport { maybeDeepFreeze } from '../../utilities/common/maybeDeepFreeze.js';\nimport { getTypenameFromStoreObject } from './helpers.js';\nimport { supportsResultCaching, EntityStore } from './entityStore.js';\nfunction missingFromInvariant(err, context) {\n  return new MissingFieldError(err.message, context.path.slice(), context.query, context.variables);\n}\nvar StoreReader = function () {\n  function StoreReader(config) {\n    var _this = this;\n    this.config = config;\n    this.executeSelectionSet = wrap(function (options) {\n      return _this.execSelectionSetImpl(options);\n    }, {\n      keyArgs: function (options) {\n        return [options.context.store, options.selectionSet, options.objectOrReference, options.context.varString];\n      },\n      makeCacheKey: function (store, selectionSet, parent, varString) {\n        if (supportsResultCaching(store)) {\n          return store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, varString);\n        }\n      }\n    });\n    this.knownResults = new WeakMap();\n    this.executeSubSelectedArray = wrap(function (options) {\n      return _this.execSubSelectedArrayImpl(options);\n    }, {\n      makeCacheKey: function (_a) {\n        var field = _a.field,\n          array = _a.array,\n          context = _a.context;\n        if (supportsResultCaching(context.store)) {\n          return context.store.makeCacheKey(field, array, context.varString);\n        }\n      }\n    });\n    this.config = __assign({\n      addTypename: true\n    }, config);\n  }\n  StoreReader.prototype.readQueryFromStore = function (options) {\n    return this.diffQueryAgainstStore(__assign(__assign({}, options), {\n      returnPartialData: false\n    })).result;\n  };\n  StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n    var store = _a.store,\n      query = _a.query,\n      _b = _a.rootId,\n      rootId = _b === void 0 ? 'ROOT_QUERY' : _b,\n      variables = _a.variables,\n      _c = _a.returnPartialData,\n      returnPartialData = _c === void 0 ? true : _c;\n    var policies = this.config.cache.policies;\n    variables = __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables);\n    var execResult = this.executeSelectionSet({\n      selectionSet: getMainDefinition(query).selectionSet,\n      objectOrReference: makeReference(rootId),\n      context: {\n        store: store,\n        query: query,\n        policies: policies,\n        variables: variables,\n        varString: JSON.stringify(variables),\n        fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n        toReference: store.toReference,\n        canRead: store.canRead,\n        getFieldValue: store.getFieldValue,\n        path: []\n      }\n    });\n    var hasMissingFields = execResult.missing && execResult.missing.length > 0;\n    if (hasMissingFields && !returnPartialData) {\n      throw execResult.missing[0];\n    }\n    return {\n      result: execResult.result,\n      missing: execResult.missing,\n      complete: !hasMissingFields,\n      optimistic: !(store instanceof EntityStore.Root)\n    };\n  };\n  StoreReader.prototype.isFresh = function (result, store, parent, selectionSet, varString) {\n    if (supportsResultCaching(store) && this.knownResults.get(result) === selectionSet) {\n      var latest = this.executeSelectionSet.peek(store, selectionSet, parent, varString);\n      if (latest && result === latest.result) {\n        return true;\n      }\n    }\n    return false;\n  };\n  StoreReader.prototype.execSelectionSetImpl = function (_a) {\n    var _this = this;\n    var selectionSet = _a.selectionSet,\n      objectOrReference = _a.objectOrReference,\n      context = _a.context;\n    if (isReference(objectOrReference) && !context.policies.rootTypenamesById[objectOrReference.__ref] && !context.store.has(objectOrReference.__ref)) {\n      return {\n        result: {},\n        missing: [missingFromInvariant(process.env.NODE_ENV === \"production\" ? new InvariantError(47) : new InvariantError(\"Dangling reference to missing \" + objectOrReference.__ref + \" object\"), context)]\n      };\n    }\n    var fragmentMap = context.fragmentMap,\n      variables = context.variables,\n      policies = context.policies,\n      store = context.store;\n    var objectsToMerge = [];\n    var finalResult = {\n      result: null\n    };\n    var typename = store.getFieldValue(objectOrReference, \"__typename\");\n    if (this.config.addTypename && typeof typename === \"string\" && !policies.rootIdsByTypename[typename]) {\n      objectsToMerge.push({\n        __typename: typename\n      });\n    }\n    function getMissing() {\n      return finalResult.missing || (finalResult.missing = []);\n    }\n    function handleMissing(result) {\n      var _a;\n      if (result.missing) (_a = getMissing()).push.apply(_a, result.missing);\n      return result.result;\n    }\n    var workSet = new Set(selectionSet.selections);\n    workSet.forEach(function (selection) {\n      var _a;\n      if (!shouldInclude(selection, variables)) return;\n      if (isField(selection)) {\n        var fieldValue = policies.readField({\n          fieldName: selection.name.value,\n          field: selection,\n          variables: context.variables,\n          from: objectOrReference\n        }, context);\n        var resultName = resultKeyNameFromField(selection);\n        context.path.push(resultName);\n        if (fieldValue === void 0) {\n          if (!addTypenameToDocument.added(selection)) {\n            getMissing().push(missingFromInvariant(process.env.NODE_ENV === \"production\" ? new InvariantError(48) : new InvariantError(\"Can't find field '\" + selection.name.value + \"' on \" + (isReference(objectOrReference) ? objectOrReference.__ref + \" object\" : \"object \" + JSON.stringify(objectOrReference, null, 2))), context));\n          }\n        } else if (Array.isArray(fieldValue)) {\n          fieldValue = handleMissing(_this.executeSubSelectedArray({\n            field: selection,\n            array: fieldValue,\n            context: context\n          }));\n        } else if (!selection.selectionSet) {\n          if (process.env.NODE_ENV !== 'production') {\n            assertSelectionSetForIdValue(context.store, selection, fieldValue);\n            maybeDeepFreeze(fieldValue);\n          }\n        } else if (fieldValue != null) {\n          fieldValue = handleMissing(_this.executeSelectionSet({\n            selectionSet: selection.selectionSet,\n            objectOrReference: fieldValue,\n            context: context\n          }));\n        }\n        if (fieldValue !== void 0) {\n          objectsToMerge.push((_a = {}, _a[resultName] = fieldValue, _a));\n        }\n        invariant(context.path.pop() === resultName);\n      } else {\n        var fragment = void 0;\n        if (isInlineFragment(selection)) {\n          fragment = selection;\n        } else {\n          process.env.NODE_ENV === \"production\" ? invariant(fragment = fragmentMap[selection.name.value], 49) : invariant(fragment = fragmentMap[selection.name.value], \"No fragment named \" + selection.name.value);\n        }\n        if (policies.fragmentMatches(fragment, typename)) {\n          fragment.selectionSet.selections.forEach(workSet.add, workSet);\n        }\n      }\n    });\n    finalResult.result = mergeDeepArray(objectsToMerge);\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(finalResult.result);\n    }\n    this.knownResults.set(finalResult.result, selectionSet);\n    return finalResult;\n  };\n  StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {\n    var _this = this;\n    var field = _a.field,\n      array = _a.array,\n      context = _a.context;\n    var missing;\n    function handleMissing(childResult, i) {\n      if (childResult.missing) {\n        missing = missing || [];\n        missing.push.apply(missing, childResult.missing);\n      }\n      invariant(context.path.pop() === i);\n      return childResult.result;\n    }\n    array = array.map(function (item, i) {\n      if (item === null) {\n        return null;\n      }\n      context.path.push(i);\n      if (Array.isArray(item)) {\n        return handleMissing(_this.executeSubSelectedArray({\n          field: field,\n          array: item,\n          context: context\n        }), i);\n      }\n      if (field.selectionSet) {\n        return handleMissing(_this.executeSelectionSet({\n          selectionSet: field.selectionSet,\n          objectOrReference: item,\n          context: context\n        }), i);\n      }\n      if (process.env.NODE_ENV !== 'production') {\n        assertSelectionSetForIdValue(context.store, field, item);\n      }\n      invariant(context.path.pop() === i);\n      return item;\n    });\n    if (process.env.NODE_ENV !== 'production') {\n      Object.freeze(array);\n    }\n    return {\n      result: array,\n      missing: missing\n    };\n  };\n  return StoreReader;\n}();\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n  if (!field.selectionSet) {\n    var workSet_1 = new Set([fieldValue]);\n    workSet_1.forEach(function (value) {\n      if (value && typeof value === \"object\") {\n        process.env.NODE_ENV === \"production\" ? invariant(!isReference(value), 50) : invariant(!isReference(value), \"Missing selection set for object of type \" + getTypenameFromStoreObject(store, value) + \" returned for query field \" + field.name.value);\n        Object.values(value).forEach(workSet_1.add, workSet_1);\n      }\n    });\n  }\n}\nexport { StoreReader };","map":{"version":3,"mappings":";;;;;;;;;;;;;AAcA,SAASA,oBAAoB,CAACC,GAAG,EAAEC,OAAO,EAAE;EACxC,OAAO,IAAIC,iBAAiB,CAACF,GAAG,CAACG,OAAO,EAAEF,OAAO,CAACG,IAAI,CAACC,KAAK,EAAE,EAAEJ,OAAO,CAACK,KAAK,EAAEL,OAAO,CAACM,SAAS,CAAC;AACrG;AACG,IAACC,WAAW,GAAI,YAAY;EAC3B,SAASA,WAAW,CAACC,MAAM,EAAE;IACzB,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAI,CAACD,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,mBAAmB,GAAGC,IAAI,CAAC,UAAUC,OAAO,EAAE;MAAE,OAAOH,KAAK,CAACI,oBAAoB,CAACD,OAAO,CAAC;IAAC,CAAE,EAAE;MAChGE,OAAO,EAAE,UAAUF,OAAO,EAAE;QACxB,OAAO,CACHA,OAAO,CAACZ,OAAO,CAACe,KAAK,EACrBH,OAAO,CAACI,YAAY,EACpBJ,OAAO,CAACK,iBAAiB,EACzBL,OAAO,CAACZ,OAAO,CAACkB,SAAS,CAC5B;MACjB,CAAa;MACDC,YAAY,EAAE,UAAUJ,KAAK,EAAEC,YAAY,EAAEI,MAAM,EAAEF,SAAS,EAAE;QAC5D,IAAIG,qBAAqB,CAACN,KAAK,CAAC,EAAE;UAC9B,OAAOA,KAAK,CAACI,YAAY,CAACH,YAAY,EAAEM,WAAW,CAACF,MAAM,CAAC,GAAGA,MAAM,CAACG,KAAK,GAAGH,MAAM,EAAEF,SAAS,CAAC;QACnH;MACA;IACA,CAAS,CAAC;IACF,IAAI,CAACM,YAAY,GAAG,IAAIC,OAAO,EAAE;IACjC,IAAI,CAACC,uBAAuB,GAAGf,IAAI,CAAC,UAAUC,OAAO,EAAE;MACnD,OAAOH,KAAK,CAACkB,wBAAwB,CAACf,OAAO,CAAC;IAC1D,CAAS,EAAE;MACCO,YAAY,EAAE,UAAUS,EAAE,EAAE;QACxB,IAAIC,KAAK,GAAGD,EAAE,CAACC,KAAK;UAAEC,KAAK,GAAGF,EAAE,CAACE,KAAK;UAAE9B,OAAO,GAAG4B,EAAE,CAAC5B,OAAO;QAC5D,IAAIqB,qBAAqB,CAACrB,OAAO,CAACe,KAAK,CAAC,EAAE;UACtC,OAAOf,OAAO,CAACe,KAAK,CAACI,YAAY,CAACU,KAAK,EAAEC,KAAK,EAAE9B,OAAO,CAACkB,SAAS,CAAC;QACtF;MACA;IACA,CAAS,CAAC;IACF,IAAI,CAACV,MAAM,GAAGuB,QAAQ,CAAC;MAAEC,WAAW,EAAE;IAAI,CAAE,EAAExB,MAAM,CAAC;EAC7D;EACID,WAAW,CAAC0B,SAAS,CAACC,kBAAkB,GAAG,UAAUtB,OAAO,EAAE;IAC1D,OAAO,IAAI,CAACuB,qBAAqB,CAACJ,QAAQ,CAACA,QAAQ,CAAC,EAAE,EAAEnB,OAAO,CAAC,EAAE;MAAEwB,iBAAiB,EAAE;IAAK,CAAE,CAAC,CAAC,CAACC,MAAM;EAC/G,CAAK;EACD9B,WAAW,CAAC0B,SAAS,CAACE,qBAAqB,GAAG,UAAUP,EAAE,EAAE;IACxD,IAAIb,KAAK,GAAGa,EAAE,CAACb,KAAK;MAAEV,KAAK,GAAGuB,EAAE,CAACvB,KAAK;MAAEiC,EAAE,GAAGV,EAAE,CAACW,MAAM;MAAEA,MAAM,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,YAAY,GAAGA,EAAE;MAAEhC,SAAS,GAAGsB,EAAE,CAACtB,SAAS;MAAEkC,EAAE,GAAGZ,EAAE,CAACQ,iBAAiB;MAAEA,iBAAiB,GAAGI,EAAE,KAAK,KAAK,CAAC,GAAG,IAAI,GAAGA,EAAE;IACtM,IAAIC,QAAQ,GAAG,IAAI,CAACjC,MAAM,CAACkC,KAAK,CAACD,QAAQ;IACzCnC,SAAS,GAAGyB,QAAQ,CAACA,QAAQ,CAAC,EAAE,EAAEY,gBAAgB,CAACC,kBAAkB,CAACvC,KAAK,CAAC,CAAC,CAAC,EAAEC,SAAS,CAAC;IAC1F,IAAIuC,UAAU,GAAG,IAAI,CAACnC,mBAAmB,CAAC;MACtCM,YAAY,EAAE8B,iBAAiB,CAACzC,KAAK,CAAC,CAACW,YAAY;MACnDC,iBAAiB,EAAE8B,aAAa,CAACR,MAAM,CAAC;MACxCvC,OAAO,EAAE;QACLe,KAAK,EAAEA,KAAK;QACZV,KAAK,EAAEA,KAAK;QACZoC,QAAQ,EAAEA,QAAQ;QAClBnC,SAAS,EAAEA,SAAS;QACpBY,SAAS,EAAE8B,IAAI,CAACC,SAAS,CAAC3C,SAAS,CAAC;QACpC4C,WAAW,EAAEC,iBAAiB,CAACC,sBAAsB,CAAC/C,KAAK,CAAC,CAAC;QAC7DgD,WAAW,EAAEtC,KAAK,CAACsC,WAAW;QAC9BC,OAAO,EAAEvC,KAAK,CAACuC,OAAO;QACtBC,aAAa,EAAExC,KAAK,CAACwC,aAAa;QAClCpD,IAAI,EAAE;MACtB;IACA,CAAS,CAAC;IACF,IAAIqD,gBAAgB,GAAGX,UAAU,CAACY,OAAO,IAAIZ,UAAU,CAACY,OAAO,CAACC,MAAM,GAAG,CAAC;IAC1E,IAAIF,gBAAgB,IAAI,CAACpB,iBAAiB,EAAE;MACxC,MAAMS,UAAU,CAACY,OAAO,CAAC,CAAC,CAAC;IACvC;IACQ,OAAO;MACHpB,MAAM,EAAEQ,UAAU,CAACR,MAAM;MACzBoB,OAAO,EAAEZ,UAAU,CAACY,OAAO;MAC3BE,QAAQ,EAAE,CAACH,gBAAgB;MAC3BI,UAAU,EAAE,EAAE7C,KAAK,YAAY8C,WAAW,CAACC,IAAI;IAC3D,CAAS;EACT,CAAK;EACDvD,WAAW,CAAC0B,SAAS,CAAC8B,OAAO,GAAG,UAAU1B,MAAM,EAAEtB,KAAK,EAAEK,MAAM,EAAEJ,YAAY,EAAEE,SAAS,EAAE;IACtF,IAAIG,qBAAqB,CAACN,KAAK,CAAC,IAC5B,IAAI,CAACS,YAAY,CAACwC,GAAG,CAAC3B,MAAM,CAAC,KAAKrB,YAAY,EAAE;MAChD,IAAIiD,MAAM,GAAG,IAAI,CAACvD,mBAAmB,CAACwD,IAAI,CAACnD,KAAK,EAAEC,YAAY,EAAEI,MAAM,EAAEF,SAAS,CAAC;MAClF,IAAI+C,MAAM,IAAI5B,MAAM,KAAK4B,MAAM,CAAC5B,MAAM,EAAE;QACpC,OAAO,IAAI;MAC3B;IACA;IACQ,OAAO,KAAK;EACpB,CAAK;EACD9B,WAAW,CAAC0B,SAAS,CAACpB,oBAAoB,GAAG,UAAUe,EAAE,EAAE;IACvD,IAAInB,KAAK,GAAG,IAAI;IAChB,IAAIO,YAAY,GAAGY,EAAE,CAACZ,YAAY;MAAEC,iBAAiB,GAAGW,EAAE,CAACX,iBAAiB;MAAEjB,OAAO,GAAG4B,EAAE,CAAC5B,OAAO;IAClG,IAAIsB,WAAW,CAACL,iBAAiB,CAAC,IAC9B,CAACjB,OAAO,CAACyC,QAAQ,CAAC0B,iBAAiB,CAAClD,iBAAiB,CAACM,KAAK,CAAC,IAC5D,CAACvB,OAAO,CAACe,KAAK,CAACqD,GAAG,CAACnD,iBAAiB,CAACM,KAAK,CAAC,EAAE;MAC7C,OAAO;QACHc,MAAM,EAAE,EAAE;QACVoB,OAAO,EAAE,CAAC3D,oBAAoB,CAACuE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG,IAAIC,cAAc,CAAC,EAAE,CAAC,GAAG,IAAIA,cAAc,CAAC,gCAAgC,GAAGvD,iBAAiB,CAACM,KAAK,GAAG,SAAS,CAAC,EAAEvB,OAAO,CAAC;MACpN,CAAa;IACb;IACQ,IAAIkD,WAAW,GAAGlD,OAAO,CAACkD,WAAW;MAAE5C,SAAS,GAAGN,OAAO,CAACM,SAAS;MAAEmC,QAAQ,GAAGzC,OAAO,CAACyC,QAAQ;MAAE1B,KAAK,GAAGf,OAAO,CAACe,KAAK;IACxH,IAAI0D,cAAc,GAAG,EAAE;IACvB,IAAIC,WAAW,GAAG;MAAErC,MAAM,EAAE;IAAI,CAAE;IAClC,IAAIsC,QAAQ,GAAG5D,KAAK,CAACwC,aAAa,CAACtC,iBAAiB,EAAE,YAAY,CAAC;IACnE,IAAI,IAAI,CAACT,MAAM,CAACwB,WAAW,IACvB,OAAO2C,QAAQ,KAAK,QAAQ,IAC5B,CAAClC,QAAQ,CAACmC,iBAAiB,CAACD,QAAQ,CAAC,EAAE;MACvCF,cAAc,CAACI,IAAI,CAAC;QAAEC,UAAU,EAAEH;MAAQ,CAAE,CAAC;IACzD;IACQ,SAASI,UAAU,GAAG;MAClB,OAAOL,WAAW,CAACjB,OAAO,KAAKiB,WAAW,CAACjB,OAAO,GAAG,EAAE,CAAC;IACpE;IACQ,SAASuB,aAAa,CAAC3C,MAAM,EAAE;MAC3B,IAAIT,EAAE;MACN,IAAIS,MAAM,CAACoB,OAAO,EACd,CAAC7B,EAAE,GAAGmD,UAAU,EAAE,EAAEF,IAAI,CAACI,KAAK,CAACrD,EAAE,EAAES,MAAM,CAACoB,OAAO,CAAC;MACtD,OAAOpB,MAAM,CAACA,MAAM;IAChC;IACQ,IAAI6C,OAAO,GAAG,IAAIC,GAAG,CAACnE,YAAY,CAACoE,UAAU,CAAC;IAC9CF,OAAO,CAACG,OAAO,CAAC,UAAUC,SAAS,EAAE;MACjC,IAAI1D,EAAE;MACN,IAAI,CAAC2D,aAAa,CAACD,SAAS,EAAEhF,SAAS,CAAC,EACpC;MACJ,IAAIkF,OAAO,CAACF,SAAS,CAAC,EAAE;QACpB,IAAIG,UAAU,GAAGhD,QAAQ,CAACiD,SAAS,CAAC;UAChCC,SAAS,EAAEL,SAAS,CAACM,IAAI,CAACC,KAAK;UAC/BhE,KAAK,EAAEyD,SAAS;UAChBhF,SAAS,EAAEN,OAAO,CAACM,SAAS;UAC5BwF,IAAI,EAAE7E;QAC1B,CAAiB,EAAEjB,OAAO,CAAC;QACX,IAAI+F,UAAU,GAAGC,sBAAsB,CAACV,SAAS,CAAC;QAClDtF,OAAO,CAACG,IAAI,CAAC0E,IAAI,CAACkB,UAAU,CAAC;QAC7B,IAAIN,UAAU,KAAK,KAAK,CAAC,EAAE;UACvB,IAAI,CAACQ,qBAAqB,CAACC,KAAK,CAACZ,SAAS,CAAC,EAAE;YACzCP,UAAU,EAAE,CAACF,IAAI,CAAC/E,oBAAoB,CAACuE,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG,IAAIC,cAAc,CAAC,EAAE,CAAC,GAAG,IAAIA,cAAc,CAAC,oBAAoB,GAAGc,SAAS,CAACM,IAAI,CAACC,KAAK,GAAG,OAAO,IAAIvE,WAAW,CAACL,iBAAiB,CAAC,GAC5MA,iBAAiB,CAACM,KAAK,GAAG,SAAS,GACnC,SAAS,GAAGyB,IAAI,CAACC,SAAS,CAAChC,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,EAAEjB,OAAO,CAAC,CAAC;UACjG;QACA,CAAiB,MACI,IAAImG,KAAK,CAACC,OAAO,CAACX,UAAU,CAAC,EAAE;UAChCA,UAAU,GAAGT,aAAa,CAACvE,KAAK,CAACiB,uBAAuB,CAAC;YACrDG,KAAK,EAAEyD,SAAS;YAChBxD,KAAK,EAAE2D,UAAU;YACjBzF,OAAO,EAAEA;UACjC,CAAqB,CAAC,CAAC;QACvB,CAAiB,MACI,IAAI,CAACsF,SAAS,CAACtE,YAAY,EAAE;UAC9B,IAAIqD,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;YACvC8B,4BAA4B,CAACrG,OAAO,CAACe,KAAK,EAAEuE,SAAS,EAAEG,UAAU,CAAC;YAClEa,eAAe,CAACb,UAAU,CAAC;UACnD;QACA,CAAiB,MACI,IAAIA,UAAU,IAAI,IAAI,EAAE;UACzBA,UAAU,GAAGT,aAAa,CAACvE,KAAK,CAACC,mBAAmB,CAAC;YACjDM,YAAY,EAAEsE,SAAS,CAACtE,YAAY;YACpCC,iBAAiB,EAAEwE,UAAU;YAC7BzF,OAAO,EAAEA;UACjC,CAAqB,CAAC,CAAC;QACvB;QACgB,IAAIyF,UAAU,KAAK,KAAK,CAAC,EAAE;UACvBhB,cAAc,CAACI,IAAI,EAAEjD,EAAE,GAAG,EAAE,EAAEA,EAAE,CAACmE,UAAU,CAAC,GAAGN,UAAU,EAAE7D,EAAE,EAAE;QACnF;QACgB2E,SAAS,CAACvG,OAAO,CAACG,IAAI,CAACqG,GAAG,EAAE,KAAKT,UAAU,CAAC;MAC5D,CAAa,MACI;QACD,IAAIU,QAAQ,GAAG,KAAK,CAAC;QACrB,IAAIC,gBAAgB,CAACpB,SAAS,CAAC,EAAE;UAC7BmB,QAAQ,GAAGnB,SAAS;QACxC,CAAiB,MACI;UACDjB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGgC,SAAS,CAACE,QAAQ,GAAGvD,WAAW,CAACoC,SAAS,CAACM,IAAI,CAACC,KAAK,CAAC,EAAE,EAAE,CAAC,GAAGU,SAAS,CAACE,QAAQ,GAAGvD,WAAW,CAACoC,SAAS,CAACM,IAAI,CAACC,KAAK,CAAC,EAAE,oBAAoB,GAAGP,SAAS,CAACM,IAAI,CAACC,KAAK,CAAC;QAC9N;QACgB,IAAIpD,QAAQ,CAACkE,eAAe,CAACF,QAAQ,EAAE9B,QAAQ,CAAC,EAAE;UAC9C8B,QAAQ,CAACzF,YAAY,CAACoE,UAAU,CAACC,OAAO,CAACH,OAAO,CAAC0B,GAAG,EAAE1B,OAAO,CAAC;QAClF;MACA;IACA,CAAS,CAAC;IACFR,WAAW,CAACrC,MAAM,GAAGwE,cAAc,CAACpC,cAAc,CAAC;IACnD,IAAIJ,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvCuC,MAAM,CAACC,MAAM,CAACrC,WAAW,CAACrC,MAAM,CAAC;IAC7C;IACQ,IAAI,CAACb,YAAY,CAACwF,GAAG,CAACtC,WAAW,CAACrC,MAAM,EAAErB,YAAY,CAAC;IACvD,OAAO0D,WAAW;EAC1B,CAAK;EACDnE,WAAW,CAAC0B,SAAS,CAACN,wBAAwB,GAAG,UAAUC,EAAE,EAAE;IAC3D,IAAInB,KAAK,GAAG,IAAI;IAChB,IAAIoB,KAAK,GAAGD,EAAE,CAACC,KAAK;MAAEC,KAAK,GAAGF,EAAE,CAACE,KAAK;MAAE9B,OAAO,GAAG4B,EAAE,CAAC5B,OAAO;IAC5D,IAAIyD,OAAO;IACX,SAASuB,aAAa,CAACiC,WAAW,EAAEC,CAAC,EAAE;MACnC,IAAID,WAAW,CAACxD,OAAO,EAAE;QACrBA,OAAO,GAAGA,OAAO,IAAI,EAAE;QACvBA,OAAO,CAACoB,IAAI,CAACI,KAAK,CAACxB,OAAO,EAAEwD,WAAW,CAACxD,OAAO,CAAC;MAChE;MACY8C,SAAS,CAACvG,OAAO,CAACG,IAAI,CAACqG,GAAG,EAAE,KAAKU,CAAC,CAAC;MACnC,OAAOD,WAAW,CAAC5E,MAAM;IACrC;IACQP,KAAK,GAAGA,KAAK,CAACqF,GAAG,CAAC,UAAUC,IAAI,EAAEF,CAAC,EAAE;MACjC,IAAIE,IAAI,KAAK,IAAI,EAAE;QACf,OAAO,IAAI;MAC3B;MACYpH,OAAO,CAACG,IAAI,CAAC0E,IAAI,CAACqC,CAAC,CAAC;MACpB,IAAIf,KAAK,CAACC,OAAO,CAACgB,IAAI,CAAC,EAAE;QACrB,OAAOpC,aAAa,CAACvE,KAAK,CAACiB,uBAAuB,CAAC;UAC/CG,KAAK,EAAEA,KAAK;UACZC,KAAK,EAAEsF,IAAI;UACXpH,OAAO,EAAEA;QAC7B,CAAiB,CAAC,EAAEkH,CAAC,CAAC;MACtB;MACY,IAAIrF,KAAK,CAACb,YAAY,EAAE;QACpB,OAAOgE,aAAa,CAACvE,KAAK,CAACC,mBAAmB,CAAC;UAC3CM,YAAY,EAAEa,KAAK,CAACb,YAAY;UAChCC,iBAAiB,EAAEmG,IAAI;UACvBpH,OAAO,EAAEA;QAC7B,CAAiB,CAAC,EAAEkH,CAAC,CAAC;MACtB;MACY,IAAI7C,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;QACvC8B,4BAA4B,CAACrG,OAAO,CAACe,KAAK,EAAEc,KAAK,EAAEuF,IAAI,CAAC;MACxE;MACYb,SAAS,CAACvG,OAAO,CAACG,IAAI,CAACqG,GAAG,EAAE,KAAKU,CAAC,CAAC;MACnC,OAAOE,IAAI;IACvB,CAAS,CAAC;IACF,IAAI/C,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;MACvCuC,MAAM,CAACC,MAAM,CAACjF,KAAK,CAAC;IAChC;IACQ,OAAO;MAAEO,MAAM,EAAEP,KAAK;MAAE2B,OAAO,EAAEA;IAAO,CAAE;EAClD,CAAK;EACD,OAAOlD,WAAW;AACtB,CAAC,EAAE;AAEH,SAAS8F,4BAA4B,CAACtF,KAAK,EAAEc,KAAK,EAAE4D,UAAU,EAAE;EAC5D,IAAI,CAAC5D,KAAK,CAACb,YAAY,EAAE;IACrB,IAAIqG,SAAS,GAAG,IAAIlC,GAAG,CAAC,CAACM,UAAU,CAAC,CAAC;IACrC4B,SAAS,CAAChC,OAAO,CAAC,UAAUQ,KAAK,EAAE;MAC/B,IAAIA,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QACpCxB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGgC,SAAS,CAAC,CAACjF,WAAW,CAACuE,KAAK,CAAC,EAAE,EAAE,CAAC,GAAGU,SAAS,CAAC,CAACjF,WAAW,CAACuE,KAAK,CAAC,EAAE,2CAA2C,GAAGyB,0BAA0B,CAACvG,KAAK,EAAE8E,KAAK,CAAC,GAAG,4BAA4B,GAAGhE,KAAK,CAAC+D,IAAI,CAACC,KAAK,CAAC;QACrPiB,MAAM,CAACS,MAAM,CAAC1B,KAAK,CAAC,CAACR,OAAO,CAACgC,SAAS,CAACT,GAAG,EAAES,SAAS,CAAC;MACtE;IACA,CAAS,CAAC;EACV;AACA","names":["missingFromInvariant","err","context","MissingFieldError","message","path","slice","query","variables","StoreReader","config","_this","executeSelectionSet","wrap","options","execSelectionSetImpl","keyArgs","store","selectionSet","objectOrReference","varString","makeCacheKey","parent","supportsResultCaching","isReference","__ref","knownResults","WeakMap","executeSubSelectedArray","execSubSelectedArrayImpl","_a","field","array","__assign","addTypename","prototype","readQueryFromStore","diffQueryAgainstStore","returnPartialData","result","_b","rootId","_c","policies","cache","getDefaultValues","getQueryDefinition","execResult","getMainDefinition","makeReference","JSON","stringify","fragmentMap","createFragmentMap","getFragmentDefinitions","toReference","canRead","getFieldValue","hasMissingFields","missing","length","complete","optimistic","EntityStore","Root","isFresh","get","latest","peek","rootTypenamesById","has","process","env","NODE_ENV","InvariantError","objectsToMerge","finalResult","typename","rootIdsByTypename","push","__typename","getMissing","handleMissing","apply","workSet","Set","selections","forEach","selection","shouldInclude","isField","fieldValue","readField","fieldName","name","value","from","resultName","resultKeyNameFromField","addTypenameToDocument","added","Array","isArray","assertSelectionSetForIdValue","maybeDeepFreeze","invariant","pop","fragment","isInlineFragment","fragmentMatches","add","mergeDeepArray","Object","freeze","set","childResult","i","map","item","workSet_1","getTypenameFromStoreObject","values"],"sources":["readFromStore.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { wrap } from 'optimism';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { isField, isInlineFragment, resultKeyNameFromField, isReference, makeReference, } from '../../utilities/graphql/storeUtils';\nimport { createFragmentMap } from '../../utilities/graphql/fragments';\nimport { shouldInclude } from '../../utilities/graphql/directives';\nimport { addTypenameToDocument } from '../../utilities/graphql/transform';\nimport { getDefaultValues, getFragmentDefinitions, getMainDefinition, getQueryDefinition, } from '../../utilities/graphql/getFromAST';\nimport { maybeDeepFreeze } from '../../utilities/common/maybeDeepFreeze';\nimport { mergeDeepArray } from '../../utilities/common/mergeDeep';\nimport { supportsResultCaching, EntityStore } from './entityStore';\nimport { getTypenameFromStoreObject } from './helpers';\nimport { MissingFieldError } from '../core/types/common';\n;\nfunction missingFromInvariant(err, context) {\n    return new MissingFieldError(err.message, context.path.slice(), context.query, context.variables);\n}\nvar StoreReader = (function () {\n    function StoreReader(config) {\n        var _this = this;\n        this.config = config;\n        this.executeSelectionSet = wrap(function (options) { return _this.execSelectionSetImpl(options); }, {\n            keyArgs: function (options) {\n                return [\n                    options.context.store,\n                    options.selectionSet,\n                    options.objectOrReference,\n                    options.context.varString,\n                ];\n            },\n            makeCacheKey: function (store, selectionSet, parent, varString) {\n                if (supportsResultCaching(store)) {\n                    return store.makeCacheKey(selectionSet, isReference(parent) ? parent.__ref : parent, varString);\n                }\n            }\n        });\n        this.knownResults = new WeakMap();\n        this.executeSubSelectedArray = wrap(function (options) {\n            return _this.execSubSelectedArrayImpl(options);\n        }, {\n            makeCacheKey: function (_a) {\n                var field = _a.field, array = _a.array, context = _a.context;\n                if (supportsResultCaching(context.store)) {\n                    return context.store.makeCacheKey(field, array, context.varString);\n                }\n            }\n        });\n        this.config = __assign({ addTypename: true }, config);\n    }\n    StoreReader.prototype.readQueryFromStore = function (options) {\n        return this.diffQueryAgainstStore(__assign(__assign({}, options), { returnPartialData: false })).result;\n    };\n    StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n        var store = _a.store, query = _a.query, _b = _a.rootId, rootId = _b === void 0 ? 'ROOT_QUERY' : _b, variables = _a.variables, _c = _a.returnPartialData, returnPartialData = _c === void 0 ? true : _c;\n        var policies = this.config.cache.policies;\n        variables = __assign(__assign({}, getDefaultValues(getQueryDefinition(query))), variables);\n        var execResult = this.executeSelectionSet({\n            selectionSet: getMainDefinition(query).selectionSet,\n            objectOrReference: makeReference(rootId),\n            context: {\n                store: store,\n                query: query,\n                policies: policies,\n                variables: variables,\n                varString: JSON.stringify(variables),\n                fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n                toReference: store.toReference,\n                canRead: store.canRead,\n                getFieldValue: store.getFieldValue,\n                path: [],\n            },\n        });\n        var hasMissingFields = execResult.missing && execResult.missing.length > 0;\n        if (hasMissingFields && !returnPartialData) {\n            throw execResult.missing[0];\n        }\n        return {\n            result: execResult.result,\n            missing: execResult.missing,\n            complete: !hasMissingFields,\n            optimistic: !(store instanceof EntityStore.Root),\n        };\n    };\n    StoreReader.prototype.isFresh = function (result, store, parent, selectionSet, varString) {\n        if (supportsResultCaching(store) &&\n            this.knownResults.get(result) === selectionSet) {\n            var latest = this.executeSelectionSet.peek(store, selectionSet, parent, varString);\n            if (latest && result === latest.result) {\n                return true;\n            }\n        }\n        return false;\n    };\n    StoreReader.prototype.execSelectionSetImpl = function (_a) {\n        var _this = this;\n        var selectionSet = _a.selectionSet, objectOrReference = _a.objectOrReference, context = _a.context;\n        if (isReference(objectOrReference) &&\n            !context.policies.rootTypenamesById[objectOrReference.__ref] &&\n            !context.store.has(objectOrReference.__ref)) {\n            return {\n                result: {},\n                missing: [missingFromInvariant(new InvariantError(\"Dangling reference to missing \" + objectOrReference.__ref + \" object\"), context)],\n            };\n        }\n        var fragmentMap = context.fragmentMap, variables = context.variables, policies = context.policies, store = context.store;\n        var objectsToMerge = [];\n        var finalResult = { result: null };\n        var typename = store.getFieldValue(objectOrReference, \"__typename\");\n        if (this.config.addTypename &&\n            typeof typename === \"string\" &&\n            !policies.rootIdsByTypename[typename]) {\n            objectsToMerge.push({ __typename: typename });\n        }\n        function getMissing() {\n            return finalResult.missing || (finalResult.missing = []);\n        }\n        function handleMissing(result) {\n            var _a;\n            if (result.missing)\n                (_a = getMissing()).push.apply(_a, result.missing);\n            return result.result;\n        }\n        var workSet = new Set(selectionSet.selections);\n        workSet.forEach(function (selection) {\n            var _a;\n            if (!shouldInclude(selection, variables))\n                return;\n            if (isField(selection)) {\n                var fieldValue = policies.readField({\n                    fieldName: selection.name.value,\n                    field: selection,\n                    variables: context.variables,\n                    from: objectOrReference,\n                }, context);\n                var resultName = resultKeyNameFromField(selection);\n                context.path.push(resultName);\n                if (fieldValue === void 0) {\n                    if (!addTypenameToDocument.added(selection)) {\n                        getMissing().push(missingFromInvariant(new InvariantError(\"Can't find field '\" + selection.name.value + \"' on \" + (isReference(objectOrReference)\n                            ? objectOrReference.__ref + \" object\"\n                            : \"object \" + JSON.stringify(objectOrReference, null, 2))), context));\n                    }\n                }\n                else if (Array.isArray(fieldValue)) {\n                    fieldValue = handleMissing(_this.executeSubSelectedArray({\n                        field: selection,\n                        array: fieldValue,\n                        context: context,\n                    }));\n                }\n                else if (!selection.selectionSet) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        assertSelectionSetForIdValue(context.store, selection, fieldValue);\n                        maybeDeepFreeze(fieldValue);\n                    }\n                }\n                else if (fieldValue != null) {\n                    fieldValue = handleMissing(_this.executeSelectionSet({\n                        selectionSet: selection.selectionSet,\n                        objectOrReference: fieldValue,\n                        context: context,\n                    }));\n                }\n                if (fieldValue !== void 0) {\n                    objectsToMerge.push((_a = {}, _a[resultName] = fieldValue, _a));\n                }\n                invariant(context.path.pop() === resultName);\n            }\n            else {\n                var fragment = void 0;\n                if (isInlineFragment(selection)) {\n                    fragment = selection;\n                }\n                else {\n                    invariant(fragment = fragmentMap[selection.name.value], \"No fragment named \" + selection.name.value);\n                }\n                if (policies.fragmentMatches(fragment, typename)) {\n                    fragment.selectionSet.selections.forEach(workSet.add, workSet);\n                }\n            }\n        });\n        finalResult.result = mergeDeepArray(objectsToMerge);\n        if (process.env.NODE_ENV !== 'production') {\n            Object.freeze(finalResult.result);\n        }\n        this.knownResults.set(finalResult.result, selectionSet);\n        return finalResult;\n    };\n    StoreReader.prototype.execSubSelectedArrayImpl = function (_a) {\n        var _this = this;\n        var field = _a.field, array = _a.array, context = _a.context;\n        var missing;\n        function handleMissing(childResult, i) {\n            if (childResult.missing) {\n                missing = missing || [];\n                missing.push.apply(missing, childResult.missing);\n            }\n            invariant(context.path.pop() === i);\n            return childResult.result;\n        }\n        array = array.map(function (item, i) {\n            if (item === null) {\n                return null;\n            }\n            context.path.push(i);\n            if (Array.isArray(item)) {\n                return handleMissing(_this.executeSubSelectedArray({\n                    field: field,\n                    array: item,\n                    context: context,\n                }), i);\n            }\n            if (field.selectionSet) {\n                return handleMissing(_this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    objectOrReference: item,\n                    context: context,\n                }), i);\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                assertSelectionSetForIdValue(context.store, field, item);\n            }\n            invariant(context.path.pop() === i);\n            return item;\n        });\n        if (process.env.NODE_ENV !== 'production') {\n            Object.freeze(array);\n        }\n        return { result: array, missing: missing };\n    };\n    return StoreReader;\n}());\nexport { StoreReader };\nfunction assertSelectionSetForIdValue(store, field, fieldValue) {\n    if (!field.selectionSet) {\n        var workSet_1 = new Set([fieldValue]);\n        workSet_1.forEach(function (value) {\n            if (value && typeof value === \"object\") {\n                invariant(!isReference(value), \"Missing selection set for object of type \" + getTypenameFromStoreObject(store, value) + \" returned for query field \" + field.name.value);\n                Object.values(value).forEach(workSet_1.add, workSet_1);\n            }\n        });\n    }\n}\n//# sourceMappingURL=readFromStore.js.map"]},"metadata":{},"sourceType":"module"}