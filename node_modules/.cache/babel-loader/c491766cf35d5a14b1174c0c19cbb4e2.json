{"ast":null,"code":"import { __awaiter, __generator, __assign } from 'tslib';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport Observable from 'zen-observable';\nimport 'symbol-observable';\nimport { getDefaultValues, getOperationDefinition, getOperationName } from '../utilities/graphql/getFromAST.js';\nimport { execute } from '../link/core/execute.js';\nimport { equal } from '@wry/equality';\nimport { hasClientExports } from '../utilities/graphql/directives.js';\nimport { graphQLResultHasError, tryFunctionOrLogError } from '../utilities/common/errorHandling.js';\nimport { removeConnectionDirectiveFromDocument } from '../utilities/graphql/transform.js';\nimport { canUseWeakMap } from '../utilities/common/canUse.js';\nimport { isNonEmptyArray } from '../utilities/common/arrays.js';\nimport { ApolloError, isApolloError } from '../errors/ApolloError.js';\nimport { MutationStore } from '../data/mutations.js';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus.js';\nimport { ObservableQuery } from './ObservableQuery.js';\nimport { LocalState } from './LocalState.js';\nimport { asyncMap } from '../utilities/observables/asyncMap.js';\nimport { Concast } from '../utilities/observables/Concast.js';\nimport { QueryInfo } from './QueryInfo.js';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = function () {\n  function QueryManager(_a) {\n    var cache = _a.cache,\n      link = _a.link,\n      _b = _a.queryDeduplication,\n      queryDeduplication = _b === void 0 ? false : _b,\n      _c = _a.onBroadcast,\n      onBroadcast = _c === void 0 ? function () {\n        return undefined;\n      } : _c,\n      _d = _a.ssrMode,\n      ssrMode = _d === void 0 ? false : _d,\n      _e = _a.clientAwareness,\n      clientAwareness = _e === void 0 ? {} : _e,\n      localState = _a.localState,\n      assumeImmutableResults = _a.assumeImmutableResults;\n    this.mutationStore = new MutationStore();\n    this.clientAwareness = {};\n    this.queries = new Map();\n    this.fetchCancelFns = new Map();\n    this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    this.inFlightLinkObservables = new Map();\n    this.cache = cache;\n    this.link = link;\n    this.queryDeduplication = queryDeduplication;\n    this.onBroadcast = onBroadcast;\n    this.clientAwareness = clientAwareness;\n    this.localState = localState || new LocalState({\n      cache: cache\n    });\n    this.ssrMode = ssrMode;\n    this.assumeImmutableResults = !!assumeImmutableResults;\n  }\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(process.env.NODE_ENV === \"production\" ? new InvariantError(14) : new InvariantError('QueryManager stopped while query was in flight'));\n  };\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n  QueryManager.prototype.mutate = function (_a) {\n    var mutation = _a.mutation,\n      variables = _a.variables,\n      optimisticResponse = _a.optimisticResponse,\n      updateQueriesByName = _a.updateQueries,\n      _b = _a.refetchQueries,\n      refetchQueries = _b === void 0 ? [] : _b,\n      _c = _a.awaitRefetchQueries,\n      awaitRefetchQueries = _c === void 0 ? false : _c,\n      updateWithProxyFn = _a.update,\n      _d = _a.errorPolicy,\n      errorPolicy = _d === void 0 ? 'none' : _d,\n      fetchPolicy = _a.fetchPolicy,\n      _e = _a.context,\n      context = _e === void 0 ? {} : _e;\n    return __awaiter(this, void 0, void 0, function () {\n      var mutationId, generateUpdateQueriesInfo, optimistic_1, self;\n      var _this = this;\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            process.env.NODE_ENV === \"production\" ? invariant(mutation, 15) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n            process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache', 16) : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\");\n            mutationId = this.generateMutationId();\n            mutation = this.transform(mutation).document;\n            variables = this.getVariables(mutation, variables);\n            if (!this.transform(mutation).hasClientExports) return [3, 2];\n            return [4, this.localState.addExportedVariables(mutation, variables, context)];\n          case 1:\n            variables = _f.sent();\n            _f.label = 2;\n          case 2:\n            generateUpdateQueriesInfo = function () {\n              var ret = {};\n              if (updateQueriesByName) {\n                _this.queries.forEach(function (_a, queryId) {\n                  var observableQuery = _a.observableQuery;\n                  if (observableQuery) {\n                    var queryName = observableQuery.queryName;\n                    if (queryName && hasOwnProperty.call(updateQueriesByName, queryName)) {\n                      ret[queryId] = {\n                        updater: updateQueriesByName[queryName],\n                        queryInfo: _this.queries.get(queryId)\n                      };\n                    }\n                  }\n                });\n              }\n              return ret;\n            };\n            this.mutationStore.initMutation(mutationId, mutation, variables);\n            if (optimisticResponse) {\n              optimistic_1 = typeof optimisticResponse === 'function' ? optimisticResponse(variables) : optimisticResponse;\n              this.cache.recordOptimisticTransaction(function (cache) {\n                markMutationResult({\n                  mutationId: mutationId,\n                  result: {\n                    data: optimistic_1\n                  },\n                  document: mutation,\n                  variables: variables,\n                  queryUpdatersById: generateUpdateQueriesInfo(),\n                  update: updateWithProxyFn\n                }, cache);\n              }, mutationId);\n            }\n            this.broadcastQueries();\n            self = this;\n            return [2, new Promise(function (resolve, reject) {\n              var storeResult;\n              var error;\n              self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: optimisticResponse\n              }), variables, false).subscribe({\n                next: function (result) {\n                  if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                    error = new ApolloError({\n                      graphQLErrors: result.errors\n                    });\n                    return;\n                  }\n                  self.mutationStore.markMutationResult(mutationId);\n                  if (fetchPolicy !== 'no-cache') {\n                    try {\n                      markMutationResult({\n                        mutationId: mutationId,\n                        result: result,\n                        document: mutation,\n                        variables: variables,\n                        queryUpdatersById: generateUpdateQueriesInfo(),\n                        update: updateWithProxyFn\n                      }, self.cache);\n                    } catch (e) {\n                      error = new ApolloError({\n                        networkError: e\n                      });\n                      return;\n                    }\n                  }\n                  storeResult = result;\n                },\n                error: function (err) {\n                  self.mutationStore.markMutationError(mutationId, err);\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n                  self.broadcastQueries();\n                  reject(new ApolloError({\n                    networkError: err\n                  }));\n                },\n                complete: function () {\n                  if (error) {\n                    self.mutationStore.markMutationError(mutationId, error);\n                  }\n                  if (optimisticResponse) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n                  self.broadcastQueries();\n                  if (error) {\n                    reject(error);\n                    return;\n                  }\n                  if (typeof refetchQueries === 'function') {\n                    refetchQueries = refetchQueries(storeResult);\n                  }\n                  var refetchQueryPromises = [];\n                  if (isNonEmptyArray(refetchQueries)) {\n                    refetchQueries.forEach(function (refetchQuery) {\n                      if (typeof refetchQuery === 'string') {\n                        self.queries.forEach(function (_a) {\n                          var observableQuery = _a.observableQuery;\n                          if (observableQuery && observableQuery.queryName === refetchQuery) {\n                            refetchQueryPromises.push(observableQuery.refetch());\n                          }\n                        });\n                      } else {\n                        var queryOptions = {\n                          query: refetchQuery.query,\n                          variables: refetchQuery.variables,\n                          fetchPolicy: 'network-only'\n                        };\n                        if (refetchQuery.context) {\n                          queryOptions.context = refetchQuery.context;\n                        }\n                        refetchQueryPromises.push(self.query(queryOptions));\n                      }\n                    });\n                  }\n                  Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                    if (errorPolicy === 'ignore' && storeResult && graphQLResultHasError(storeResult)) {\n                      delete storeResult.errors;\n                    }\n                    resolve(storeResult);\n                  });\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n  };\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n  QueryManager.prototype.getQueryStoreValue = function (queryId) {\n    return queryId ? this.queries.get(queryId) : undefined;\n  };\n  QueryManager.prototype.transform = function (document) {\n    var transformCache = this.transformCache;\n    if (!transformCache.has(document)) {\n      var transformed = this.cache.transformDocument(document);\n      var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));\n      var clientQuery = this.localState.clientQuery(transformed);\n      var serverQuery = forLink && this.localState.serverQuery(forLink);\n      var cacheEntry_1 = {\n        document: transformed,\n        hasClientExports: hasClientExports(transformed),\n        hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n        clientQuery: clientQuery,\n        serverQuery: serverQuery,\n        defaultVars: getDefaultValues(getOperationDefinition(transformed))\n      };\n      var add = function (doc) {\n        if (doc && !transformCache.has(doc)) {\n          transformCache.set(doc, cacheEntry_1);\n        }\n      };\n      add(document);\n      add(transformed);\n      add(clientQuery);\n      add(serverQuery);\n    }\n    return transformCache.get(document);\n  };\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.transform(document).defaultVars), variables);\n  };\n  QueryManager.prototype.watchQuery = function (options) {\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(options.query, options.variables)\n    });\n    if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n      options.notifyOnNetworkStatusChange = false;\n    }\n    var observable = new ObservableQuery({\n      queryManager: this,\n      options: options\n    });\n    this.getQuery(observable.queryId).init({\n      document: options.query,\n      observableQuery: observable,\n      variables: options.variables\n    });\n    return observable;\n  };\n  QueryManager.prototype.query = function (options) {\n    var _this = this;\n    process.env.NODE_ENV === \"production\" ? invariant(options.query, 17) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' + 'in the query option.');\n    process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document', 18) : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData, 19) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n    process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval, 20) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n    var queryId = this.generateQueryId();\n    return this.fetchQuery(queryId, options).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n  QueryManager.prototype.addQueryListener = function (queryId, listener) {\n    this.getQuery(queryId).listeners.add(listener);\n  };\n  QueryManager.prototype.clearStore = function () {\n    this.cancelPendingFetches(process.env.NODE_ENV === \"production\" ? new InvariantError(21) : new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n    this.mutationStore.reset();\n    return this.cache.reset();\n  };\n  QueryManager.prototype.resetStore = function () {\n    var _this = this;\n    return this.clearStore().then(function () {\n      return _this.reFetchObservableQueries();\n    });\n  };\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n    var observableQueryPromises = [];\n    this.queries.forEach(function (_a, queryId) {\n      var observableQuery = _a.observableQuery;\n      if (observableQuery) {\n        var fetchPolicy = observableQuery.options.fetchPolicy;\n        observableQuery.resetLastResults();\n        if (fetchPolicy !== 'cache-only' && (includeStandby || fetchPolicy !== 'standby')) {\n          observableQueryPromises.push(observableQuery.refetch());\n        }\n        _this.getQuery(queryId).setDiff(null);\n      }\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n    var query = _a.query,\n      fetchPolicy = _a.fetchPolicy,\n      variables = _a.variables;\n    query = this.transform(query).document;\n    variables = this.getVariables(query, variables);\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, {}, variables, false).map(function (result) {\n        if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n          if (!graphQLResultHasError(result)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: 'ROOT_SUBSCRIPTION',\n              variables: variables\n            });\n          }\n          _this.broadcastQueries();\n        }\n        if (graphQLResultHasError(result)) {\n          throw new ApolloError({\n            graphQLErrors: result.errors\n          });\n        }\n        return result;\n      });\n    };\n    if (this.transform(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n    return makeObservable(variables);\n  };\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n  QueryManager.prototype.removeQuery = function (queryId) {\n    this.fetchCancelFns.delete(queryId);\n    this.getQuery(queryId).subscriptions.forEach(function (x) {\n      return x.unsubscribe();\n    });\n    this.queries.delete(queryId);\n  };\n  QueryManager.prototype.broadcastQueries = function () {\n    this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n    var _this = this;\n    if (deduplication === void 0) {\n      deduplication = this.queryDeduplication;\n    }\n    var observable;\n    var serverQuery = this.transform(query).serverQuery;\n    if (serverQuery) {\n      var _a = this,\n        inFlightLinkObservables_1 = _a.inFlightLinkObservables,\n        link = _a.link;\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        }))\n      };\n      context = operation.context;\n      if (deduplication) {\n        var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n        inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n        var varJson_1 = JSON.stringify(variables);\n        observable = byVariables_1.get(varJson_1);\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          byVariables_1.set(varJson_1, observable = concast);\n          concast.cleanup(function () {\n            if (byVariables_1.delete(varJson_1) && byVariables_1.size < 1) {\n              inFlightLinkObservables_1.delete(serverQuery);\n            }\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n    var clientQuery = this.transform(query).clientQuery;\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n    return observable;\n  };\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, allowCacheWrite, options) {\n    var lastRequestId = queryInfo.lastRequestId;\n    return asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function (result) {\n      var hasErrors = isNonEmptyArray(result.errors);\n      if (lastRequestId >= queryInfo.lastRequestId) {\n        if (hasErrors && options.errorPolicy === \"none\") {\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: result.errors\n          }));\n        }\n        queryInfo.markResult(result, options, allowCacheWrite);\n        queryInfo.markReady();\n      }\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: queryInfo.networkStatus || NetworkStatus.ready\n      };\n      if (hasErrors && options.errorPolicy !== \"ignore\") {\n        aqr.errors = result.errors;\n      }\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n      if (lastRequestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n      throw error;\n    });\n  };\n  QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n    var _this = this;\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n    var query = this.transform(options.query).document;\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var oldNetworkStatus = queryInfo.networkStatus;\n    var _a = options.fetchPolicy,\n      fetchPolicy = _a === void 0 ? \"cache-first\" : _a,\n      _b = options.errorPolicy,\n      errorPolicy = _b === void 0 ? \"none\" : _b,\n      _c = options.returnPartialData,\n      returnPartialData = _c === void 0 ? false : _c,\n      _d = options.notifyOnNetworkStatusChange,\n      notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n      _e = options.context,\n      context = _e === void 0 ? {} : _e;\n    if (fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\") {\n      options.fetchPolicy = \"cache-first\";\n    }\n    var mightUseNetwork = fetchPolicy === \"cache-first\" || fetchPolicy === \"cache-and-network\" || fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\";\n    if (mightUseNetwork && notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus)) {\n      if (fetchPolicy !== \"cache-first\") {\n        fetchPolicy = \"cache-and-network\";\n      }\n      returnPartialData = true;\n    }\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n    var fromVariables = function (variables) {\n      normalized.variables = variables;\n      return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n    };\n    this.fetchCancelFns.set(queryId, function (reason) {\n      Promise.resolve().then(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast = new Concast(this.transform(normalized.query).hasClientExports ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables) : fromVariables(normalized.variables));\n    concast.cleanup(function () {\n      return _this.fetchCancelFns.delete(queryId);\n    });\n    return concast;\n  };\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, options, networkStatus) {\n    var _this = this;\n    var query = options.query,\n      variables = options.variables,\n      fetchPolicy = options.fetchPolicy,\n      errorPolicy = options.errorPolicy,\n      returnPartialData = options.returnPartialData,\n      context = options.context;\n    queryInfo.init({\n      document: query,\n      variables: variables,\n      lastRequestId: this.generateRequestId(),\n      networkStatus: networkStatus\n    }).updateWatch(variables);\n    var readCache = function () {\n      return _this.cache.diff({\n        query: query,\n        variables: variables,\n        returnPartialData: true,\n        optimistic: true\n      });\n    };\n    var resultsFromCache = function (diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n      var data = diff.result;\n      if (process.env.NODE_ENV !== 'production' && isNonEmptyArray(diff.missing) && !equal(data, {})) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(\"Missing cache result fields: \" + diff.missing.map(function (m) {\n          return m.path.join('.');\n        }).join(', '), diff.missing);\n      }\n      var fromData = function (data) {\n        return Observable.of({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        });\n      };\n      if (_this.transform(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data);\n        });\n      }\n      return fromData(data);\n    };\n    var resultsFromLink = function (allowCacheWrite) {\n      return _this.getResultsFromLink(queryInfo, allowCacheWrite, {\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n          if (diff.complete) {\n            return [resultsFromCache(diff, queryInfo.markReady())];\n          }\n          if (diff.optimistic) {\n            return returnPartialData ? [resultsFromCache(diff, queryInfo.markReady())] : [];\n          }\n          if (returnPartialData) {\n            return [resultsFromCache(diff), resultsFromLink(true)];\n          }\n          return [resultsFromLink(true)];\n        }\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n          if (diff.complete || returnPartialData) {\n            return [resultsFromCache(diff), resultsFromLink(true)];\n          }\n          return [resultsFromLink(true)];\n        }\n      case \"cache-only\":\n        return [resultsFromCache(readCache(), queryInfo.markReady())];\n      case \"network-only\":\n        return [resultsFromLink(true)];\n      case \"no-cache\":\n        return [resultsFromLink(false)];\n      case \"standby\":\n        return [];\n    }\n  };\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this.cache));\n    }\n    return this.queries.get(queryId);\n  };\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign({}, newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n  QueryManager.prototype.checkInFlight = function (queryId) {\n    var query = this.getQueryStoreValue(queryId);\n    return !!query && !!query.networkStatus && query.networkStatus !== NetworkStatus.ready && query.networkStatus !== NetworkStatus.error;\n  };\n  return QueryManager;\n}();\nfunction markMutationResult(mutation, cache) {\n  if (!graphQLResultHasError(mutation.result)) {\n    var cacheWrites_1 = [{\n      result: mutation.result.data,\n      dataId: 'ROOT_MUTATION',\n      query: mutation.document,\n      variables: mutation.variables\n    }];\n    var queryUpdatersById_1 = mutation.queryUpdatersById;\n    if (queryUpdatersById_1) {\n      Object.keys(queryUpdatersById_1).forEach(function (id) {\n        var _a = queryUpdatersById_1[id],\n          updater = _a.updater,\n          _b = _a.queryInfo,\n          document = _b.document,\n          variables = _b.variables;\n        var _c = cache.diff({\n            query: document,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false\n          }),\n          currentQueryResult = _c.result,\n          complete = _c.complete;\n        if (complete && currentQueryResult) {\n          var nextQueryResult = tryFunctionOrLogError(function () {\n            return updater(currentQueryResult, {\n              mutationResult: mutation.result,\n              queryName: getOperationName(document) || undefined,\n              queryVariables: variables\n            });\n          });\n          if (nextQueryResult) {\n            cacheWrites_1.push({\n              result: nextQueryResult,\n              dataId: 'ROOT_QUERY',\n              query: document,\n              variables: variables\n            });\n          }\n        }\n      });\n    }\n    cache.performTransaction(function (c) {\n      cacheWrites_1.forEach(function (write) {\n        return c.write(write);\n      });\n      var update = mutation.update;\n      if (update) {\n        tryFunctionOrLogError(function () {\n          return update(c, mutation.result);\n        });\n      }\n    });\n  }\n}\nexport { QueryManager };","map":{"version":3,"mappings":"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","names":["hasOwnProperty","Object","prototype","QueryManager","_a","cache","link","_b","queryDeduplication","_c","onBroadcast","undefined","_d","ssrMode","_e","clientAwareness","localState","assumeImmutableResults","mutationStore","MutationStore","queries","Map","fetchCancelFns","transformCache","canUseWeakMap","WeakMap","queryIdCounter","requestIdCounter","mutationIdCounter","inFlightLinkObservables","LocalState","stop","_this","forEach","_info","queryId","stopQueryNoBroadcast","cancelPendingFetches","process","env","NODE_ENV","InvariantError","error","cancel","clear","mutate","mutation","variables","optimisticResponse","updateQueriesByName","updateQueries","refetchQueries","awaitRefetchQueries","updateWithProxyFn","update","errorPolicy","fetchPolicy","context","__awaiter","mutationId","generateUpdateQueriesInfo","optimistic_1","self","__generator","_f","label","invariant","generateMutationId","transform","document","getVariables","hasClientExports","addExportedVariables","sent","ret","observableQuery","queryName","call","updater","queryInfo","get","initMutation","recordOptimisticTransaction","markMutationResult","result","data","queryUpdatersById","broadcastQueries","Promise","resolve","reject","storeResult","getObservableFromLink","__assign","subscribe","next","graphQLResultHasError","ApolloError","graphQLErrors","errors","e","networkError","err","markMutationError","removeOptimistic","complete","refetchQueryPromises","isNonEmptyArray","refetchQuery","push","refetch","queryOptions","query","all","then","fetchQuery","options","networkStatus","fetchQueryObservable","promise","getQueryStore","store","create","info","getQueryStoreValue","has","transformed","transformDocument","forLink","removeConnectionDirectiveFromDocument","transformForLink","clientQuery","serverQuery","cacheEntry_1","hasForcedResolvers","shouldForceResolvers","defaultVars","getDefaultValues","getOperationDefinition","add","doc","set","watchQuery","notifyOnNetworkStatusChange","observable","ObservableQuery","queryManager","getQuery","init","kind","returnPartialData","pollInterval","generateQueryId","finally","stopQuery","String","generateRequestId","stopQueryInStore","stopQueryInStoreNoBroadcast","addQueryListener","listener","listeners","clearStore","NetworkStatus","loading","reset","resetStore","reFetchObservableQueries","includeStandby","observableQueryPromises","resetLastResults","setDiff","setObservableQuery","startGraphQLSubscription","makeObservable","map","write","dataId","observablePromise_1","Observable","observer","sub","unsubscribe","removeQuery","delete","subscriptions","x","notify","getLocalState","deduplication","inFlightLinkObservables_1","operation","operationName","getOperationName","prepareContext","forceFetch","byVariables_1","varJson_1","JSON","stringify","concast","Concast","execute","cleanup","size","of","asyncMap","runResolvers","remoteResult","getResultsFromLink","allowCacheWrite","lastRequestId","hasErrors","markError","markResult","markReady","aqr","ready","isApolloError","oldNetworkStatus","mightUseNetwork","isNetworkRequestInFlight","normalized","assign","fromVariables","fetchQueryByPolicy","reason","updateWatch","readCache","diff","optimistic","resultsFromCache","missing","equal","warn","m","path","join","fromData","onlyRunForcedResolvers","resolved","resultsFromLink","QueryInfo","newContext","checkInFlight","cacheWrites_1","queryUpdatersById_1","keys","id","currentQueryResult","nextQueryResult","tryFunctionOrLogError","mutationResult","queryVariables","performTransaction","c"],"sources":["QueryManager.js"],"sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { equal } from '@wry/equality';\nimport { execute } from '../link/core/execute';\nimport { getDefaultValues, getOperationDefinition, getOperationName, } from '../utilities/graphql/getFromAST';\nimport { hasClientExports, } from '../utilities/graphql/directives';\nimport { graphQLResultHasError, tryFunctionOrLogError, } from '../utilities/common/errorHandling';\nimport { removeConnectionDirectiveFromDocument } from '../utilities/graphql/transform';\nimport { canUseWeakMap } from '../utilities/common/canUse';\nimport { ApolloError, isApolloError } from '../errors/ApolloError';\nimport { Observable, } from '../utilities/observables/Observable';\nimport { MutationStore } from '../data/mutations';\nimport { ObservableQuery } from './ObservableQuery';\nimport { NetworkStatus, isNetworkRequestInFlight } from './networkStatus';\nimport { LocalState } from './LocalState';\nimport { asyncMap } from '../utilities/observables/asyncMap';\nimport { Concast, } from '../utilities/observables/Concast';\nimport { isNonEmptyArray } from '../utilities/common/arrays';\nimport { QueryInfo } from './QueryInfo';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var cache = _a.cache, link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, _c = _a.onBroadcast, onBroadcast = _c === void 0 ? function () { return undefined; } : _c, _d = _a.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _a.clientAwareness, clientAwareness = _e === void 0 ? {} : _e, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;\n        this.mutationStore = new MutationStore();\n        this.clientAwareness = {};\n        this.queries = new Map();\n        this.fetchCancelFns = new Map();\n        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        this.inFlightLinkObservables = new Map();\n        this.cache = cache;\n        this.link = link;\n        this.queryDeduplication = queryDeduplication;\n        this.onBroadcast = onBroadcast;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: cache });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = !!assumeImmutableResults;\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches(new InvariantError('QueryManager stopped while query was in flight'));\n    };\n    QueryManager.prototype.cancelPendingFetches = function (error) {\n        this.fetchCancelFns.forEach(function (cancel) { return cancel(error); });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueriesByName = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, fetchPolicy = _a.fetchPolicy, _e = _a.context, context = _e === void 0 ? {} : _e;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, generateUpdateQueriesInfo, optimistic_1, self;\n            var _this = this;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n                        invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"Mutations only support a 'no-cache' fetchPolicy. If you don't want to disable the cache, remove your fetchPolicy setting to proceed with the default mutation behavior.\");\n                        mutationId = this.generateMutationId();\n                        mutation = this.transform(mutation).document;\n                        variables = this.getVariables(mutation, variables);\n                        if (!this.transform(mutation).hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = _f.sent();\n                        _f.label = 2;\n                    case 2:\n                        generateUpdateQueriesInfo = function () {\n                            var ret = {};\n                            if (updateQueriesByName) {\n                                _this.queries.forEach(function (_a, queryId) {\n                                    var observableQuery = _a.observableQuery;\n                                    if (observableQuery) {\n                                        var queryName = observableQuery.queryName;\n                                        if (queryName &&\n                                            hasOwnProperty.call(updateQueriesByName, queryName)) {\n                                            ret[queryId] = {\n                                                updater: updateQueriesByName[queryName],\n                                                queryInfo: _this.queries.get(queryId),\n                                            };\n                                        }\n                                    }\n                                });\n                            }\n                            return ret;\n                        };\n                        this.mutationStore.initMutation(mutationId, mutation, variables);\n                        if (optimisticResponse) {\n                            optimistic_1 = typeof optimisticResponse === 'function'\n                                ? optimisticResponse(variables)\n                                : optimisticResponse;\n                            this.cache.recordOptimisticTransaction(function (cache) {\n                                markMutationResult({\n                                    mutationId: mutationId,\n                                    result: { data: optimistic_1 },\n                                    document: mutation,\n                                    variables: variables,\n                                    queryUpdatersById: generateUpdateQueriesInfo(),\n                                    update: updateWithProxyFn,\n                                }, cache);\n                            }, mutationId);\n                        }\n                        this.broadcastQueries();\n                        self = this;\n                        return [2, new Promise(function (resolve, reject) {\n                                var storeResult;\n                                var error;\n                                self.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse: optimisticResponse }), variables, false).subscribe({\n                                    next: function (result) {\n                                        if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                            error = new ApolloError({\n                                                graphQLErrors: result.errors,\n                                            });\n                                            return;\n                                        }\n                                        self.mutationStore.markMutationResult(mutationId);\n                                        if (fetchPolicy !== 'no-cache') {\n                                            try {\n                                                markMutationResult({\n                                                    mutationId: mutationId,\n                                                    result: result,\n                                                    document: mutation,\n                                                    variables: variables,\n                                                    queryUpdatersById: generateUpdateQueriesInfo(),\n                                                    update: updateWithProxyFn,\n                                                }, self.cache);\n                                            }\n                                            catch (e) {\n                                                error = new ApolloError({\n                                                    networkError: e,\n                                                });\n                                                return;\n                                            }\n                                        }\n                                        storeResult = result;\n                                    },\n                                    error: function (err) {\n                                        self.mutationStore.markMutationError(mutationId, err);\n                                        if (optimisticResponse) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                    complete: function () {\n                                        if (error) {\n                                            self.mutationStore.markMutationError(mutationId, error);\n                                        }\n                                        if (optimisticResponse) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        if (error) {\n                                            reject(error);\n                                            return;\n                                        }\n                                        if (typeof refetchQueries === 'function') {\n                                            refetchQueries = refetchQueries(storeResult);\n                                        }\n                                        var refetchQueryPromises = [];\n                                        if (isNonEmptyArray(refetchQueries)) {\n                                            refetchQueries.forEach(function (refetchQuery) {\n                                                if (typeof refetchQuery === 'string') {\n                                                    self.queries.forEach(function (_a) {\n                                                        var observableQuery = _a.observableQuery;\n                                                        if (observableQuery &&\n                                                            observableQuery.queryName === refetchQuery) {\n                                                            refetchQueryPromises.push(observableQuery.refetch());\n                                                        }\n                                                    });\n                                                }\n                                                else {\n                                                    var queryOptions = {\n                                                        query: refetchQuery.query,\n                                                        variables: refetchQuery.variables,\n                                                        fetchPolicy: 'network-only',\n                                                    };\n                                                    if (refetchQuery.context) {\n                                                        queryOptions.context = refetchQuery.context;\n                                                    }\n                                                    refetchQueryPromises.push(self.query(queryOptions));\n                                                }\n                                            });\n                                        }\n                                        Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                                            if (errorPolicy === 'ignore' &&\n                                                storeResult &&\n                                                graphQLResultHasError(storeResult)) {\n                                                delete storeResult.errors;\n                                            }\n                                            resolve(storeResult);\n                                        });\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n        return this.fetchQueryObservable(queryId, options, networkStatus).promise;\n    };\n    QueryManager.prototype.getQueryStore = function () {\n        var store = Object.create(null);\n        this.queries.forEach(function (info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors,\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.getQueryStoreValue = function (queryId) {\n        return queryId ? this.queries.get(queryId) : undefined;\n    };\n    QueryManager.prototype.transform = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var transformed = this.cache.transformDocument(document);\n            var forLink = removeConnectionDirectiveFromDocument(this.cache.transformForLink(transformed));\n            var clientQuery = this.localState.clientQuery(transformed);\n            var serverQuery = forLink && this.localState.serverQuery(forLink);\n            var cacheEntry_1 = {\n                document: transformed,\n                hasClientExports: hasClientExports(transformed),\n                hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n                clientQuery: clientQuery,\n                serverQuery: serverQuery,\n                defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n            };\n            var add = function (doc) {\n                if (doc && !transformCache.has(doc)) {\n                    transformCache.set(doc, cacheEntry_1);\n                }\n            };\n            add(document);\n            add(transformed);\n            add(clientQuery);\n            add(serverQuery);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign(__assign({}, this.transform(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function (options) {\n        options = __assign(__assign({}, options), { variables: this.getVariables(options.query, options.variables) });\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var observable = new ObservableQuery({\n            queryManager: this,\n            options: options,\n        });\n        this.getQuery(observable.queryId).init({\n            document: options.query,\n            observableQuery: observable,\n            variables: options.variables,\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function (options) {\n        var _this = this;\n        invariant(options.query, 'query option is required. You must specify your GraphQL document ' +\n            'in the query option.');\n        invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n        invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n        invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n        var queryId = this.generateQueryId();\n        return this.fetchQuery(queryId, options).finally(function () { return _this.stopQuery(queryId); });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function () {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo)\n            queryInfo.stop();\n    };\n    QueryManager.prototype.addQueryListener = function (queryId, listener) {\n        this.getQuery(queryId).listeners.add(listener);\n    };\n    QueryManager.prototype.clearStore = function () {\n        this.cancelPendingFetches(new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n        this.queries.forEach(function (queryInfo) {\n            if (queryInfo.observableQuery) {\n                queryInfo.networkStatus = NetworkStatus.loading;\n            }\n            else {\n                queryInfo.stop();\n            }\n        });\n        this.mutationStore.reset();\n        return this.cache.reset();\n    };\n    QueryManager.prototype.resetStore = function () {\n        var _this = this;\n        return this.clearStore().then(function () {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery) {\n                var fetchPolicy = observableQuery.options.fetchPolicy;\n                observableQuery.resetLastResults();\n                if (fetchPolicy !== 'cache-only' &&\n                    (includeStandby || fetchPolicy !== 'standby')) {\n                    observableQueryPromises.push(observableQuery.refetch());\n                }\n                _this.getQuery(queryId).setDiff(null);\n            }\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.setObservableQuery = function (observableQuery) {\n        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, variables = _a.variables;\n        query = this.transform(query).document;\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, {}, variables, false).map(function (result) {\n                if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n                    if (!graphQLResultHasError(result)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: 'ROOT_SUBSCRIPTION',\n                            variables: variables,\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                if (graphQLResultHasError(result)) {\n                    throw new ApolloError({\n                        graphQLErrors: result.errors,\n                    });\n                }\n                return result;\n            });\n        };\n        if (this.transform(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return sub = observable.subscribe(observer); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        this.fetchCancelFns.delete(queryId);\n        this.getQuery(queryId).subscriptions.forEach(function (x) { return x.unsubscribe(); });\n        this.queries.delete(queryId);\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        this.onBroadcast();\n        this.queries.forEach(function (info) { return info.notify(); });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n        var _this = this;\n        if (deduplication === void 0) { deduplication = this.queryDeduplication; }\n        var observable;\n        var serverQuery = this.transform(query).serverQuery;\n        if (serverQuery) {\n            var _a = this, inFlightLinkObservables_1 = _a.inFlightLinkObservables, link = _a.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication })),\n            };\n            context = operation.context;\n            if (deduplication) {\n                var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n                inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n                var varJson_1 = JSON.stringify(variables);\n                observable = byVariables_1.get(varJson_1);\n                if (!observable) {\n                    var concast = new Concast([\n                        execute(link, operation)\n                    ]);\n                    byVariables_1.set(varJson_1, observable = concast);\n                    concast.cleanup(function () {\n                        if (byVariables_1.delete(varJson_1) &&\n                            byVariables_1.size < 1) {\n                            inFlightLinkObservables_1.delete(serverQuery);\n                        }\n                    });\n                }\n            }\n            else {\n                observable = new Concast([\n                    execute(link, operation)\n                ]);\n            }\n        }\n        else {\n            observable = new Concast([\n                Observable.of({ data: {} })\n            ]);\n            context = this.prepareContext(context);\n        }\n        var clientQuery = this.transform(query).clientQuery;\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function (queryInfo, allowCacheWrite, options) {\n        var lastRequestId = queryInfo.lastRequestId;\n        return asyncMap(this.getObservableFromLink(queryInfo.document, options.context, options.variables), function (result) {\n            var hasErrors = isNonEmptyArray(result.errors);\n            if (lastRequestId >= queryInfo.lastRequestId) {\n                if (hasErrors && options.errorPolicy === \"none\") {\n                    throw queryInfo.markError(new ApolloError({\n                        graphQLErrors: result.errors,\n                    }));\n                }\n                queryInfo.markResult(result, options, allowCacheWrite);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: queryInfo.networkStatus || NetworkStatus.ready,\n            };\n            if (hasErrors && options.errorPolicy !== \"ignore\") {\n                aqr.errors = result.errors;\n            }\n            return aqr;\n        }, function (networkError) {\n            var error = isApolloError(networkError)\n                ? networkError\n                : new ApolloError({ networkError: networkError });\n            if (lastRequestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchQueryObservable = function (queryId, options, networkStatus) {\n        var _this = this;\n        if (networkStatus === void 0) { networkStatus = NetworkStatus.loading; }\n        var query = this.transform(options.query).document;\n        var variables = this.getVariables(query, options.variables);\n        var queryInfo = this.getQuery(queryId);\n        var oldNetworkStatus = queryInfo.networkStatus;\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        if (fetchPolicy === \"cache-and-network\" ||\n            fetchPolicy === \"network-only\") {\n            options.fetchPolicy = \"cache-first\";\n        }\n        var mightUseNetwork = fetchPolicy === \"cache-first\" ||\n            fetchPolicy === \"cache-and-network\" ||\n            fetchPolicy === \"network-only\" ||\n            fetchPolicy === \"no-cache\";\n        if (mightUseNetwork &&\n            notifyOnNetworkStatusChange &&\n            typeof oldNetworkStatus === \"number\" &&\n            oldNetworkStatus !== networkStatus &&\n            isNetworkRequestInFlight(networkStatus)) {\n            if (fetchPolicy !== \"cache-first\") {\n                fetchPolicy = \"cache-and-network\";\n            }\n            returnPartialData = true;\n        }\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context,\n        });\n        var fromVariables = function (variables) {\n            normalized.variables = variables;\n            return _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n        };\n        this.fetchCancelFns.set(queryId, function (reason) {\n            Promise.resolve().then(function () { return concast.cancel(reason); });\n        });\n        var concast = new Concast(this.transform(normalized.query).hasClientExports\n            ? this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables)\n            : fromVariables(normalized.variables));\n        concast.cleanup(function () { return _this.fetchCancelFns.delete(queryId); });\n        return concast;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, options, networkStatus) {\n        var _this = this;\n        var query = options.query, variables = options.variables, fetchPolicy = options.fetchPolicy, errorPolicy = options.errorPolicy, returnPartialData = options.returnPartialData, context = options.context;\n        queryInfo.init({\n            document: query,\n            variables: variables,\n            lastRequestId: this.generateRequestId(),\n            networkStatus: networkStatus,\n        }).updateWatch(variables);\n        var readCache = function () { return _this.cache.diff({\n            query: query,\n            variables: variables,\n            returnPartialData: true,\n            optimistic: true,\n        }); };\n        var resultsFromCache = function (diff, networkStatus) {\n            if (networkStatus === void 0) { networkStatus = queryInfo.networkStatus || NetworkStatus.loading; }\n            var data = diff.result;\n            if (process.env.NODE_ENV !== 'production' &&\n                isNonEmptyArray(diff.missing) &&\n                !equal(data, {})) {\n                invariant.warn(\"Missing cache result fields: \" + diff.missing.map(function (m) { return m.path.join('.'); }).join(', '), diff.missing);\n            }\n            var fromData = function (data) { return Observable.of({\n                data: data,\n                loading: isNetworkRequestInFlight(networkStatus),\n                networkStatus: networkStatus,\n            }); };\n            if (_this.transform(query).hasForcedResolvers) {\n                return _this.localState.runResolvers({\n                    document: query,\n                    remoteResult: { data: data },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true,\n                }).then(function (resolved) { return fromData(resolved.data); });\n            }\n            return fromData(data);\n        };\n        var resultsFromLink = function (allowCacheWrite) {\n            return _this.getResultsFromLink(queryInfo, allowCacheWrite, {\n                variables: variables,\n                context: context,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n            });\n        };\n        switch (fetchPolicy) {\n            default:\n            case \"cache-first\": {\n                var diff = readCache();\n                if (diff.complete) {\n                    return [\n                        resultsFromCache(diff, queryInfo.markReady()),\n                    ];\n                }\n                if (diff.optimistic) {\n                    return returnPartialData ? [\n                        resultsFromCache(diff, queryInfo.markReady()),\n                    ] : [];\n                }\n                if (returnPartialData) {\n                    return [\n                        resultsFromCache(diff),\n                        resultsFromLink(true),\n                    ];\n                }\n                return [\n                    resultsFromLink(true),\n                ];\n            }\n            case \"cache-and-network\": {\n                var diff = readCache();\n                if (diff.complete || returnPartialData) {\n                    return [\n                        resultsFromCache(diff),\n                        resultsFromLink(true),\n                    ];\n                }\n                return [\n                    resultsFromLink(true),\n                ];\n            }\n            case \"cache-only\":\n                return [\n                    resultsFromCache(readCache(), queryInfo.markReady()),\n                ];\n            case \"network-only\":\n                return [resultsFromLink(true)];\n            case \"no-cache\":\n                return [resultsFromLink(false)];\n            case \"standby\":\n                return [];\n        }\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new QueryInfo(this.cache));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign(__assign({}, newContext), { clientAwareness: this.clientAwareness });\n    };\n    QueryManager.prototype.checkInFlight = function (queryId) {\n        var query = this.getQueryStoreValue(queryId);\n        return (!!query &&\n            !!query.networkStatus &&\n            query.networkStatus !== NetworkStatus.ready &&\n            query.networkStatus !== NetworkStatus.error);\n    };\n    return QueryManager;\n}());\nexport { QueryManager };\nfunction markMutationResult(mutation, cache) {\n    if (!graphQLResultHasError(mutation.result)) {\n        var cacheWrites_1 = [{\n                result: mutation.result.data,\n                dataId: 'ROOT_MUTATION',\n                query: mutation.document,\n                variables: mutation.variables,\n            }];\n        var queryUpdatersById_1 = mutation.queryUpdatersById;\n        if (queryUpdatersById_1) {\n            Object.keys(queryUpdatersById_1).forEach(function (id) {\n                var _a = queryUpdatersById_1[id], updater = _a.updater, _b = _a.queryInfo, document = _b.document, variables = _b.variables;\n                var _c = cache.diff({\n                    query: document,\n                    variables: variables,\n                    returnPartialData: true,\n                    optimistic: false,\n                }), currentQueryResult = _c.result, complete = _c.complete;\n                if (complete && currentQueryResult) {\n                    var nextQueryResult = tryFunctionOrLogError(function () { return updater(currentQueryResult, {\n                        mutationResult: mutation.result,\n                        queryName: getOperationName(document) || undefined,\n                        queryVariables: variables,\n                    }); });\n                    if (nextQueryResult) {\n                        cacheWrites_1.push({\n                            result: nextQueryResult,\n                            dataId: 'ROOT_QUERY',\n                            query: document,\n                            variables: variables,\n                        });\n                    }\n                }\n            });\n        }\n        cache.performTransaction(function (c) {\n            cacheWrites_1.forEach(function (write) { return c.write(write); });\n            var update = mutation.update;\n            if (update) {\n                tryFunctionOrLogError(function () { return update(c, mutation.result); });\n            }\n        });\n    }\n}\n//# sourceMappingURL=QueryManager.js.map"]},"metadata":{},"sourceType":"module"}