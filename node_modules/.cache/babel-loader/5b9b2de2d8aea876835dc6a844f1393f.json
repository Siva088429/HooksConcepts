{"ast":null,"code":"import { __spreadArrays, __assign } from 'tslib';\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction mergeDeep() {\n  var sources = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n  return mergeDeepArray(sources);\n}\nfunction mergeDeepArray(sources) {\n  var target = sources[0] || {};\n  var count = sources.length;\n  if (count > 1) {\n    var merger = new DeepMerger();\n    for (var i = 1; i < count; ++i) {\n      target = merger.merge(target, sources[i]);\n    }\n  }\n  return target;\n}\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n}\nvar defaultReconciler = function (target, source, property) {\n  return this.merge(target[property], source[property]);\n};\nvar DeepMerger = function () {\n  function DeepMerger(reconciler) {\n    if (reconciler === void 0) {\n      reconciler = defaultReconciler;\n    }\n    this.reconciler = reconciler;\n    this.isObject = isObject;\n    this.pastCopies = new Set();\n  }\n  DeepMerger.prototype.merge = function (target, source) {\n    var _this = this;\n    var context = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n      context[_i - 2] = arguments[_i];\n    }\n    if (isObject(source) && isObject(target)) {\n      Object.keys(source).forEach(function (sourceKey) {\n        if (hasOwnProperty.call(target, sourceKey)) {\n          var targetValue = target[sourceKey];\n          if (source[sourceKey] !== targetValue) {\n            var result = _this.reconciler.apply(_this, __spreadArrays([target, source, sourceKey], context));\n            if (result !== targetValue) {\n              target = _this.shallowCopyForMerge(target);\n              target[sourceKey] = result;\n            }\n          }\n        } else {\n          target = _this.shallowCopyForMerge(target);\n          target[sourceKey] = source[sourceKey];\n        }\n      });\n      return target;\n    }\n    return source;\n  };\n  DeepMerger.prototype.shallowCopyForMerge = function (value) {\n    if (isObject(value) && !this.pastCopies.has(value)) {\n      if (Array.isArray(value)) {\n        value = value.slice(0);\n      } else {\n        value = __assign({\n          __proto__: Object.getPrototypeOf(value)\n        }, value);\n      }\n      this.pastCopies.add(value);\n    }\n    return value;\n  };\n  return DeepMerger;\n}();\nexport { DeepMerger, mergeDeep, mergeDeepArray };","map":{"version":3,"mappings":"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","names":["hasOwnProperty","Object","prototype","mergeDeep","sources","_i","arguments","length","mergeDeepArray","target","count","merger","DeepMerger","i","merge","isObject","obj","defaultReconciler","source","property","reconciler","pastCopies","Set","_this","context","keys","forEach","sourceKey","call","targetValue","result","apply","__spreadArrays","shallowCopyForMerge","value","has","Array","isArray","slice","__assign","__proto__","getPrototypeOf","add"],"sources":["mergeDeep.js"],"sourcesContent":["import { __assign, __spreadArrays } from \"tslib\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nexport function mergeDeep() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\nexport function mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var merger = new DeepMerger();\n        for (var i = 1; i < count; ++i) {\n            target = merger.merge(target, sources[i]);\n        }\n    }\n    return target;\n}\nfunction isObject(obj) {\n    return obj !== null && typeof obj === 'object';\n}\nvar defaultReconciler = function (target, source, property) {\n    return this.merge(target[property], source[property]);\n};\nvar DeepMerger = (function () {\n    function DeepMerger(reconciler) {\n        if (reconciler === void 0) { reconciler = defaultReconciler; }\n        this.reconciler = reconciler;\n        this.isObject = isObject;\n        this.pastCopies = new Set();\n    }\n    DeepMerger.prototype.merge = function (target, source) {\n        var _this = this;\n        var context = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            context[_i - 2] = arguments[_i];\n        }\n        if (isObject(source) && isObject(target)) {\n            Object.keys(source).forEach(function (sourceKey) {\n                if (hasOwnProperty.call(target, sourceKey)) {\n                    var targetValue = target[sourceKey];\n                    if (source[sourceKey] !== targetValue) {\n                        var result = _this.reconciler.apply(_this, __spreadArrays([target, source, sourceKey], context));\n                        if (result !== targetValue) {\n                            target = _this.shallowCopyForMerge(target);\n                            target[sourceKey] = result;\n                        }\n                    }\n                }\n                else {\n                    target = _this.shallowCopyForMerge(target);\n                    target[sourceKey] = source[sourceKey];\n                }\n            });\n            return target;\n        }\n        return source;\n    };\n    DeepMerger.prototype.shallowCopyForMerge = function (value) {\n        if (isObject(value) && !this.pastCopies.has(value)) {\n            if (Array.isArray(value)) {\n                value = value.slice(0);\n            }\n            else {\n                value = __assign({ __proto__: Object.getPrototypeOf(value) }, value);\n            }\n            this.pastCopies.add(value);\n        }\n        return value;\n    };\n    return DeepMerger;\n}());\nexport { DeepMerger };\n//# sourceMappingURL=mergeDeep.js.map"]},"metadata":{},"sourceType":"module"}