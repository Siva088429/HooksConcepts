{"ast":null,"code":"import { __extends, __assign } from 'tslib';\nimport { equal } from '@wry/equality';\nimport { ApolloError } from '../../errors/ApolloError.js';\nimport { DocumentType } from '../parser/parser.js';\nimport { OperationData } from './OperationData.js';\nvar MutationData = function (_super) {\n  __extends(MutationData, _super);\n  function MutationData(_a) {\n    var options = _a.options,\n      context = _a.context,\n      result = _a.result,\n      setResult = _a.setResult;\n    var _this = _super.call(this, options, context) || this;\n    _this.runMutation = function (mutationFunctionOptions) {\n      if (mutationFunctionOptions === void 0) {\n        mutationFunctionOptions = {};\n      }\n      _this.onMutationStart();\n      var mutationId = _this.generateNewMutationId();\n      return _this.mutate(mutationFunctionOptions).then(function (response) {\n        _this.onMutationCompleted(response, mutationId);\n        return response;\n      }).catch(function (error) {\n        _this.onMutationError(error, mutationId);\n        if (!_this.getOptions().onError) throw error;\n      });\n    };\n    _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n    _this.result = result;\n    _this.setResult = setResult;\n    _this.mostRecentMutationId = 0;\n    return _this;\n  }\n  MutationData.prototype.execute = function (result) {\n    this.isMounted = true;\n    this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n    return [this.runMutation, __assign(__assign({}, result), {\n      client: this.refreshClient().client\n    })];\n  };\n  MutationData.prototype.afterExecute = function () {\n    this.isMounted = true;\n    return this.unmount.bind(this);\n  };\n  MutationData.prototype.cleanup = function () {};\n  MutationData.prototype.mutate = function (mutationFunctionOptions) {\n    var _a = this.getOptions(),\n      mutation = _a.mutation,\n      variables = _a.variables,\n      optimisticResponse = _a.optimisticResponse,\n      update = _a.update,\n      _b = _a.context,\n      mutationContext = _b === void 0 ? {} : _b,\n      _c = _a.awaitRefetchQueries,\n      awaitRefetchQueries = _c === void 0 ? false : _c,\n      fetchPolicy = _a.fetchPolicy,\n      errorPolicy = _a.errorPolicy;\n    var mutateOptions = __assign({}, mutationFunctionOptions);\n    var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n    delete mutateOptions.variables;\n    return this.refreshClient().client.mutate(__assign({\n      mutation: mutation,\n      optimisticResponse: optimisticResponse,\n      refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries,\n      awaitRefetchQueries: awaitRefetchQueries,\n      update: update,\n      context: mutationContext,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      variables: mutateVariables\n    }, mutateOptions));\n  };\n  MutationData.prototype.onMutationStart = function () {\n    if (!this.result.loading && !this.getOptions().ignoreResults) {\n      this.updateResult({\n        loading: true,\n        error: undefined,\n        data: undefined,\n        called: true\n      });\n    }\n  };\n  MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n    var _a = this.getOptions(),\n      onCompleted = _a.onCompleted,\n      ignoreResults = _a.ignoreResults;\n    var data = response.data,\n      errors = response.errors;\n    var error = errors && errors.length > 0 ? new ApolloError({\n      graphQLErrors: errors\n    }) : undefined;\n    var callOncomplete = function () {\n      return onCompleted ? onCompleted(data) : null;\n    };\n    if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n      this.updateResult({\n        called: true,\n        loading: false,\n        data: data,\n        error: error\n      });\n    }\n    callOncomplete();\n  };\n  MutationData.prototype.onMutationError = function (error, mutationId) {\n    var onError = this.getOptions().onError;\n    if (this.isMostRecentMutation(mutationId)) {\n      this.updateResult({\n        loading: false,\n        error: error,\n        data: undefined,\n        called: true\n      });\n    }\n    if (onError) {\n      onError(error);\n    }\n  };\n  MutationData.prototype.generateNewMutationId = function () {\n    return ++this.mostRecentMutationId;\n  };\n  MutationData.prototype.isMostRecentMutation = function (mutationId) {\n    return this.mostRecentMutationId === mutationId;\n  };\n  MutationData.prototype.updateResult = function (result) {\n    if (this.isMounted && (!this.previousResult || !equal(this.previousResult, result))) {\n      this.setResult(result);\n      this.previousResult = result;\n    }\n  };\n  return MutationData;\n}(OperationData);\nexport { MutationData };","map":{"version":3,"mappings":"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","names":["MutationData","_super","__extends","_a","options","context","result","setResult","_this","call","runMutation","mutationFunctionOptions","onMutationStart","mutationId","generateNewMutationId","mutate","then","response","onMutationCompleted","catch","error","onMutationError","getOptions","onError","verifyDocumentType","mutation","DocumentType","Mutation","mostRecentMutationId","prototype","execute","isMounted","__assign","client","refreshClient","afterExecute","unmount","bind","cleanup","variables","optimisticResponse","update","_b","mutationContext","_c","awaitRefetchQueries","fetchPolicy","errorPolicy","mutateOptions","mutateVariables","Object","assign","refetchQueries","loading","ignoreResults","updateResult","undefined","data","called","onCompleted","errors","length","ApolloError","graphQLErrors","callOncomplete","isMostRecentMutation","previousResult","equal","OperationData"],"sources":["MutationData.js"],"sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { DocumentType } from '../parser/parser';\nimport { ApolloError } from '../../errors/ApolloError';\nimport { OperationData } from './OperationData';\nvar MutationData = (function (_super) {\n    __extends(MutationData, _super);\n    function MutationData(_a) {\n        var options = _a.options, context = _a.context, result = _a.result, setResult = _a.setResult;\n        var _this = _super.call(this, options, context) || this;\n        _this.runMutation = function (mutationFunctionOptions) {\n            if (mutationFunctionOptions === void 0) { mutationFunctionOptions = {}; }\n            _this.onMutationStart();\n            var mutationId = _this.generateNewMutationId();\n            return _this.mutate(mutationFunctionOptions)\n                .then(function (response) {\n                _this.onMutationCompleted(response, mutationId);\n                return response;\n            })\n                .catch(function (error) {\n                _this.onMutationError(error, mutationId);\n                if (!_this.getOptions().onError)\n                    throw error;\n            });\n        };\n        _this.verifyDocumentType(options.mutation, DocumentType.Mutation);\n        _this.result = result;\n        _this.setResult = setResult;\n        _this.mostRecentMutationId = 0;\n        return _this;\n    }\n    MutationData.prototype.execute = function (result) {\n        this.isMounted = true;\n        this.verifyDocumentType(this.getOptions().mutation, DocumentType.Mutation);\n        return [\n            this.runMutation,\n            __assign(__assign({}, result), { client: this.refreshClient().client })\n        ];\n    };\n    MutationData.prototype.afterExecute = function () {\n        this.isMounted = true;\n        return this.unmount.bind(this);\n    };\n    MutationData.prototype.cleanup = function () {\n    };\n    MutationData.prototype.mutate = function (mutationFunctionOptions) {\n        var _a = this.getOptions(), mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, update = _a.update, _b = _a.context, mutationContext = _b === void 0 ? {} : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, fetchPolicy = _a.fetchPolicy, errorPolicy = _a.errorPolicy;\n        var mutateOptions = __assign({}, mutationFunctionOptions);\n        var mutateVariables = Object.assign({}, variables, mutateOptions.variables);\n        delete mutateOptions.variables;\n        return this.refreshClient().client.mutate(__assign({ mutation: mutation,\n            optimisticResponse: optimisticResponse, refetchQueries: mutateOptions.refetchQueries || this.getOptions().refetchQueries, awaitRefetchQueries: awaitRefetchQueries,\n            update: update, context: mutationContext, fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy, variables: mutateVariables }, mutateOptions));\n    };\n    MutationData.prototype.onMutationStart = function () {\n        if (!this.result.loading && !this.getOptions().ignoreResults) {\n            this.updateResult({\n                loading: true,\n                error: undefined,\n                data: undefined,\n                called: true\n            });\n        }\n    };\n    MutationData.prototype.onMutationCompleted = function (response, mutationId) {\n        var _a = this.getOptions(), onCompleted = _a.onCompleted, ignoreResults = _a.ignoreResults;\n        var data = response.data, errors = response.errors;\n        var error = errors && errors.length > 0\n            ? new ApolloError({ graphQLErrors: errors })\n            : undefined;\n        var callOncomplete = function () {\n            return onCompleted ? onCompleted(data) : null;\n        };\n        if (this.isMostRecentMutation(mutationId) && !ignoreResults) {\n            this.updateResult({\n                called: true,\n                loading: false,\n                data: data,\n                error: error\n            });\n        }\n        callOncomplete();\n    };\n    MutationData.prototype.onMutationError = function (error, mutationId) {\n        var onError = this.getOptions().onError;\n        if (this.isMostRecentMutation(mutationId)) {\n            this.updateResult({\n                loading: false,\n                error: error,\n                data: undefined,\n                called: true\n            });\n        }\n        if (onError) {\n            onError(error);\n        }\n    };\n    MutationData.prototype.generateNewMutationId = function () {\n        return ++this.mostRecentMutationId;\n    };\n    MutationData.prototype.isMostRecentMutation = function (mutationId) {\n        return this.mostRecentMutationId === mutationId;\n    };\n    MutationData.prototype.updateResult = function (result) {\n        if (this.isMounted &&\n            (!this.previousResult || !equal(this.previousResult, result))) {\n            this.setResult(result);\n            this.previousResult = result;\n        }\n    };\n    return MutationData;\n}(OperationData));\nexport { MutationData };\n//# sourceMappingURL=MutationData.js.map"]},"metadata":{},"sourceType":"module"}