{"ast":null,"code":"function makeDefaultQueryInfo() {\n  return {\n    seen: false,\n    observable: null\n  };\n}\nvar RenderPromises = function () {\n  function RenderPromises() {\n    this.queryPromises = new Map();\n    this.queryInfoTrie = new Map();\n  }\n  RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n    this.lookupQueryInfo(props).observable = observable;\n  };\n  RenderPromises.prototype.getSSRObservable = function (props) {\n    return this.lookupQueryInfo(props).observable;\n  };\n  RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n    var info = this.lookupQueryInfo(queryInstance.getOptions());\n    if (!info.seen) {\n      this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n        resolve(queryInstance.fetchData());\n      }));\n      return null;\n    }\n    return finish();\n  };\n  RenderPromises.prototype.hasPromises = function () {\n    return this.queryPromises.size > 0;\n  };\n  RenderPromises.prototype.consumeAndAwaitPromises = function () {\n    var _this = this;\n    var promises = [];\n    this.queryPromises.forEach(function (promise, queryInstance) {\n      _this.lookupQueryInfo(queryInstance).seen = true;\n      promises.push(promise);\n    });\n    this.queryPromises.clear();\n    return Promise.all(promises);\n  };\n  RenderPromises.prototype.lookupQueryInfo = function (props) {\n    var queryInfoTrie = this.queryInfoTrie;\n    var query = props.query,\n      variables = props.variables;\n    var varMap = queryInfoTrie.get(query) || new Map();\n    if (!queryInfoTrie.has(query)) queryInfoTrie.set(query, varMap);\n    var variablesString = JSON.stringify(variables);\n    var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n    if (!varMap.has(variablesString)) varMap.set(variablesString, info);\n    return info;\n  };\n  return RenderPromises;\n}();\nexport { RenderPromises };","map":{"version":3,"mappings":"AAAA,SAASA,oBAAoB,GAAG;EAC5B,OAAO;IACHC,IAAI,EAAE,KAAK;IACXC,UAAU,EAAE;EACpB,CAAK;AACL;AACG,IAACC,cAAc,GAAI,YAAY;EAC9B,SAASA,cAAc,GAAG;IACtB,IAAI,CAACC,aAAa,GAAG,IAAIC,GAAG,EAAE;IAC9B,IAAI,CAACC,aAAa,GAAG,IAAID,GAAG,EAAE;EACtC;EACIF,cAAc,CAACI,SAAS,CAACC,qBAAqB,GAAG,UAAUN,UAAU,EAAEO,KAAK,EAAE;IAC1E,IAAI,CAACC,eAAe,CAACD,KAAK,CAAC,CAACP,UAAU,GAAGA,UAAU;EAC3D,CAAK;EACDC,cAAc,CAACI,SAAS,CAACI,gBAAgB,GAAG,UAAUF,KAAK,EAAE;IACzD,OAAO,IAAI,CAACC,eAAe,CAACD,KAAK,CAAC,CAACP,UAAU;EACrD,CAAK;EACDC,cAAc,CAACI,SAAS,CAACK,eAAe,GAAG,UAAUC,aAAa,EAAEC,MAAM,EAAE;IACxE,IAAIC,IAAI,GAAG,IAAI,CAACL,eAAe,CAACG,aAAa,CAACG,UAAU,EAAE,CAAC;IAC3D,IAAI,CAACD,IAAI,CAACd,IAAI,EAAE;MACZ,IAAI,CAACG,aAAa,CAACa,GAAG,CAACJ,aAAa,CAACG,UAAU,EAAE,EAAE,IAAIE,OAAO,CAAC,UAAUC,OAAO,EAAE;QAC9EA,OAAO,CAACN,aAAa,CAACO,SAAS,EAAE,CAAC;MAClD,CAAa,CAAC,CAAC;MACH,OAAO,IAAI;IACvB;IACQ,OAAON,MAAM,EAAE;EACvB,CAAK;EACDX,cAAc,CAACI,SAAS,CAACc,WAAW,GAAG,YAAY;IAC/C,OAAO,IAAI,CAACjB,aAAa,CAACkB,IAAI,GAAG,CAAC;EAC1C,CAAK;EACDnB,cAAc,CAACI,SAAS,CAACgB,uBAAuB,GAAG,YAAY;IAC3D,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAIC,QAAQ,GAAG,EAAE;IACjB,IAAI,CAACrB,aAAa,CAACsB,OAAO,CAAC,UAAUC,OAAO,EAAEd,aAAa,EAAE;MACzDW,KAAK,CAACd,eAAe,CAACG,aAAa,CAAC,CAACZ,IAAI,GAAG,IAAI;MAChDwB,QAAQ,CAACG,IAAI,CAACD,OAAO,CAAC;IAClC,CAAS,CAAC;IACF,IAAI,CAACvB,aAAa,CAACyB,KAAK,EAAE;IAC1B,OAAOX,OAAO,CAACY,GAAG,CAACL,QAAQ,CAAC;EACpC,CAAK;EACDtB,cAAc,CAACI,SAAS,CAACG,eAAe,GAAG,UAAUD,KAAK,EAAE;IACxD,IAAIH,aAAa,GAAG,IAAI,CAACA,aAAa;IACtC,IAAIyB,KAAK,GAAGtB,KAAK,CAACsB,KAAK;MAAEC,SAAS,GAAGvB,KAAK,CAACuB,SAAS;IACpD,IAAIC,MAAM,GAAG3B,aAAa,CAAC4B,GAAG,CAACH,KAAK,CAAC,IAAI,IAAI1B,GAAG,EAAE;IAClD,IAAI,CAACC,aAAa,CAAC6B,GAAG,CAACJ,KAAK,CAAC,EACzBzB,aAAa,CAACW,GAAG,CAACc,KAAK,EAAEE,MAAM,CAAC;IACpC,IAAIG,eAAe,GAAGC,IAAI,CAACC,SAAS,CAACN,SAAS,CAAC;IAC/C,IAAIjB,IAAI,GAAGkB,MAAM,CAACC,GAAG,CAACE,eAAe,CAAC,IAAIpC,oBAAoB,EAAE;IAChE,IAAI,CAACiC,MAAM,CAACE,GAAG,CAACC,eAAe,CAAC,EAC5BH,MAAM,CAAChB,GAAG,CAACmB,eAAe,EAAErB,IAAI,CAAC;IACrC,OAAOA,IAAI;EACnB,CAAK;EACD,OAAOZ,cAAc;AACzB,CAAC,EAAE","names":["makeDefaultQueryInfo","seen","observable","RenderPromises","queryPromises","Map","queryInfoTrie","prototype","registerSSRObservable","props","lookupQueryInfo","getSSRObservable","addQueryPromise","queryInstance","finish","info","getOptions","set","Promise","resolve","fetchData","hasPromises","size","consumeAndAwaitPromises","_this","promises","forEach","promise","push","clear","all","query","variables","varMap","get","has","variablesString","JSON","stringify"],"sources":["RenderPromises.js"],"sourcesContent":["function makeDefaultQueryInfo() {\n    return {\n        seen: false,\n        observable: null\n    };\n}\nvar RenderPromises = (function () {\n    function RenderPromises() {\n        this.queryPromises = new Map();\n        this.queryInfoTrie = new Map();\n    }\n    RenderPromises.prototype.registerSSRObservable = function (observable, props) {\n        this.lookupQueryInfo(props).observable = observable;\n    };\n    RenderPromises.prototype.getSSRObservable = function (props) {\n        return this.lookupQueryInfo(props).observable;\n    };\n    RenderPromises.prototype.addQueryPromise = function (queryInstance, finish) {\n        var info = this.lookupQueryInfo(queryInstance.getOptions());\n        if (!info.seen) {\n            this.queryPromises.set(queryInstance.getOptions(), new Promise(function (resolve) {\n                resolve(queryInstance.fetchData());\n            }));\n            return null;\n        }\n        return finish();\n    };\n    RenderPromises.prototype.hasPromises = function () {\n        return this.queryPromises.size > 0;\n    };\n    RenderPromises.prototype.consumeAndAwaitPromises = function () {\n        var _this = this;\n        var promises = [];\n        this.queryPromises.forEach(function (promise, queryInstance) {\n            _this.lookupQueryInfo(queryInstance).seen = true;\n            promises.push(promise);\n        });\n        this.queryPromises.clear();\n        return Promise.all(promises);\n    };\n    RenderPromises.prototype.lookupQueryInfo = function (props) {\n        var queryInfoTrie = this.queryInfoTrie;\n        var query = props.query, variables = props.variables;\n        var varMap = queryInfoTrie.get(query) || new Map();\n        if (!queryInfoTrie.has(query))\n            queryInfoTrie.set(query, varMap);\n        var variablesString = JSON.stringify(variables);\n        var info = varMap.get(variablesString) || makeDefaultQueryInfo();\n        if (!varMap.has(variablesString))\n            varMap.set(variablesString, info);\n        return info;\n    };\n    return RenderPromises;\n}());\nexport { RenderPromises };\n//# sourceMappingURL=RenderPromises.js.map"]},"metadata":{},"sourceType":"module"}