{"ast":null,"code":"import { __extends } from 'tslib';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport Observable from 'zen-observable';\nimport 'symbol-observable';\nimport { validateOperation } from '../utils/validateOperation.js';\nimport { createOperation } from '../utils/createOperation.js';\nimport { transformOperation } from '../utils/transformOperation.js';\nfunction passthrough(op, forward) {\n  return forward ? forward(op) : Observable.of();\n}\nfunction toLink(handler) {\n  return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n  return link.request.length <= 1;\n}\nvar LinkError = function (_super) {\n  __extends(LinkError, _super);\n  function LinkError(message, link) {\n    var _this = _super.call(this, message) || this;\n    _this.link = link;\n    return _this;\n  }\n  return LinkError;\n}(Error);\nvar ApolloLink = function () {\n  function ApolloLink(request) {\n    if (request) this.request = request;\n  }\n  ApolloLink.empty = function () {\n    return new ApolloLink(function () {\n      return Observable.of();\n    });\n  };\n  ApolloLink.from = function (links) {\n    if (links.length === 0) return ApolloLink.empty();\n    return links.map(toLink).reduce(function (x, y) {\n      return x.concat(y);\n    });\n  };\n  ApolloLink.split = function (test, left, right) {\n    var leftLink = toLink(left);\n    var rightLink = toLink(right || new ApolloLink(passthrough));\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n      return new ApolloLink(function (operation) {\n        return test(operation) ? leftLink.request(operation) || Observable.of() : rightLink.request(operation) || Observable.of();\n      });\n    } else {\n      return new ApolloLink(function (operation, forward) {\n        return test(operation) ? leftLink.request(operation, forward) || Observable.of() : rightLink.request(operation, forward) || Observable.of();\n      });\n    }\n  };\n  ApolloLink.execute = function (link, operation) {\n    return link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of();\n  };\n  ApolloLink.concat = function (first, second) {\n    var firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n      process.env.NODE_ENV === \"production\" || invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n      return firstLink;\n    }\n    var nextLink = toLink(second);\n    if (isTerminating(nextLink)) {\n      return new ApolloLink(function (operation) {\n        return firstLink.request(operation, function (op) {\n          return nextLink.request(op) || Observable.of();\n        }) || Observable.of();\n      });\n    } else {\n      return new ApolloLink(function (operation, forward) {\n        return firstLink.request(operation, function (op) {\n          return nextLink.request(op, forward) || Observable.of();\n        }) || Observable.of();\n      });\n    }\n  };\n  ApolloLink.prototype.split = function (test, left, right) {\n    return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n  };\n  ApolloLink.prototype.concat = function (next) {\n    return ApolloLink.concat(this, next);\n  };\n  ApolloLink.prototype.request = function (operation, forward) {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(4) : new InvariantError('request is not implemented');\n  };\n  ApolloLink.prototype.onError = function (reason) {\n    throw reason;\n  };\n  ApolloLink.prototype.setOnError = function (fn) {\n    this.onError = fn;\n    return this;\n  };\n  return ApolloLink;\n}();\nexport { ApolloLink };","map":{"version":3,"mappings":";;;;;;;AAMA,SAASA,WAAW,CAACC,EAAE,EAAEC,OAAO,EAAE;EAC9B,OAAQA,OAAO,GAAGA,OAAO,CAACD,EAAE,CAAC,GAAGE,UAAU,CAACC,EAAE,EAAE;AACnD;AACA,SAASC,MAAM,CAACC,OAAO,EAAE;EACrB,OAAO,OAAOA,OAAO,KAAK,UAAU,GAAG,IAAIC,UAAU,CAACD,OAAO,CAAC,GAAGA,OAAO;AAC5E;AACA,SAASE,aAAa,CAACC,IAAI,EAAE;EACzB,OAAOA,IAAI,CAACC,OAAO,CAACC,MAAM,IAAI,CAAC;AACnC;AACA,IAAIC,SAAS,GAAI,UAAUC,MAAM,EAAE;EAC/BC,SAAS,CAACF,SAAS,EAAEC,MAAM,CAAC;EAC5B,SAASD,SAAS,CAACG,OAAO,EAAEN,IAAI,EAAE;IAC9B,IAAIO,KAAK,GAAGH,MAAM,CAACI,IAAI,CAAC,IAAI,EAAEF,OAAO,CAAC,IAAI,IAAI;IAC9CC,KAAK,CAACP,IAAI,GAAGA,IAAI;IACjB,OAAOO,KAAK;EACpB;EACI,OAAOJ,SAAS;AACpB,CAAC,CAACM,KAAK,CAAE;AACN,IAACX,UAAU,GAAI,YAAY;EAC1B,SAASA,UAAU,CAACG,OAAO,EAAE;IACzB,IAAIA,OAAO,EACP,IAAI,CAACA,OAAO,GAAGA,OAAO;EAClC;EACIH,UAAU,CAACY,KAAK,GAAG,YAAY;IAC3B,OAAO,IAAIZ,UAAU,CAAC,YAAY;MAAE,OAAOJ,UAAU,CAACC,EAAE,EAAE;IAAC,CAAE,CAAC;EACtE,CAAK;EACDG,UAAU,CAACa,IAAI,GAAG,UAAUC,KAAK,EAAE;IAC/B,IAAIA,KAAK,CAACV,MAAM,KAAK,CAAC,EAClB,OAAOJ,UAAU,CAACY,KAAK,EAAE;IAC7B,OAAOE,KAAK,CAACC,GAAG,CAACjB,MAAM,CAAC,CAACkB,MAAM,CAAC,UAAUC,CAAC,EAAEC,CAAC,EAAE;MAAE,OAAOD,CAAC,CAACE,MAAM,CAACD,CAAC,CAAC;IAAC,CAAE,CAAC;EAChF,CAAK;EACDlB,UAAU,CAACoB,KAAK,GAAG,UAAUC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAE;IAC5C,IAAIC,QAAQ,GAAG1B,MAAM,CAACwB,IAAI,CAAC;IAC3B,IAAIG,SAAS,GAAG3B,MAAM,CAACyB,KAAK,IAAI,IAAIvB,UAAU,CAACP,WAAW,CAAC,CAAC;IAC5D,IAAIQ,aAAa,CAACuB,QAAQ,CAAC,IAAIvB,aAAa,CAACwB,SAAS,CAAC,EAAE;MACrD,OAAO,IAAIzB,UAAU,CAAC,UAAU0B,SAAS,EAAE;QACvC,OAAOL,IAAI,CAACK,SAAS,CAAC,GAChBF,QAAQ,CAACrB,OAAO,CAACuB,SAAS,CAAC,IAAI9B,UAAU,CAACC,EAAE,EAAE,GAC9C4B,SAAS,CAACtB,OAAO,CAACuB,SAAS,CAAC,IAAI9B,UAAU,CAACC,EAAE,EAAE;MACrE,CAAa,CAAC;IACd,CAAS,MACI;MACD,OAAO,IAAIG,UAAU,CAAC,UAAU0B,SAAS,EAAE/B,OAAO,EAAE;QAChD,OAAO0B,IAAI,CAACK,SAAS,CAAC,GAChBF,QAAQ,CAACrB,OAAO,CAACuB,SAAS,EAAE/B,OAAO,CAAC,IAAIC,UAAU,CAACC,EAAE,EAAE,GACvD4B,SAAS,CAACtB,OAAO,CAACuB,SAAS,EAAE/B,OAAO,CAAC,IAAIC,UAAU,CAACC,EAAE,EAAE;MAC9E,CAAa,CAAC;IACd;EACA,CAAK;EACDG,UAAU,CAAC2B,OAAO,GAAG,UAAUzB,IAAI,EAAEwB,SAAS,EAAE;IAC5C,OAAQxB,IAAI,CAACC,OAAO,CAACyB,eAAe,CAACF,SAAS,CAACG,OAAO,EAAEC,kBAAkB,CAACC,iBAAiB,CAACL,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI9B,UAAU,CAACC,EAAE,EAAE;EACrI,CAAK;EACDG,UAAU,CAACmB,MAAM,GAAG,UAAUa,KAAK,EAAEC,MAAM,EAAE;IACzC,IAAIC,SAAS,GAAGpC,MAAM,CAACkC,KAAK,CAAC;IAC7B,IAAI/B,aAAa,CAACiC,SAAS,CAAC,EAAE;MAC1BC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIC,SAAS,CAACC,IAAI,CAAC,IAAIlC,SAAS,CAAC,yEAAyE,EAAE6B,SAAS,CAAC,CAAC;MAC5J,OAAOA,SAAS;IAC5B;IACQ,IAAIM,QAAQ,GAAG1C,MAAM,CAACmC,MAAM,CAAC;IAC7B,IAAIhC,aAAa,CAACuC,QAAQ,CAAC,EAAE;MACzB,OAAO,IAAIxC,UAAU,CAAC,UAAU0B,SAAS,EAAE;QACvC,OAAOQ,SAAS,CAAC/B,OAAO,CAACuB,SAAS,EAAE,UAAUhC,EAAE,EAAE;UAAE,OAAO8C,QAAQ,CAACrC,OAAO,CAACT,EAAE,CAAC,IAAIE,UAAU,CAACC,EAAE,EAAE;QAAC,CAAE,CAAC,IAAID,UAAU,CAACC,EAAE,EAAE;MACzI,CAAa,CAAC;IACd,CAAS,MACI;MACD,OAAO,IAAIG,UAAU,CAAC,UAAU0B,SAAS,EAAE/B,OAAO,EAAE;QAChD,OAAQuC,SAAS,CAAC/B,OAAO,CAACuB,SAAS,EAAE,UAAUhC,EAAE,EAAE;UAC/C,OAAO8C,QAAQ,CAACrC,OAAO,CAACT,EAAE,EAAEC,OAAO,CAAC,IAAIC,UAAU,CAACC,EAAE,EAAE;QAC3E,CAAiB,CAAC,IAAID,UAAU,CAACC,EAAE,EAAE;MACrC,CAAa,CAAC;IACd;EACA,CAAK;EACDG,UAAU,CAACyC,SAAS,CAACrB,KAAK,GAAG,UAAUC,IAAI,EAAEC,IAAI,EAAEC,KAAK,EAAE;IACtD,OAAO,IAAI,CAACJ,MAAM,CAACnB,UAAU,CAACoB,KAAK,CAACC,IAAI,EAAEC,IAAI,EAAEC,KAAK,IAAI,IAAIvB,UAAU,CAACP,WAAW,CAAC,CAAC,CAAC;EAC9F,CAAK;EACDO,UAAU,CAACyC,SAAS,CAACtB,MAAM,GAAG,UAAUuB,IAAI,EAAE;IAC1C,OAAO1C,UAAU,CAACmB,MAAM,CAAC,IAAI,EAAEuB,IAAI,CAAC;EAC5C,CAAK;EACD1C,UAAU,CAACyC,SAAS,CAACtC,OAAO,GAAG,UAAUuB,SAAS,EAAE/B,OAAO,EAAE;IACzD,MAAMwC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG,IAAIM,cAAc,CAAC,CAAC,CAAC,GAAG,IAAIA,cAAc,CAAC,4BAA4B,CAAC;EAC9H,CAAK;EACD3C,UAAU,CAACyC,SAAS,CAACG,OAAO,GAAG,UAAUC,MAAM,EAAE;IAC7C,MAAMA,MAAM;EACpB,CAAK;EACD7C,UAAU,CAACyC,SAAS,CAACK,UAAU,GAAG,UAAUC,EAAE,EAAE;IAC5C,IAAI,CAACH,OAAO,GAAGG,EAAE;IACjB,OAAO,IAAI;EACnB,CAAK;EACD,OAAO/C,UAAU;AACrB,CAAC,EAAE","names":["passthrough","op","forward","Observable","of","toLink","handler","ApolloLink","isTerminating","link","request","length","LinkError","_super","__extends","message","_this","call","Error","empty","from","links","map","reduce","x","y","concat","split","test","left","right","leftLink","rightLink","operation","execute","createOperation","context","transformOperation","validateOperation","first","second","firstLink","process","env","NODE_ENV","invariant","warn","nextLink","prototype","next","InvariantError","onError","reason","setOnError","fn"],"sources":["ApolloLink.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { Observable } from '../../utilities/observables/Observable';\nimport { validateOperation } from '../utils/validateOperation';\nimport { createOperation } from '../utils/createOperation';\nimport { transformOperation } from '../utils/transformOperation';\nfunction passthrough(op, forward) {\n    return (forward ? forward(op) : Observable.of());\n}\nfunction toLink(handler) {\n    return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nvar LinkError = (function (_super) {\n    __extends(LinkError, _super);\n    function LinkError(message, link) {\n        var _this = _super.call(this, message) || this;\n        _this.link = link;\n        return _this;\n    }\n    return LinkError;\n}(Error));\nvar ApolloLink = (function () {\n    function ApolloLink(request) {\n        if (request)\n            this.request = request;\n    }\n    ApolloLink.empty = function () {\n        return new ApolloLink(function () { return Observable.of(); });\n    };\n    ApolloLink.from = function (links) {\n        if (links.length === 0)\n            return ApolloLink.empty();\n        return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\n    };\n    ApolloLink.split = function (test, left, right) {\n        var leftLink = toLink(left);\n        var rightLink = toLink(right || new ApolloLink(passthrough));\n        if (isTerminating(leftLink) && isTerminating(rightLink)) {\n            return new ApolloLink(function (operation) {\n                return test(operation)\n                    ? leftLink.request(operation) || Observable.of()\n                    : rightLink.request(operation) || Observable.of();\n            });\n        }\n        else {\n            return new ApolloLink(function (operation, forward) {\n                return test(operation)\n                    ? leftLink.request(operation, forward) || Observable.of()\n                    : rightLink.request(operation, forward) || Observable.of();\n            });\n        }\n    };\n    ApolloLink.execute = function (link, operation) {\n        return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());\n    };\n    ApolloLink.concat = function (first, second) {\n        var firstLink = toLink(first);\n        if (isTerminating(firstLink)) {\n            invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n            return firstLink;\n        }\n        var nextLink = toLink(second);\n        if (isTerminating(nextLink)) {\n            return new ApolloLink(function (operation) {\n                return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();\n            });\n        }\n        else {\n            return new ApolloLink(function (operation, forward) {\n                return (firstLink.request(operation, function (op) {\n                    return nextLink.request(op, forward) || Observable.of();\n                }) || Observable.of());\n            });\n        }\n    };\n    ApolloLink.prototype.split = function (test, left, right) {\n        return this.concat(ApolloLink.split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function (next) {\n        return ApolloLink.concat(this, next);\n    };\n    ApolloLink.prototype.request = function (operation, forward) {\n        throw new InvariantError('request is not implemented');\n    };\n    ApolloLink.prototype.onError = function (reason) {\n        throw reason;\n    };\n    ApolloLink.prototype.setOnError = function (fn) {\n        this.onError = fn;\n        return this;\n    };\n    return ApolloLink;\n}());\nexport { ApolloLink };\n//# sourceMappingURL=ApolloLink.js.map"]},"metadata":{},"sourceType":"module"}