{"ast":null,"code":"import { __rest, __assign } from 'tslib';\nimport Observable from 'zen-observable';\nimport 'symbol-observable';\nimport { ApolloLink } from '../core/ApolloLink.js';\nimport { serializeFetchParameter } from './serializeFetchParameter.js';\nimport { selectURI } from './selectURI.js';\nimport { parseAndCheckHttpResponse } from './parseAndCheckHttpResponse.js';\nimport { checkFetcher } from './checkFetcher.js';\nimport { selectHttpOptionsAndBody, fallbackHttpConfig } from './selectHttpOptionsAndBody.js';\nimport { createSignalIfSupported } from './createSignalIfSupported.js';\nimport { rewriteURIForGET } from './rewriteURIForGET.js';\nimport { fromError } from '../utils/fromError.js';\nvar createHttpLink = function (linkOptions) {\n  if (linkOptions === void 0) {\n    linkOptions = {};\n  }\n  var _a = linkOptions.uri,\n    uri = _a === void 0 ? '/graphql' : _a,\n    fetcher = linkOptions.fetch,\n    includeExtensions = linkOptions.includeExtensions,\n    useGETForQueries = linkOptions.useGETForQueries,\n    requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n  checkFetcher(fetcher);\n  if (!fetcher) {\n    fetcher = fetch;\n  }\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: requestOptions.fetchOptions,\n    credentials: requestOptions.credentials,\n    headers: requestOptions.headers\n  };\n  return new ApolloLink(function (operation) {\n    var chosenURI = selectURI(operation, uri);\n    var context = operation.getContext();\n    var clientAwarenessHeaders = {};\n    if (context.clientAwareness) {\n      var _a = context.clientAwareness,\n        name_1 = _a.name,\n        version = _a.version;\n      if (name_1) {\n        clientAwarenessHeaders['apollographql-client-name'] = name_1;\n      }\n      if (version) {\n        clientAwarenessHeaders['apollographql-client-version'] = version;\n      }\n    }\n    var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: contextHeaders\n    };\n    var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig),\n      options = _b.options,\n      body = _b.body;\n    var controller;\n    if (!options.signal) {\n      var _c = createSignalIfSupported(),\n        _controller = _c.controller,\n        signal = _c.signal;\n      controller = _controller;\n      if (controller) options.signal = signal;\n    }\n    var definitionIsMutation = function (d) {\n      return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n    };\n    if (useGETForQueries && !operation.query.definitions.some(definitionIsMutation)) {\n      options.method = 'GET';\n    }\n    if (options.method === 'GET') {\n      var _d = rewriteURIForGET(chosenURI, body),\n        newURI = _d.newURI,\n        parseError = _d.parseError;\n      if (parseError) {\n        return fromError(parseError);\n      }\n      chosenURI = newURI;\n    } else {\n      try {\n        options.body = serializeFetchParameter(body, 'Payload');\n      } catch (parseError) {\n        return fromError(parseError);\n      }\n    }\n    return new Observable(function (observer) {\n      fetcher(chosenURI, options).then(function (response) {\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {\n        observer.next(result);\n        observer.complete();\n        return result;\n      }).catch(function (err) {\n        if (err.name === 'AbortError') return;\n        if (err.result && err.result.errors && err.result.data) {\n          observer.next(err.result);\n        }\n        observer.error(err);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};\nexport { createHttpLink };","map":{"version":3,"mappings":"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","names":["createHttpLink","linkOptions","_a","uri","fetcher","fetch","includeExtensions","useGETForQueries","requestOptions","__rest","checkFetcher","linkConfig","http","options","fetchOptions","credentials","headers","ApolloLink","operation","chosenURI","selectURI","context","getContext","clientAwarenessHeaders","clientAwareness","name_1","name","version","contextHeaders","__assign","contextConfig","_b","selectHttpOptionsAndBody","fallbackHttpConfig","body","controller","signal","_c","createSignalIfSupported","_controller","definitionIsMutation","d","kind","query","definitions","some","method","_d","rewriteURIForGET","newURI","parseError","fromError","serializeFetchParameter","Observable","observer","then","response","setContext","parseAndCheckHttpResponse","result","next","complete","catch","err","errors","data","error","abort"],"sources":["createHttpLink.js"],"sourcesContent":["import { __assign, __rest } from \"tslib\";\nimport { Observable } from '../../utilities/observables/Observable';\nimport { serializeFetchParameter } from './serializeFetchParameter';\nimport { selectURI } from './selectURI';\nimport { parseAndCheckHttpResponse } from './parseAndCheckHttpResponse';\nimport { checkFetcher } from './checkFetcher';\nimport { selectHttpOptionsAndBody, fallbackHttpConfig } from './selectHttpOptionsAndBody';\nimport { createSignalIfSupported } from './createSignalIfSupported';\nimport { rewriteURIForGET } from './rewriteURIForGET';\nimport { ApolloLink } from '../core/ApolloLink';\nimport { fromError } from '../utils/fromError';\nexport var createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, fetcher = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n    checkFetcher(fetcher);\n    if (!fetcher) {\n        fetcher = fetch;\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new ApolloLink(function (operation) {\n        var chosenURI = selectURI(operation, uri);\n        var context = operation.getContext();\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders['apollographql-client-name'] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders['apollographql-client-version'] = version;\n            }\n        }\n        var contextHeaders = __assign(__assign({}, clientAwarenessHeaders), context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        var controller;\n        if (!options.signal) {\n            var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;\n            controller = _controller;\n            if (controller)\n                options.signal = signal;\n        }\n        var definitionIsMutation = function (d) {\n            return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n        };\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = 'GET';\n        }\n        if (options.method === 'GET') {\n            var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;\n            if (parseError) {\n                return fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = serializeFetchParameter(body, 'Payload');\n            }\n            catch (parseError) {\n                return fromError(parseError);\n            }\n        }\n        return new Observable(function (observer) {\n            fetcher(chosenURI, options)\n                .then(function (response) {\n                operation.setContext({ response: response });\n                return response;\n            })\n                .then(parseAndCheckHttpResponse(operation))\n                .then(function (result) {\n                observer.next(result);\n                observer.complete();\n                return result;\n            })\n                .catch(function (err) {\n                if (err.name === 'AbortError')\n                    return;\n                if (err.result && err.result.errors && err.result.data) {\n                    observer.next(err.result);\n                }\n                observer.error(err);\n            });\n            return function () {\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\n//# sourceMappingURL=createHttpLink.js.map"]},"metadata":{},"sourceType":"module"}