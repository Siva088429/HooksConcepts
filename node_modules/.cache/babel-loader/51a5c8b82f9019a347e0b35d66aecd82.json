{"ast":null,"code":"import Observable from 'zen-observable';\nimport 'symbol-observable';\nfunction asyncMap(observable, mapFn, catchFn) {\n  return new Observable(function (observer) {\n    var next = observer.next,\n      error = observer.error,\n      complete = observer.complete;\n    var activeCallbackCount = 0;\n    var completed = false;\n    function makeCallback(examiner, delegate) {\n      if (examiner) {\n        return function (arg) {\n          ++activeCallbackCount;\n          new Promise(function (resolve) {\n            return resolve(examiner(arg));\n          }).then(function (result) {\n            --activeCallbackCount;\n            next && next.call(observer, result);\n            if (completed) {\n              handler.complete();\n            }\n          }, function (e) {\n            --activeCallbackCount;\n            error && error.call(observer, e);\n          });\n        };\n      } else {\n        return function (arg) {\n          return delegate && delegate.call(observer, arg);\n        };\n      }\n    }\n    var handler = {\n      next: makeCallback(mapFn, next),\n      error: makeCallback(catchFn, error),\n      complete: function () {\n        completed = true;\n        if (!activeCallbackCount) {\n          complete && complete.call(observer);\n        }\n      }\n    };\n    var sub = observable.subscribe(handler);\n    return function () {\n      return sub.unsubscribe();\n    };\n  });\n}\nexport { asyncMap };","map":{"version":3,"mappings":";;AACO,SAASA,QAAQ,CAACC,UAAU,EAAEC,KAAK,EAAEC,OAAO,EAAE;EACjD,OAAO,IAAIC,UAAU,CAAC,UAAUC,QAAQ,EAAE;IACtC,IAAIC,IAAI,GAAGD,QAAQ,CAACC,IAAI;MAAEC,KAAK,GAAGF,QAAQ,CAACE,KAAK;MAAEC,QAAQ,GAAGH,QAAQ,CAACG,QAAQ;IAC9E,IAAIC,mBAAmB,GAAG,CAAC;IAC3B,IAAIC,SAAS,GAAG,KAAK;IACrB,SAASC,YAAY,CAACC,QAAQ,EAAEC,QAAQ,EAAE;MACtC,IAAID,QAAQ,EAAE;QACV,OAAO,UAAUE,GAAG,EAAE;UAClB,EAAEL,mBAAmB;UACrB,IAAIM,OAAO,CAAC,UAAUC,OAAO,EAAE;YAAE,OAAOA,OAAO,CAACJ,QAAQ,CAACE,GAAG,CAAC,CAAC;UAAC,CAAE,CAAC,CAACG,IAAI,CAAC,UAAUC,MAAM,EAAE;YACtF,EAAET,mBAAmB;YACrBH,IAAI,IAAIA,IAAI,CAACa,IAAI,CAACd,QAAQ,EAAEa,MAAM,CAAC;YACnC,IAAIR,SAAS,EAAE;cACXU,OAAO,CAACZ,QAAQ,EAAE;YAC9C;UACA,CAAqB,EAAE,UAAUa,CAAC,EAAE;YACZ,EAAEZ,mBAAmB;YACrBF,KAAK,IAAIA,KAAK,CAACY,IAAI,CAACd,QAAQ,EAAEgB,CAAC,CAAC;UACxD,CAAqB,CAAC;QACtB,CAAiB;MACjB,CAAa,MACI;QACD,OAAO,UAAUP,GAAG,EAAE;UAAE,OAAOD,QAAQ,IAAIA,QAAQ,CAACM,IAAI,CAACd,QAAQ,EAAES,GAAG,CAAC;QAAC,CAAE;MAC1F;IACA;IACQ,IAAIM,OAAO,GAAG;MACVd,IAAI,EAAEK,YAAY,CAACT,KAAK,EAAEI,IAAI,CAAC;MAC/BC,KAAK,EAAEI,YAAY,CAACR,OAAO,EAAEI,KAAK,CAAC;MACnCC,QAAQ,EAAE,YAAY;QAClBE,SAAS,GAAG,IAAI;QAChB,IAAI,CAACD,mBAAmB,EAAE;UACtBD,QAAQ,IAAIA,QAAQ,CAACW,IAAI,CAACd,QAAQ,CAAC;QACvD;MACA;IACA,CAAS;IACD,IAAIiB,GAAG,GAAGrB,UAAU,CAACsB,SAAS,CAACH,OAAO,CAAC;IACvC,OAAO,YAAY;MAAE,OAAOE,GAAG,CAACE,WAAW,EAAE;IAAC,CAAE;EACxD,CAAK,CAAC;AACN","names":["asyncMap","observable","mapFn","catchFn","Observable","observer","next","error","complete","activeCallbackCount","completed","makeCallback","examiner","delegate","arg","Promise","resolve","then","result","call","handler","e","sub","subscribe","unsubscribe"],"sources":["asyncMap.js"],"sourcesContent":["import { Observable } from \"./Observable\";\nexport function asyncMap(observable, mapFn, catchFn) {\n    return new Observable(function (observer) {\n        var next = observer.next, error = observer.error, complete = observer.complete;\n        var activeCallbackCount = 0;\n        var completed = false;\n        function makeCallback(examiner, delegate) {\n            if (examiner) {\n                return function (arg) {\n                    ++activeCallbackCount;\n                    new Promise(function (resolve) { return resolve(examiner(arg)); }).then(function (result) {\n                        --activeCallbackCount;\n                        next && next.call(observer, result);\n                        if (completed) {\n                            handler.complete();\n                        }\n                    }, function (e) {\n                        --activeCallbackCount;\n                        error && error.call(observer, e);\n                    });\n                };\n            }\n            else {\n                return function (arg) { return delegate && delegate.call(observer, arg); };\n            }\n        }\n        var handler = {\n            next: makeCallback(mapFn, next),\n            error: makeCallback(catchFn, error),\n            complete: function () {\n                completed = true;\n                if (!activeCallbackCount) {\n                    complete && complete.call(observer);\n                }\n            },\n        };\n        var sub = observable.subscribe(handler);\n        return function () { return sub.unsubscribe(); };\n    });\n}\n//# sourceMappingURL=asyncMap.js.map"]},"metadata":{},"sourceType":"module"}