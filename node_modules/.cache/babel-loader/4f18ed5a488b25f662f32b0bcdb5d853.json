{"ast":null,"code":"import { __extends, __assign } from 'tslib';\nimport { equal } from '@wry/equality';\nimport { OperationData } from './OperationData.js';\nvar SubscriptionData = function (_super) {\n  __extends(SubscriptionData, _super);\n  function SubscriptionData(_a) {\n    var options = _a.options,\n      context = _a.context,\n      setResult = _a.setResult;\n    var _this = _super.call(this, options, context) || this;\n    _this.currentObservable = {};\n    _this.setResult = setResult;\n    _this.initialize(options);\n    return _this;\n  }\n  SubscriptionData.prototype.execute = function (result) {\n    if (this.getOptions().skip === true) {\n      this.cleanup();\n      return {\n        loading: false,\n        error: undefined,\n        data: undefined,\n        variables: this.getOptions().variables\n      };\n    }\n    var currentResult = result;\n    if (this.refreshClient().isNew) {\n      currentResult = this.getLoadingResult();\n    }\n    var shouldResubscribe = this.getOptions().shouldResubscribe;\n    if (typeof shouldResubscribe === 'function') {\n      shouldResubscribe = !!shouldResubscribe(this.getOptions());\n    }\n    if (shouldResubscribe !== false && this.previousOptions && Object.keys(this.previousOptions).length > 0 && (this.previousOptions.subscription !== this.getOptions().subscription || !equal(this.previousOptions.variables, this.getOptions().variables) || this.previousOptions.skip !== this.getOptions().skip)) {\n      this.cleanup();\n      currentResult = this.getLoadingResult();\n    }\n    this.initialize(this.getOptions());\n    this.startSubscription();\n    this.previousOptions = this.getOptions();\n    return __assign(__assign({}, currentResult), {\n      variables: this.getOptions().variables\n    });\n  };\n  SubscriptionData.prototype.afterExecute = function () {\n    this.isMounted = true;\n  };\n  SubscriptionData.prototype.cleanup = function () {\n    this.endSubscription();\n    delete this.currentObservable.query;\n  };\n  SubscriptionData.prototype.initialize = function (options) {\n    if (this.currentObservable.query || this.getOptions().skip === true) return;\n    this.currentObservable.query = this.refreshClient().client.subscribe({\n      query: options.subscription,\n      variables: options.variables,\n      fetchPolicy: options.fetchPolicy\n    });\n  };\n  SubscriptionData.prototype.startSubscription = function () {\n    if (this.currentObservable.subscription) return;\n    this.currentObservable.subscription = this.currentObservable.query.subscribe({\n      next: this.updateCurrentData.bind(this),\n      error: this.updateError.bind(this),\n      complete: this.completeSubscription.bind(this)\n    });\n  };\n  SubscriptionData.prototype.getLoadingResult = function () {\n    return {\n      loading: true,\n      error: undefined,\n      data: undefined\n    };\n  };\n  SubscriptionData.prototype.updateResult = function (result) {\n    if (this.isMounted) {\n      this.setResult(result);\n    }\n  };\n  SubscriptionData.prototype.updateCurrentData = function (result) {\n    var onSubscriptionData = this.getOptions().onSubscriptionData;\n    this.updateResult({\n      data: result.data,\n      loading: false,\n      error: undefined\n    });\n    if (onSubscriptionData) {\n      onSubscriptionData({\n        client: this.refreshClient().client,\n        subscriptionData: result\n      });\n    }\n  };\n  SubscriptionData.prototype.updateError = function (error) {\n    this.updateResult({\n      error: error,\n      loading: false\n    });\n  };\n  SubscriptionData.prototype.completeSubscription = function () {\n    var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n    if (onSubscriptionComplete) onSubscriptionComplete();\n    this.endSubscription();\n  };\n  SubscriptionData.prototype.endSubscription = function () {\n    if (this.currentObservable.subscription) {\n      this.currentObservable.subscription.unsubscribe();\n      delete this.currentObservable.subscription;\n    }\n  };\n  return SubscriptionData;\n}(OperationData);\nexport { SubscriptionData };","map":{"version":3,"mappings":";;;AAGG,IAACA,gBAAgB,GAAI,UAAUC,MAAM,EAAE;EACtCC,SAAS,CAACF,gBAAgB,EAAEC,MAAM,CAAC;EACnC,SAASD,gBAAgB,CAACG,EAAE,EAAE;IAC1B,IAAIC,OAAO,GAAGD,EAAE,CAACC,OAAO;MAAEC,OAAO,GAAGF,EAAE,CAACE,OAAO;MAAEC,SAAS,GAAGH,EAAE,CAACG,SAAS;IACxE,IAAIC,KAAK,GAAGN,MAAM,CAACO,IAAI,CAAC,IAAI,EAAEJ,OAAO,EAAEC,OAAO,CAAC,IAAI,IAAI;IACvDE,KAAK,CAACE,iBAAiB,GAAG,EAAE;IAC5BF,KAAK,CAACD,SAAS,GAAGA,SAAS;IAC3BC,KAAK,CAACG,UAAU,CAACN,OAAO,CAAC;IACzB,OAAOG,KAAK;EACpB;EACIP,gBAAgB,CAACW,SAAS,CAACC,OAAO,GAAG,UAAUC,MAAM,EAAE;IACnD,IAAI,IAAI,CAACC,UAAU,EAAE,CAACC,IAAI,KAAK,IAAI,EAAE;MACjC,IAAI,CAACC,OAAO,EAAE;MACd,OAAO;QACHC,OAAO,EAAE,KAAK;QACdC,KAAK,EAAEC,SAAS;QAChBC,IAAI,EAAED,SAAS;QACfE,SAAS,EAAE,IAAI,CAACP,UAAU,EAAE,CAACO;MAC7C,CAAa;IACb;IACQ,IAAIC,aAAa,GAAGT,MAAM;IAC1B,IAAI,IAAI,CAACU,aAAa,EAAE,CAACC,KAAK,EAAE;MAC5BF,aAAa,GAAG,IAAI,CAACG,gBAAgB,EAAE;IACnD;IACQ,IAAIC,iBAAiB,GAAG,IAAI,CAACZ,UAAU,EAAE,CAACY,iBAAiB;IAC3D,IAAI,OAAOA,iBAAiB,KAAK,UAAU,EAAE;MACzCA,iBAAiB,GAAG,CAAC,CAACA,iBAAiB,CAAC,IAAI,CAACZ,UAAU,EAAE,CAAC;IACtE;IACQ,IAAIY,iBAAiB,KAAK,KAAK,IAC3B,IAAI,CAACC,eAAe,IACpBC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACF,eAAe,CAAC,CAACG,MAAM,GAAG,CAAC,KAC3C,IAAI,CAACH,eAAe,CAACI,YAAY,KAAK,IAAI,CAACjB,UAAU,EAAE,CAACiB,YAAY,IACjE,CAACC,KAAK,CAAC,IAAI,CAACL,eAAe,CAACN,SAAS,EAAE,IAAI,CAACP,UAAU,EAAE,CAACO,SAAS,CAAC,IACnE,IAAI,CAACM,eAAe,CAACZ,IAAI,KAAK,IAAI,CAACD,UAAU,EAAE,CAACC,IAAI,CAAC,EAAE;MAC3D,IAAI,CAACC,OAAO,EAAE;MACdM,aAAa,GAAG,IAAI,CAACG,gBAAgB,EAAE;IACnD;IACQ,IAAI,CAACf,UAAU,CAAC,IAAI,CAACI,UAAU,EAAE,CAAC;IAClC,IAAI,CAACmB,iBAAiB,EAAE;IACxB,IAAI,CAACN,eAAe,GAAG,IAAI,CAACb,UAAU,EAAE;IACxC,OAAOoB,QAAQ,CAACA,QAAQ,CAAC,EAAE,EAAEZ,aAAa,CAAC,EAAE;MAAED,SAAS,EAAE,IAAI,CAACP,UAAU,EAAE,CAACO;IAAS,CAAE,CAAC;EAChG,CAAK;EACDrB,gBAAgB,CAACW,SAAS,CAACwB,YAAY,GAAG,YAAY;IAClD,IAAI,CAACC,SAAS,GAAG,IAAI;EAC7B,CAAK;EACDpC,gBAAgB,CAACW,SAAS,CAACK,OAAO,GAAG,YAAY;IAC7C,IAAI,CAACqB,eAAe,EAAE;IACtB,OAAO,IAAI,CAAC5B,iBAAiB,CAAC6B,KAAK;EAC3C,CAAK;EACDtC,gBAAgB,CAACW,SAAS,CAACD,UAAU,GAAG,UAAUN,OAAO,EAAE;IACvD,IAAI,IAAI,CAACK,iBAAiB,CAAC6B,KAAK,IAAI,IAAI,CAACxB,UAAU,EAAE,CAACC,IAAI,KAAK,IAAI,EAC/D;IACJ,IAAI,CAACN,iBAAiB,CAAC6B,KAAK,GAAG,IAAI,CAACf,aAAa,EAAE,CAACgB,MAAM,CAACC,SAAS,CAAC;MACjEF,KAAK,EAAElC,OAAO,CAAC2B,YAAY;MAC3BV,SAAS,EAAEjB,OAAO,CAACiB,SAAS;MAC5BoB,WAAW,EAAErC,OAAO,CAACqC;IACjC,CAAS,CAAC;EACV,CAAK;EACDzC,gBAAgB,CAACW,SAAS,CAACsB,iBAAiB,GAAG,YAAY;IACvD,IAAI,IAAI,CAACxB,iBAAiB,CAACsB,YAAY,EACnC;IACJ,IAAI,CAACtB,iBAAiB,CAACsB,YAAY,GAAG,IAAI,CAACtB,iBAAiB,CAAC6B,KAAK,CAACE,SAAS,CAAC;MACzEE,IAAI,EAAE,IAAI,CAACC,iBAAiB,CAACC,IAAI,CAAC,IAAI,CAAC;MACvC1B,KAAK,EAAE,IAAI,CAAC2B,WAAW,CAACD,IAAI,CAAC,IAAI,CAAC;MAClCE,QAAQ,EAAE,IAAI,CAACC,oBAAoB,CAACH,IAAI,CAAC,IAAI;IACzD,CAAS,CAAC;EACV,CAAK;EACD5C,gBAAgB,CAACW,SAAS,CAACc,gBAAgB,GAAG,YAAY;IACtD,OAAO;MACHR,OAAO,EAAE,IAAI;MACbC,KAAK,EAAEC,SAAS;MAChBC,IAAI,EAAED;IAClB,CAAS;EACT,CAAK;EACDnB,gBAAgB,CAACW,SAAS,CAACqC,YAAY,GAAG,UAAUnC,MAAM,EAAE;IACxD,IAAI,IAAI,CAACuB,SAAS,EAAE;MAChB,IAAI,CAAC9B,SAAS,CAACO,MAAM,CAAC;IAClC;EACA,CAAK;EACDb,gBAAgB,CAACW,SAAS,CAACgC,iBAAiB,GAAG,UAAU9B,MAAM,EAAE;IAC7D,IAAIoC,kBAAkB,GAAG,IAAI,CAACnC,UAAU,EAAE,CAACmC,kBAAkB;IAC7D,IAAI,CAACD,YAAY,CAAC;MACd5B,IAAI,EAAEP,MAAM,CAACO,IAAI;MACjBH,OAAO,EAAE,KAAK;MACdC,KAAK,EAAEC;IACnB,CAAS,CAAC;IACF,IAAI8B,kBAAkB,EAAE;MACpBA,kBAAkB,CAAC;QACfV,MAAM,EAAE,IAAI,CAAChB,aAAa,EAAE,CAACgB,MAAM;QACnCW,gBAAgB,EAAErC;MAClC,CAAa,CAAC;IACd;EACA,CAAK;EACDb,gBAAgB,CAACW,SAAS,CAACkC,WAAW,GAAG,UAAU3B,KAAK,EAAE;IACtD,IAAI,CAAC8B,YAAY,CAAC;MACd9B,KAAK,EAAEA,KAAK;MACZD,OAAO,EAAE;IACrB,CAAS,CAAC;EACV,CAAK;EACDjB,gBAAgB,CAACW,SAAS,CAACoC,oBAAoB,GAAG,YAAY;IAC1D,IAAII,sBAAsB,GAAG,IAAI,CAACrC,UAAU,EAAE,CAACqC,sBAAsB;IACrE,IAAIA,sBAAsB,EACtBA,sBAAsB,EAAE;IAC5B,IAAI,CAACd,eAAe,EAAE;EAC9B,CAAK;EACDrC,gBAAgB,CAACW,SAAS,CAAC0B,eAAe,GAAG,YAAY;IACrD,IAAI,IAAI,CAAC5B,iBAAiB,CAACsB,YAAY,EAAE;MACrC,IAAI,CAACtB,iBAAiB,CAACsB,YAAY,CAACqB,WAAW,EAAE;MACjD,OAAO,IAAI,CAAC3C,iBAAiB,CAACsB,YAAY;IACtD;EACA,CAAK;EACD,OAAO/B,gBAAgB;AAC3B,CAAC,CAACqD,aAAa,CAAC","names":["SubscriptionData","_super","__extends","_a","options","context","setResult","_this","call","currentObservable","initialize","prototype","execute","result","getOptions","skip","cleanup","loading","error","undefined","data","variables","currentResult","refreshClient","isNew","getLoadingResult","shouldResubscribe","previousOptions","Object","keys","length","subscription","equal","startSubscription","__assign","afterExecute","isMounted","endSubscription","query","client","subscribe","fetchPolicy","next","updateCurrentData","bind","updateError","complete","completeSubscription","updateResult","onSubscriptionData","subscriptionData","onSubscriptionComplete","unsubscribe","OperationData"],"sources":["SubscriptionData.js"],"sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport { equal } from '@wry/equality';\nimport { OperationData } from './OperationData';\nvar SubscriptionData = (function (_super) {\n    __extends(SubscriptionData, _super);\n    function SubscriptionData(_a) {\n        var options = _a.options, context = _a.context, setResult = _a.setResult;\n        var _this = _super.call(this, options, context) || this;\n        _this.currentObservable = {};\n        _this.setResult = setResult;\n        _this.initialize(options);\n        return _this;\n    }\n    SubscriptionData.prototype.execute = function (result) {\n        if (this.getOptions().skip === true) {\n            this.cleanup();\n            return {\n                loading: false,\n                error: undefined,\n                data: undefined,\n                variables: this.getOptions().variables\n            };\n        }\n        var currentResult = result;\n        if (this.refreshClient().isNew) {\n            currentResult = this.getLoadingResult();\n        }\n        var shouldResubscribe = this.getOptions().shouldResubscribe;\n        if (typeof shouldResubscribe === 'function') {\n            shouldResubscribe = !!shouldResubscribe(this.getOptions());\n        }\n        if (shouldResubscribe !== false &&\n            this.previousOptions &&\n            Object.keys(this.previousOptions).length > 0 &&\n            (this.previousOptions.subscription !== this.getOptions().subscription ||\n                !equal(this.previousOptions.variables, this.getOptions().variables) ||\n                this.previousOptions.skip !== this.getOptions().skip)) {\n            this.cleanup();\n            currentResult = this.getLoadingResult();\n        }\n        this.initialize(this.getOptions());\n        this.startSubscription();\n        this.previousOptions = this.getOptions();\n        return __assign(__assign({}, currentResult), { variables: this.getOptions().variables });\n    };\n    SubscriptionData.prototype.afterExecute = function () {\n        this.isMounted = true;\n    };\n    SubscriptionData.prototype.cleanup = function () {\n        this.endSubscription();\n        delete this.currentObservable.query;\n    };\n    SubscriptionData.prototype.initialize = function (options) {\n        if (this.currentObservable.query || this.getOptions().skip === true)\n            return;\n        this.currentObservable.query = this.refreshClient().client.subscribe({\n            query: options.subscription,\n            variables: options.variables,\n            fetchPolicy: options.fetchPolicy\n        });\n    };\n    SubscriptionData.prototype.startSubscription = function () {\n        if (this.currentObservable.subscription)\n            return;\n        this.currentObservable.subscription = this.currentObservable.query.subscribe({\n            next: this.updateCurrentData.bind(this),\n            error: this.updateError.bind(this),\n            complete: this.completeSubscription.bind(this)\n        });\n    };\n    SubscriptionData.prototype.getLoadingResult = function () {\n        return {\n            loading: true,\n            error: undefined,\n            data: undefined\n        };\n    };\n    SubscriptionData.prototype.updateResult = function (result) {\n        if (this.isMounted) {\n            this.setResult(result);\n        }\n    };\n    SubscriptionData.prototype.updateCurrentData = function (result) {\n        var onSubscriptionData = this.getOptions().onSubscriptionData;\n        this.updateResult({\n            data: result.data,\n            loading: false,\n            error: undefined\n        });\n        if (onSubscriptionData) {\n            onSubscriptionData({\n                client: this.refreshClient().client,\n                subscriptionData: result\n            });\n        }\n    };\n    SubscriptionData.prototype.updateError = function (error) {\n        this.updateResult({\n            error: error,\n            loading: false\n        });\n    };\n    SubscriptionData.prototype.completeSubscription = function () {\n        var onSubscriptionComplete = this.getOptions().onSubscriptionComplete;\n        if (onSubscriptionComplete)\n            onSubscriptionComplete();\n        this.endSubscription();\n    };\n    SubscriptionData.prototype.endSubscription = function () {\n        if (this.currentObservable.subscription) {\n            this.currentObservable.subscription.unsubscribe();\n            delete this.currentObservable.subscription;\n        }\n    };\n    return SubscriptionData;\n}(OperationData));\nexport { SubscriptionData };\n//# sourceMappingURL=SubscriptionData.js.map"]},"metadata":{},"sourceType":"module"}