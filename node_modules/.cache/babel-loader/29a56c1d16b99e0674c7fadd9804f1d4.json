{"ast":null,"code":"import { invariant } from 'ts-invariant';\nimport { visit } from 'graphql/language/visitor';\nfunction shouldInclude(_a, variables) {\n  var directives = _a.directives;\n  if (!directives || !directives.length) {\n    return true;\n  }\n  return getInclusionDirectives(directives).every(function (_a) {\n    var directive = _a.directive,\n      ifArgument = _a.ifArgument;\n    var evaledValue = false;\n    if (ifArgument.value.kind === 'Variable') {\n      evaledValue = variables && variables[ifArgument.value.name.value];\n      process.env.NODE_ENV === \"production\" ? invariant(evaledValue !== void 0, 37) : invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directive.name.value + \" directive.\");\n    } else {\n      evaledValue = ifArgument.value.value;\n    }\n    return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n  });\n}\nfunction getDirectiveNames(root) {\n  var names = [];\n  visit(root, {\n    Directive: function (node) {\n      names.push(node.name.value);\n    }\n  });\n  return names;\n}\nfunction hasDirectives(names, root) {\n  return getDirectiveNames(root).some(function (name) {\n    return names.indexOf(name) > -1;\n  });\n}\nfunction hasClientExports(document) {\n  return document && hasDirectives(['client'], document) && hasDirectives(['export'], document);\n}\nfunction isInclusionDirective(_a) {\n  var value = _a.name.value;\n  return value === 'skip' || value === 'include';\n}\nfunction getInclusionDirectives(directives) {\n  var result = [];\n  if (directives && directives.length) {\n    directives.forEach(function (directive) {\n      if (!isInclusionDirective(directive)) return;\n      var directiveArguments = directive.arguments;\n      var directiveName = directive.name.value;\n      process.env.NODE_ENV === \"production\" ? invariant(directiveArguments && directiveArguments.length === 1, 38) : invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n      var ifArgument = directiveArguments[0];\n      process.env.NODE_ENV === \"production\" ? invariant(ifArgument.name && ifArgument.name.value === 'if', 39) : invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\");\n      var ifValue = ifArgument.value;\n      process.env.NODE_ENV === \"production\" ? invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 40) : invariant(ifValue && (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n      result.push({\n        directive: directive,\n        ifArgument: ifArgument\n      });\n    });\n  }\n  return result;\n}\nexport { getDirectiveNames, getInclusionDirectives, hasClientExports, hasDirectives, shouldInclude };","map":{"version":3,"mappings":"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","names":["shouldInclude","_a","variables","directives","length","getInclusionDirectives","every","directive","ifArgument","evaledValue","value","kind","name","process","env","NODE_ENV","invariant","getDirectiveNames","root","names","visit","Directive","node","push","hasDirectives","some","indexOf","hasClientExports","document","isInclusionDirective","result","forEach","directiveArguments","arguments","directiveName","ifValue"],"sources":["directives.js"],"sourcesContent":["import { visit } from 'graphql/language/visitor';\nimport { invariant } from 'ts-invariant';\nexport function shouldInclude(_a, variables) {\n    var directives = _a.directives;\n    if (!directives || !directives.length) {\n        return true;\n    }\n    return getInclusionDirectives(directives).every(function (_a) {\n        var directive = _a.directive, ifArgument = _a.ifArgument;\n        var evaledValue = false;\n        if (ifArgument.value.kind === 'Variable') {\n            evaledValue = variables && variables[ifArgument.value.name.value];\n            invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directive.name.value + \" directive.\");\n        }\n        else {\n            evaledValue = ifArgument.value.value;\n        }\n        return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n    });\n}\nexport function getDirectiveNames(root) {\n    var names = [];\n    visit(root, {\n        Directive: function (node) {\n            names.push(node.name.value);\n        },\n    });\n    return names;\n}\nexport function hasDirectives(names, root) {\n    return getDirectiveNames(root).some(function (name) { return names.indexOf(name) > -1; });\n}\nexport function hasClientExports(document) {\n    return (document &&\n        hasDirectives(['client'], document) &&\n        hasDirectives(['export'], document));\n}\nfunction isInclusionDirective(_a) {\n    var value = _a.name.value;\n    return value === 'skip' || value === 'include';\n}\nexport function getInclusionDirectives(directives) {\n    var result = [];\n    if (directives && directives.length) {\n        directives.forEach(function (directive) {\n            if (!isInclusionDirective(directive))\n                return;\n            var directiveArguments = directive.arguments;\n            var directiveName = directive.name.value;\n            invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n            var ifArgument = directiveArguments[0];\n            invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\");\n            var ifValue = ifArgument.value;\n            invariant(ifValue &&\n                (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n            result.push({ directive: directive, ifArgument: ifArgument });\n        });\n    }\n    return result;\n}\n//# sourceMappingURL=directives.js.map"]},"metadata":{},"sourceType":"module"}