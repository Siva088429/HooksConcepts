{"ast":null,"code":"import { Slot } from '@wry/context';\nexport { asyncFromGen, bind as bindContext, noContext, setTimeout } from '@wry/context';\nfunction defaultDispose() {}\nvar Cache = /** @class */function () {\n  function Cache(max, dispose) {\n    if (max === void 0) {\n      max = Infinity;\n    }\n    if (dispose === void 0) {\n      dispose = defaultDispose;\n    }\n    this.max = max;\n    this.dispose = dispose;\n    this.map = new Map();\n    this.newest = null;\n    this.oldest = null;\n  }\n  Cache.prototype.has = function (key) {\n    return this.map.has(key);\n  };\n  Cache.prototype.get = function (key) {\n    var entry = this.getEntry(key);\n    return entry && entry.value;\n  };\n  Cache.prototype.getEntry = function (key) {\n    var entry = this.map.get(key);\n    if (entry && entry !== this.newest) {\n      var older = entry.older,\n        newer = entry.newer;\n      if (newer) {\n        newer.older = older;\n      }\n      if (older) {\n        older.newer = newer;\n      }\n      entry.older = this.newest;\n      entry.older.newer = entry;\n      entry.newer = null;\n      this.newest = entry;\n      if (entry === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n    return entry;\n  };\n  Cache.prototype.set = function (key, value) {\n    var entry = this.getEntry(key);\n    if (entry) {\n      return entry.value = value;\n    }\n    entry = {\n      key: key,\n      value: value,\n      newer: null,\n      older: this.newest\n    };\n    if (this.newest) {\n      this.newest.newer = entry;\n    }\n    this.newest = entry;\n    this.oldest = this.oldest || entry;\n    this.map.set(key, entry);\n    return entry.value;\n  };\n  Cache.prototype.clean = function () {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  };\n  Cache.prototype.delete = function (key) {\n    var entry = this.map.get(key);\n    if (entry) {\n      if (entry === this.newest) {\n        this.newest = entry.older;\n      }\n      if (entry === this.oldest) {\n        this.oldest = entry.newer;\n      }\n      if (entry.newer) {\n        entry.newer.older = entry.older;\n      }\n      if (entry.older) {\n        entry.older.newer = entry.newer;\n      }\n      this.map.delete(key);\n      this.dispose(entry.value, key);\n      return true;\n    }\n    return false;\n  };\n  return Cache;\n}();\nvar parentEntrySlot = new Slot();\nfunction maybeUnsubscribe(entryOrDep) {\n  var unsubscribe = entryOrDep.unsubscribe;\n  if (typeof unsubscribe === \"function\") {\n    entryOrDep.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\nvar emptySetPool = [];\nvar POOL_TARGET_SIZE = 100;\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition, optionalMessage) {\n  if (!condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\nfunction valueIs(a, b) {\n  var len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\nfunction valueGet(value) {\n  switch (value.length) {\n    case 0:\n      throw new Error(\"unknown value\");\n    case 1:\n      return value[0];\n    case 2:\n      throw value[1];\n  }\n}\nfunction valueCopy(value) {\n  return value.slice(0);\n}\nvar Entry = /** @class */function () {\n  function Entry(fn, args) {\n    this.fn = fn;\n    this.args = args;\n    this.parents = new Set();\n    this.childValues = new Map();\n    // When this Entry has children that are dirty, this property becomes\n    // a Set containing other Entry objects, borrowed from emptySetPool.\n    // When the set becomes empty, it gets recycled back to emptySetPool.\n    this.dirtyChildren = null;\n    this.dirty = true;\n    this.recomputing = false;\n    this.value = [];\n    this.deps = null;\n    ++Entry.count;\n  }\n  Entry.prototype.peek = function () {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      return this.value[0];\n    }\n  };\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  Entry.prototype.recompute = function () {\n    assert(!this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this) ? reallyRecompute(this) : valueGet(this.value);\n  };\n  Entry.prototype.setDirty = function () {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this);\n    forgetChildren(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  };\n  Entry.prototype.dispose = function () {\n    var _this = this;\n    forgetChildren(this);\n    maybeUnsubscribe(this);\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    this.parents.forEach(function (parent) {\n      parent.setDirty();\n      forgetChild(parent, _this);\n    });\n  };\n  Entry.prototype.dependOn = function (dep) {\n    dep.add(this);\n    if (!this.deps) {\n      this.deps = emptySetPool.pop() || new Set();\n    }\n    this.deps.add(dep);\n  };\n  Entry.prototype.forgetDeps = function () {\n    var _this = this;\n    if (this.deps) {\n      this.deps.forEach(function (dep) {\n        return dep.delete(_this);\n      });\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  };\n  Entry.count = 0;\n  return Entry;\n}();\nfunction rememberParent(child) {\n  var parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n    if (!parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n    return parent;\n  }\n}\nfunction reallyRecompute(entry) {\n  forgetChildren(entry);\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry]);\n  if (maybeSubscribe(entry)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n  return valueGet(entry.value);\n}\nfunction recomputeNewValue(entry) {\n  entry.recomputing = true;\n  // Set entry.value as unknown.\n  entry.value.length = 0;\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, entry.args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  }\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\nfunction mightBeDirty(entry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\nfunction setClean(entry) {\n  entry.dirty = false;\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n  reportClean(entry);\n}\nfunction reportDirty(child) {\n  child.parents.forEach(function (parent) {\n    return reportDirtyChild(parent, child);\n  });\n}\nfunction reportClean(child) {\n  child.parents.forEach(function (parent) {\n    return reportCleanChild(parent, child);\n  });\n}\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent, child) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n  if (!parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set();\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n  parent.dirtyChildren.add(child);\n  reportDirty(parent);\n}\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent, child) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(!mightBeDirty(child));\n  var childValue = parent.childValues.get(child);\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (!valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n  removeDirtyChild(parent, child);\n  if (mightBeDirty(parent)) {\n    return;\n  }\n  reportClean(parent);\n}\nfunction removeDirtyChild(parent, child) {\n  var dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach(function (_value, child) {\n      forgetChild(parent, child);\n    });\n  }\n  // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n  parent.forgetDeps();\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n}\nfunction forgetChild(parent, child) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\nfunction maybeSubscribe(entry) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, entry.args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}\n\n// A trie data structure that holds object keys weakly, yet can also hold\n// non-object keys, unlike the native `WeakMap`.\n// If no makeData function is supplied, the looked-up data will be an empty,\n// no-prototype Object.\nvar defaultMakeData = function () {\n  return Object.create(null);\n};\n// Useful for processing arguments objects as well as arrays.\nvar _a = Array.prototype,\n  forEach = _a.forEach,\n  slice = _a.slice;\nvar KeyTrie = /** @class */function () {\n  function KeyTrie(weakness, makeData) {\n    if (makeData === void 0) {\n      makeData = defaultMakeData;\n    }\n    this.weakness = weakness;\n    this.makeData = makeData;\n  }\n  KeyTrie.prototype.lookup = function () {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      array[_i] = arguments[_i];\n    }\n    return this.lookupArray(array);\n  };\n  KeyTrie.prototype.lookupArray = function (array) {\n    var node = this;\n    forEach.call(array, function (key) {\n      return node = node.getChildTrie(key);\n    });\n    return node.data || (node.data = this.makeData(slice.call(array)));\n  };\n  KeyTrie.prototype.getChildTrie = function (key) {\n    var map = this.weakness && isObjRef(key) ? this.weak || (this.weak = new WeakMap()) : this.strong || (this.strong = new Map());\n    var child = map.get(key);\n    if (!child) map.set(key, child = new KeyTrie(this.weakness, this.makeData));\n    return child;\n  };\n  return KeyTrie;\n}();\nfunction isObjRef(value) {\n  switch (typeof value) {\n    case \"object\":\n      if (value === null) break;\n    // Fall through to return true...\n    case \"function\":\n      return true;\n  }\n  return false;\n}\nfunction dep(options) {\n  var depsByKey = new Map();\n  var subscribe = options && options.subscribe;\n  function depend(key) {\n    var parent = parentEntrySlot.getValue();\n    if (parent) {\n      var dep_1 = depsByKey.get(key);\n      if (!dep_1) {\n        depsByKey.set(key, dep_1 = new Set());\n      }\n      parent.dependOn(dep_1);\n      if (typeof subscribe === \"function\") {\n        maybeUnsubscribe(dep_1);\n        dep_1.unsubscribe = subscribe(key);\n      }\n    }\n  }\n  depend.dirty = function dirty(key) {\n    var dep = depsByKey.get(key);\n    if (dep) {\n      dep.forEach(function (entry) {\n        return entry.setDirty();\n      });\n      depsByKey.delete(key);\n      maybeUnsubscribe(dep);\n    }\n  };\n  return depend;\n}\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nvar keyTrie = new KeyTrie(typeof WeakMap === \"function\");\nfunction defaultMakeCacheKey() {\n  var args = [];\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n  return keyTrie.lookupArray(args);\n}\nvar caches = new Set();\nfunction wrap(originalFunction, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n  var cache = new Cache(options.max || Math.pow(2, 16), function (entry) {\n    return entry.dispose();\n  });\n  var keyArgs = options.keyArgs || function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    return args;\n  };\n  var makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;\n  function optimistic() {\n    var key = makeCacheKey.apply(null, keyArgs.apply(null, arguments));\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments);\n    }\n    var args = Array.prototype.slice.call(arguments);\n    var entry = cache.get(key);\n    if (entry) {\n      entry.args = args;\n    } else {\n      entry = new Entry(originalFunction, args);\n      cache.set(key, entry);\n      entry.subscribe = options.subscribe;\n    }\n    var value = entry.recompute();\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n    caches.add(cache);\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (!parentEntrySlot.hasValue()) {\n      caches.forEach(function (cache) {\n        return cache.clean();\n      });\n      caches.clear();\n    }\n    return value;\n  }\n  function lookup() {\n    var key = makeCacheKey.apply(null, arguments);\n    if (key !== void 0) {\n      return cache.get(key);\n    }\n  }\n  optimistic.dirty = function () {\n    var entry = lookup.apply(null, arguments);\n    if (entry) {\n      entry.setDirty();\n    }\n  };\n  optimistic.peek = function () {\n    var entry = lookup.apply(null, arguments);\n    if (entry) {\n      return entry.peek();\n    }\n  };\n  return optimistic;\n}\nexport { KeyTrie, defaultMakeCacheKey, dep, wrap };","map":{"version":3,"mappings":"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","names":["defaultDispose","max","dispose","Map","Cache","key","map","has","entry","getEntry","value","get","newest","newer","older","oldest","set","size","delete","parentEntrySlot","Slot","maybeUnsubscribe","entryOrDep","unsubscribe","emptySetPool","POOL_TARGET_SIZE","assert","condition","optionalMessage","Error","valueIs","a","b","len","length","valueGet","valueCopy","slice","fn","args","Set","Entry","count","mightBeDirty","recomputing","rememberParent","reallyRecompute","dirty","reportDirty","forgetChildren","parents","forEach","parent","setDirty","forgetChild","_this","dep","add","deps","pop","clear","push","child","getValue","childValues","reportDirtyChild","reportCleanChild","withValue","recomputeNewValue","maybeSubscribe","setClean","apply","e","dirtyChildren","reportClean","childValue","removeDirtyChild","dc","_value","forgetDeps","subscribe","defaultMakeData","create","Array","prototype","weakness","makeData","KeyTrie","_i","array","lookupArray","node","call","getChildTrie","data","isObjRef","weak","WeakMap","strong","options","depsByKey","depend","dep_1","dependOn","keyTrie","defaultMakeCacheKey","caches","wrap","originalFunction","Object","cache","Math","pow","keyArgs","makeCacheKey","optimistic","arguments","recompute","hasValue","clean","lookup","peek"],"sources":["../src/cache.ts","../src/context.ts","../src/helpers.ts","../src/entry.ts","../src/key-trie.ts","../src/dep.ts","../src/index.ts"],"sourcesContent":["interface Node<K, V> {\n  key: K;\n  value: V;\n  newer: Node<K, V> | null;\n  older: Node<K, V> | null;\n}\n\nfunction defaultDispose() {}\n\nexport class Cache<K = any, V = any> {\n  private map = new Map<K, Node<K, V>>();\n  private newest: Node<K, V> | null = null;\n  private oldest: Node<K, V> | null = null;\n\n  constructor(\n    private max = Infinity,\n    public dispose: (value: V, key: K) => void = defaultDispose,\n  ) {}\n\n  public has(key: K) {\n    return this.map.has(key);\n  }\n\n  public get(key: K) {\n    const entry = this.getEntry(key);\n    return entry && entry.value;\n  }\n\n  private getEntry(key: K): Node<K, V> | void {\n    const entry = this.map.get(key);\n\n    if (entry && entry !== this.newest) {\n      const { older, newer } = entry;\n\n      if (newer) {\n        newer.older = older;\n      }\n\n      if (older) {\n        older.newer = newer;\n      }\n\n      entry.older = this.newest;\n      entry.older!.newer = entry;\n\n      entry.newer = null;\n      this.newest = entry;\n\n      if (entry === this.oldest) {\n        this.oldest = newer;\n      }\n    }\n\n    return entry;\n  }\n\n  public set(key: K, value: V) {\n    let entry = this.getEntry(key);\n    if (entry) {\n      return entry.value = value;\n    }\n\n    entry = {\n      key: key,\n      value: value,\n      newer: null,\n      older: this.newest\n    };\n\n    if (this.newest) {\n      this.newest.newer = entry;\n    }\n\n    this.newest = entry;\n    this.oldest = this.oldest || entry;\n\n    this.map.set(key, entry);\n\n    return entry.value;\n  }\n\n  public clean() {\n    while (this.oldest && this.map.size > this.max) {\n      this.delete(this.oldest.key);\n    }\n  }\n\n  public delete(key: K) {\n    const entry = this.map.get(key);\n    if (entry) {\n      if (entry === this.newest) {\n        this.newest = entry.older;\n      }\n\n      if (entry === this.oldest) {\n        this.oldest = entry.newer;\n      }\n\n      if (entry.newer) {\n        entry.newer.older = entry.older;\n      }\n\n      if (entry.older) {\n        entry.older.newer = entry.newer;\n      }\n\n      this.map.delete(key);\n      this.dispose(entry.value, key);\n\n      return true;\n    }\n\n    return false;\n  }\n}\n","import { AnyEntry } from \"./entry\";\nimport { Slot } from \"@wry/context\";\n\nexport const parentEntrySlot = new Slot<AnyEntry>();\n\nexport {\n  bind as bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"@wry/context\";\n","export type Unsubscribable = {\n  unsubscribe?: void | (() => any);\n}\n\nexport function maybeUnsubscribe(entryOrDep: Unsubscribable) {\n  const { unsubscribe } = entryOrDep;\n  if (typeof unsubscribe === \"function\") {\n    entryOrDep.unsubscribe = void 0;\n    unsubscribe();\n  }\n}\n","import { parentEntrySlot } from \"./context\";\nimport { OptimisticWrapOptions } from \"./index\";\nimport { Dep } from \"./dep\";\nimport { maybeUnsubscribe, Unsubscribable } from \"./helpers\";\n\nconst emptySetPool: Set<any>[] = [];\nconst POOL_TARGET_SIZE = 100;\n\n// Since this package might be used browsers, we should avoid using the\n// Node built-in assert module.\nfunction assert(condition: any, optionalMessage?: string) {\n  if (! condition) {\n    throw new Error(optionalMessage || \"assertion failure\");\n  }\n}\n\n// Since exceptions are cached just like normal values, we need an efficient\n// way of representing unknown, ordinary, and exceptional values.\ntype Value<T> =\n  | []           // unknown\n  | [T]          // known value\n  | [void, any]; // known exception\n\nfunction valueIs(a: Value<any>, b: Value<any>) {\n  const len = a.length;\n  return (\n    // Unknown values are not equal to each other.\n    len > 0 &&\n    // Both values must be ordinary (or both exceptional) to be equal.\n    len === b.length &&\n    // The underlying value or exception must be the same.\n    a[len - 1] === b[len - 1]\n  );\n}\n\nfunction valueGet<T>(value: Value<T>): T {\n  switch (value.length) {\n    case 0: throw new Error(\"unknown value\");\n    case 1: return value[0];\n    case 2: throw value[1];\n  }\n}\n\nfunction valueCopy<T>(value: Value<T>): Value<T> {\n  return value.slice(0) as Value<T>;\n}\n\nexport type AnyEntry = Entry<any, any>;\n\nexport class Entry<TArgs extends any[], TValue> {\n  public static count = 0;\n\n  public subscribe: OptimisticWrapOptions<TArgs>[\"subscribe\"];\n  public unsubscribe: Unsubscribable[\"unsubscribe\"];\n\n  public readonly parents = new Set<AnyEntry>();\n  public readonly childValues = new Map<AnyEntry, Value<any>>();\n\n  // When this Entry has children that are dirty, this property becomes\n  // a Set containing other Entry objects, borrowed from emptySetPool.\n  // When the set becomes empty, it gets recycled back to emptySetPool.\n  public dirtyChildren: Set<AnyEntry> | null = null;\n\n  public dirty = true;\n  public recomputing = false;\n  public readonly value: Value<TValue> = [];\n\n  constructor(\n    public readonly fn: (...args: TArgs) => TValue,\n    public args: TArgs,\n  ) {\n    ++Entry.count;\n  }\n\n  public peek(): TValue | undefined {\n    if (this.value.length === 1 && !mightBeDirty(this)) {\n      return this.value[0];\n    }\n  }\n\n  // This is the most important method of the Entry API, because it\n  // determines whether the cached this.value can be returned immediately,\n  // or must be recomputed. The overall performance of the caching system\n  // depends on the truth of the following observations: (1) this.dirty is\n  // usually false, (2) this.dirtyChildren is usually null/empty, and thus\n  // (3) valueGet(this.value) is usually returned without recomputation.\n  public recompute(): TValue {\n    assert(! this.recomputing, \"already recomputing\");\n    rememberParent(this);\n    return mightBeDirty(this)\n      ? reallyRecompute(this)\n      : valueGet(this.value);\n  }\n\n  public setDirty() {\n    if (this.dirty) return;\n    this.dirty = true;\n    this.value.length = 0;\n    reportDirty(this);\n    forgetChildren(this);\n    // We can go ahead and unsubscribe here, since any further dirty\n    // notifications we receive will be redundant, and unsubscribing may\n    // free up some resources, e.g. file watchers.\n    maybeUnsubscribe(this);\n  }\n\n  public dispose() {\n    forgetChildren(this);\n    maybeUnsubscribe(this);\n\n    // Because this entry has been kicked out of the cache (in index.js),\n    // we've lost the ability to find out if/when this entry becomes dirty,\n    // whether that happens through a subscription, because of a direct call\n    // to entry.setDirty(), or because one of its children becomes dirty.\n    // Because of this loss of future information, we have to assume the\n    // worst (that this entry might have become dirty very soon), so we must\n    // immediately mark this entry's parents as dirty. Normally we could\n    // just call entry.setDirty() rather than calling parent.setDirty() for\n    // each parent, but that would leave this entry in parent.childValues\n    // and parent.dirtyChildren, which would prevent the child from being\n    // truly forgotten.\n    this.parents.forEach(parent => {\n      parent.setDirty();\n      forgetChild(parent, this);\n    });\n  }\n\n  private deps: Set<Dep<any>> | null = null;\n\n  public dependOn(dep: Dep<any>) {\n    dep.add(this);\n    if (! this.deps) {\n      this.deps = emptySetPool.pop() || new Set<Set<AnyEntry>>();\n    }\n    this.deps.add(dep);\n  }\n\n  public forgetDeps() {\n    if (this.deps) {\n      this.deps.forEach(dep => dep.delete(this));\n      this.deps.clear();\n      emptySetPool.push(this.deps);\n      this.deps = null;\n    }\n  }\n}\n\nfunction rememberParent(child: AnyEntry) {\n  const parent = parentEntrySlot.getValue();\n  if (parent) {\n    child.parents.add(parent);\n\n    if (! parent.childValues.has(child)) {\n      parent.childValues.set(child, []);\n    }\n\n    if (mightBeDirty(child)) {\n      reportDirtyChild(parent, child);\n    } else {\n      reportCleanChild(parent, child);\n    }\n\n    return parent;\n  }\n}\n\nfunction reallyRecompute(entry: AnyEntry) {\n  forgetChildren(entry);\n\n  // Set entry as the parent entry while calling recomputeNewValue(entry).\n  parentEntrySlot.withValue(entry, recomputeNewValue, [entry]);\n\n  if (maybeSubscribe(entry)) {\n    // If we successfully recomputed entry.value and did not fail to\n    // (re)subscribe, then this Entry is no longer explicitly dirty.\n    setClean(entry);\n  }\n\n  return valueGet(entry.value);\n}\n\nfunction recomputeNewValue(entry: AnyEntry) {\n  entry.recomputing = true;\n  // Set entry.value as unknown.\n  entry.value.length = 0;\n  try {\n    // If entry.fn succeeds, entry.value will become a normal Value.\n    entry.value[0] = entry.fn.apply(null, entry.args);\n  } catch (e) {\n    // If entry.fn throws, entry.value will become exceptional.\n    entry.value[1] = e;\n  }\n  // Either way, this line is always reached.\n  entry.recomputing = false;\n}\n\nfunction mightBeDirty(entry: AnyEntry) {\n  return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\n}\n\nfunction setClean(entry: AnyEntry) {\n  entry.dirty = false;\n\n  if (mightBeDirty(entry)) {\n    // This Entry may still have dirty children, in which case we can't\n    // let our parents know we're clean just yet.\n    return;\n  }\n\n  reportClean(entry);\n}\n\nfunction reportDirty(child: AnyEntry) {\n  child.parents.forEach(parent => reportDirtyChild(parent, child));\n}\n\nfunction reportClean(child: AnyEntry) {\n  child.parents.forEach(parent => reportCleanChild(parent, child));\n}\n\n// Let a parent Entry know that one of its children may be dirty.\nfunction reportDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberParent(child) before calling\n  // reportDirtyChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(mightBeDirty(child));\n\n  if (! parent.dirtyChildren) {\n    parent.dirtyChildren = emptySetPool.pop() || new Set;\n\n  } else if (parent.dirtyChildren.has(child)) {\n    // If we already know this child is dirty, then we must have already\n    // informed our own parents that we are dirty, so we can terminate\n    // the recursion early.\n    return;\n  }\n\n  parent.dirtyChildren.add(child);\n  reportDirty(parent);\n}\n\n// Let a parent Entry know that one of its children is no longer dirty.\nfunction reportCleanChild(parent: AnyEntry, child: AnyEntry) {\n  // Must have called rememberChild(child) before calling\n  // reportCleanChild(parent, child).\n  assert(parent.childValues.has(child));\n  assert(! mightBeDirty(child));\n\n  const childValue = parent.childValues.get(child)!;\n  if (childValue.length === 0) {\n    parent.childValues.set(child, valueCopy(child.value));\n  } else if (! valueIs(childValue, child.value)) {\n    parent.setDirty();\n  }\n\n  removeDirtyChild(parent, child);\n\n  if (mightBeDirty(parent)) {\n    return;\n  }\n\n  reportClean(parent);\n}\n\nfunction removeDirtyChild(parent: AnyEntry, child: AnyEntry) {\n  const dc = parent.dirtyChildren;\n  if (dc) {\n    dc.delete(child);\n    if (dc.size === 0) {\n      if (emptySetPool.length < POOL_TARGET_SIZE) {\n        emptySetPool.push(dc);\n      }\n      parent.dirtyChildren = null;\n    }\n  }\n}\n\n// Removes all children from this entry and returns an array of the\n// removed children.\nfunction forgetChildren(parent: AnyEntry) {\n  if (parent.childValues.size > 0) {\n    parent.childValues.forEach((_value, child) => {\n      forgetChild(parent, child);\n    });\n  }\n\n  // Remove this parent Entry from any sets to which it was added by the\n  // addToSet method.\n  parent.forgetDeps();\n\n  // After we forget all our children, this.dirtyChildren must be empty\n  // and therefore must have been reset to null.\n  assert(parent.dirtyChildren === null);\n}\n\nfunction forgetChild(parent: AnyEntry, child: AnyEntry) {\n  child.parents.delete(parent);\n  parent.childValues.delete(child);\n  removeDirtyChild(parent, child);\n}\n\nfunction maybeSubscribe(entry: AnyEntry) {\n  if (typeof entry.subscribe === \"function\") {\n    try {\n      maybeUnsubscribe(entry); // Prevent double subscriptions.\n      entry.unsubscribe = entry.subscribe.apply(null, entry.args);\n    } catch (e) {\n      // If this Entry has a subscribe function and it threw an exception\n      // (or an unsubscribe function it previously returned now throws),\n      // return false to indicate that we were not able to subscribe (or\n      // unsubscribe), and this Entry should remain dirty.\n      entry.setDirty();\n      return false;\n    }\n  }\n\n  // Returning true indicates either that there was no entry.subscribe\n  // function or that it succeeded.\n  return true;\n}\n","// A trie data structure that holds object keys weakly, yet can also hold\n// non-object keys, unlike the native `WeakMap`.\n\n// If no makeData function is supplied, the looked-up data will be an empty,\n// no-prototype Object.\nconst defaultMakeData = () => Object.create(null);\n\n// Useful for processing arguments objects as well as arrays.\nconst { forEach, slice } = Array.prototype;\n\nexport class KeyTrie<K> {\n  // Since a `WeakMap` cannot hold primitive values as keys, we need a\n  // backup `Map` instance to hold primitive keys. Both `this._weakMap`\n  // and `this._strongMap` are lazily initialized.\n  private weak?: WeakMap<any, KeyTrie<K>>;\n  private strong?: Map<any, KeyTrie<K>>;\n  private data?: K;\n\n  constructor(\n    private weakness: boolean,\n    private makeData: (array: any[]) => K = defaultMakeData,\n  ) {}\n\n  public lookup<T extends any[]>(...array: T): K {\n    return this.lookupArray(array);\n  }\n\n  public lookupArray<T extends IArguments | any[]>(array: T): K {\n    let node: KeyTrie<K> = this;\n    forEach.call(array, key => node = node.getChildTrie(key));\n    return node.data || (node.data = this.makeData(slice.call(array)));\n  }\n\n  private getChildTrie(key: any) {\n    const map = this.weakness && isObjRef(key)\n      ? this.weak || (this.weak = new WeakMap<any, KeyTrie<K>>())\n      : this.strong || (this.strong = new Map<any, KeyTrie<K>>());\n    let child = map.get(key);\n    if (!child) map.set(key, child = new KeyTrie<K>(this.weakness, this.makeData));\n    return child;\n  }\n}\n\nfunction isObjRef(value: any) {\n  switch (typeof value) {\n  case \"object\":\n    if (value === null) break;\n    // Fall through to return true...\n  case \"function\":\n    return true;\n  }\n  return false;\n}\n","import { AnyEntry } from \"./entry\";\nimport { OptimisticWrapOptions } from \"./index\";\nimport { parentEntrySlot } from \"./context\";\nimport { Unsubscribable, maybeUnsubscribe } from \"./helpers\";\n\nexport type OptimisticDependencyFunction<TKey> =\n  ((key: TKey) => void) & {\n    dirty: (key: TKey) => void;\n  };\n\nexport type Dep<TKey> = Set<AnyEntry> & {\n  subscribe: OptimisticWrapOptions<[TKey]>[\"subscribe\"];\n} & Unsubscribable;\n\nexport function dep<TKey>(options?: {\n  subscribe: Dep<TKey>[\"subscribe\"];\n}) {\n  const depsByKey = new Map<TKey, Dep<TKey>>();\n  const subscribe = options && options.subscribe;\n\n  function depend(key: TKey) {\n    const parent = parentEntrySlot.getValue();\n    if (parent) {\n      let dep = depsByKey.get(key);\n      if (!dep) {\n        depsByKey.set(key, dep = new Set as Dep<TKey>);\n      }\n      parent.dependOn(dep);\n      if (typeof subscribe === \"function\") {\n        maybeUnsubscribe(dep);\n        dep.unsubscribe = subscribe(key);\n      }\n    }\n  }\n\n  depend.dirty = function dirty(key: TKey) {\n    const dep = depsByKey.get(key);\n    if (dep) {\n      dep.forEach(entry => entry.setDirty());\n      depsByKey.delete(key);\n      maybeUnsubscribe(dep);\n    }\n  };\n\n  return depend as OptimisticDependencyFunction<TKey>;\n}\n","import { Cache } from \"./cache\";\nimport { Entry, AnyEntry } from \"./entry\";\nimport { parentEntrySlot } from \"./context\";\nimport { KeyTrie } from \"./key-trie\";\n\n// These helper functions are important for making optimism work with\n// asynchronous code. In order to register parent-child dependencies,\n// optimism needs to know about any currently active parent computations.\n// In ordinary synchronous code, the parent context is implicit in the\n// execution stack, but asynchronous code requires some extra guidance in\n// order to propagate context from one async task segment to the next.\nexport {\n  bindContext,\n  noContext,\n  setTimeout,\n  asyncFromGen,\n} from \"./context\";\n\n// A lighter-weight dependency, similar to OptimisticWrapperFunction, except\n// with only one argument, no makeCacheKey, no wrapped function to recompute,\n// and no result value. Useful for representing dependency leaves in the graph\n// of computation. Subscriptions are supported.\nexport { dep, OptimisticDependencyFunction } from \"./dep\";\n\n// Since the Cache uses a Map internally, any value or object reference can\n// be safely used as a key, though common types include object and string.\nexport type TCacheKey = any;\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\n// a unique object for any shallow-identical list of arguments. If you need\n// to implement a custom makeCacheKey function, you may find it helpful to\n// delegate the final work to defaultMakeCacheKey, which is why we export it\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\n// does not support WeakMap, or you have the ability to return a string key.\n// In those cases, just write your own custom makeCacheKey functions.\nconst keyTrie = new KeyTrie<TCacheKey>(typeof WeakMap === \"function\");\nexport function defaultMakeCacheKey(...args: any[]) {\n  return keyTrie.lookupArray(args);\n}\n\n// If you're paranoid about memory leaks, or you want to avoid using WeakMap\n// under the hood, but you still need the behavior of defaultMakeCacheKey,\n// import this constructor to create your own tries.\nexport { KeyTrie }\n\nexport type OptimisticWrapperFunction<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n> = ((...args: TArgs) => TResult) & {\n  // The .dirty(...) method of an optimistic function takes exactly the\n  // same parameter types as the original function.\n  dirty: (...args: TKeyArgs) => void;\n  // Examine the current value without recomputing it.\n  peek: (...args: TKeyArgs) => TResult | undefined;\n};\n\nexport type OptimisticWrapOptions<\n  TArgs extends any[],\n  TKeyArgs extends any[] = TArgs,\n> = {\n  // The maximum number of cache entries that should be retained before the\n  // cache begins evicting the oldest ones.\n  max?: number;\n  // Transform the raw arguments to some other type of array, which will then\n  // be passed to makeCacheKey.\n  keyArgs?: (...args: TArgs) => TKeyArgs;\n  // The makeCacheKey function takes the same arguments that were passed to\n  // the wrapper function and returns a single value that can be used as a key\n  // in a Map to identify the cached result.\n  makeCacheKey?: (...args: TKeyArgs) => TCacheKey;\n  // If provided, the subscribe function should either return an unsubscribe\n  // function or return nothing.\n  subscribe?: (...args: TArgs) => void | (() => any);\n};\n\nconst caches = new Set<Cache<TCacheKey, AnyEntry>>();\n\nexport function wrap<\n  TArgs extends any[],\n  TResult,\n  TKeyArgs extends any[] = TArgs,\n>(\n  originalFunction: (...args: TArgs) => TResult,\n  options: OptimisticWrapOptions<TArgs, TKeyArgs> = Object.create(null),\n) {\n  const cache = new Cache<TCacheKey, Entry<TArgs, TResult>>(\n    options.max || Math.pow(2, 16),\n    entry => entry.dispose(),\n  );\n\n  const keyArgs = options.keyArgs || ((...args: TArgs): TKeyArgs => args as any);\n  const makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;\n\n  function optimistic(): TResult {\n    const key = makeCacheKey.apply(null, keyArgs.apply(null, arguments as any));\n    if (key === void 0) {\n      return originalFunction.apply(null, arguments as any);\n    }\n\n    const args = Array.prototype.slice.call(arguments) as TArgs;\n\n    let entry = cache.get(key);\n    if (entry) {\n      entry.args = args;\n    } else {\n      entry = new Entry<TArgs, TResult>(originalFunction, args);\n      cache.set(key, entry);\n      entry.subscribe = options.subscribe;\n    }\n\n    const value = entry.recompute();\n\n    // Move this entry to the front of the least-recently used queue,\n    // since we just finished computing its value.\n    cache.set(key, entry);\n\n    caches.add(cache);\n\n    // Clean up any excess entries in the cache, but only if there is no\n    // active parent entry, meaning we're not in the middle of a larger\n    // computation that might be flummoxed by the cleaning.\n    if (! parentEntrySlot.hasValue()) {\n      caches.forEach(cache => cache.clean());\n      caches.clear();\n    }\n\n    return value;\n  }\n\n  function lookup() {\n    const key = makeCacheKey.apply(null, arguments as any);\n    if (key !== void 0) {\n      return cache.get(key);\n    }\n  }\n\n  optimistic.dirty = function () {\n    const entry = lookup.apply(null, arguments as any);\n    if (entry) {\n      entry.setDirty();\n    }\n  };\n\n  optimistic.peek = function () {\n    const entry = lookup.apply(null, arguments as any);\n    if (entry) {\n      return entry.peek();\n    }\n  };\n\n  return optimistic as OptimisticWrapperFunction<TArgs, TResult, TKeyArgs>;\n}\n"]},"metadata":{},"sourceType":"module"}