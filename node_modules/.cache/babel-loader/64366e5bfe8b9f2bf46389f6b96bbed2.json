{"ast":null,"code":"import { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Token } from \"./ast.mjs\";\nimport { dedentBlockStringValue } from \"./blockString.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport var Lexer = /*#__PURE__*/function () {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  function Lexer(source) {\n    var startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0, null);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  var _proto = Lexer.prototype;\n  _proto.advance = function advance() {\n    this.lastToken = this.token;\n    var token = this.token = this.lookahead();\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */;\n\n  _proto.lookahead = function lookahead() {\n    var token = this.token;\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        var _token$next;\n\n        // Note: next is only mutable during parsing, so we cast to allow this.\n        token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);\n      } while (token.kind === TokenKind.COMMENT);\n    }\n    return token;\n  };\n  return Lexer;\n}();\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\nfunction printCharCode(code) {\n  return (\n    // NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF :\n    // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) :\n    // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n  if (pos >= bodyLength) {\n    return new Token(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n  var code = body.charCodeAt(pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Token(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Token(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Token(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Token(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Token(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n        return new Token(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n      break;\n    // :\n\n    case 58:\n      return new Token(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Token(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Token(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Token(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Token(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Token(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Token(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Token(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n      return readString(source, pos, line, col, prev);\n  }\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * character, then returns the position of that character for lexing.\n */\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n  while (position < bodyLength) {\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && (\n  // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n  return new Token(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 46 || isNameStart(code)) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n  return new Token(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n    return position;\n  }\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) &&\n  // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Token(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n    ++position;\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n        case 47:\n          value += '/';\n          break;\n        case 92:\n          value += '\\\\';\n          break;\n        case 98:\n          value += '\\b';\n          break;\n        case 102:\n          value += '\\f';\n          break;\n        case 110:\n          value += '\\n';\n          break;\n        case 114:\n          value += '\\r';\n          break;\n        case 116:\n          value += '\\t';\n          break;\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n      ++position;\n      chunkStart = position;\n    }\n  }\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Token(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (\n    // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 ||\n  // _\n  code >= 48 && code <= 57 ||\n  // 0-9\n  code >= 65 && code <= 90 ||\n  // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n  return new Token(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n} // _ A-Z a-z\n\nfunction isNameStart(code) {\n  return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;\n}","map":{"version":3,"names":["syntaxError","Token","dedentBlockStringValue","TokenKind","Lexer","source","startOfFileToken","SOF","lastToken","token","line","lineStart","_proto","prototype","advance","lookahead","kind","EOF","_token$next","next","readToken","COMMENT","isPunctuatorTokenKind","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","printCharCode","code","isNaN","JSON","stringify","String","fromCharCode","concat","toString","toUpperCase","slice","lexer","prev","body","bodyLength","length","pos","positionAfterWhitespace","end","col","charCodeAt","readComment","readName","readNumber","readBlockString","readString","unexpectedCharacterMessage","startPosition","position","start","firstCode","isFloat","readDigits","isNameStart","FLOAT","INT","chunkStart","value","STRING","charCode","uniCharCode","invalidSequence","rawValue","BLOCK_STRING","a","b","c","d","char2hex","NAME"],"sources":["C:/Users/akula.s/Downloads/mutations-example-app-final-forked/node_modules/graphql/language/lexer.mjs"],"sourcesContent":["import { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Token } from \"./ast.mjs\";\nimport { dedentBlockStringValue } from \"./blockString.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport var Lexer = /*#__PURE__*/function () {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  function Lexer(source) {\n    var startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0, null);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n\n  var _proto = Lexer.prototype;\n\n  _proto.advance = function advance() {\n    this.lastToken = this.token;\n    var token = this.token = this.lookahead();\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n  ;\n\n  _proto.lookahead = function lookahead() {\n    var token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        var _token$next;\n\n        // Note: next is only mutable during parsing, so we cast to allow this.\n        token = (_token$next = token.next) !== null && _token$next !== void 0 ? _token$next : token.next = readToken(this, token);\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  };\n\n  return Lexer;\n}();\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Token(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = body.charCodeAt(pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Token(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Token(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Token(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Token(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Token(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n        return new Token(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Token(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Token(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Token(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Token(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Token(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Token(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Token(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Token(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * character, then returns the position of that character for lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Token(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n\n  if (code === 46 || isNameStart(code)) {\n    throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n  }\n\n  return new Token(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Token(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              var invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, \"Invalid character escape sequence: \\\\u\".concat(invalidSequence, \".\"));\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Token(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Token(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n} // _ A-Z a-z\n\n\nfunction isNameStart(code) {\n  return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}